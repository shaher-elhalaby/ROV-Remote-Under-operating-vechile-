
ROV_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000752  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000752  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000784  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011ac  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000944  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006be  00000000  00000000  00002388  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000014c  00000000  00000000  00002a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007e0  00000000  00000000  00002b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004d5  00000000  00000000  00003374  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003849  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <sysInit>:
 */ 
#include "MAIN.h"
#include <stdlib.h>

void sysInit(void)
{
  6c:	ef 92       	push	r14
  6e:	0f 93       	push	r16
	ADC_Init( Free_Running, AVCC, ADC_No_Int, ADC_Pre2);
  70:	21 e0       	ldi	r18, 0x01	; 1
  72:	40 e0       	ldi	r20, 0x00	; 0
  74:	60 e4       	ldi	r22, 0x40	; 64
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	0e 94 c8 00 	call	0x190	; 0x190 <ADC_Init>
	USART_Init(9600, _8Bit_9Bit, USART_Async, USART_INT_Disable, PARITY_Disable, STOP1);
  7c:	e1 2c       	mov	r14, r1
  7e:	00 e0       	ldi	r16, 0x00	; 0
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	66 e0       	ldi	r22, 0x06	; 6
  86:	80 e8       	ldi	r24, 0x80	; 128
  88:	95 e2       	ldi	r25, 0x25	; 37
  8a:	0e 94 1b 01 	call	0x236	; 0x236 <USART_Init>
	PinDirection(GPIOB,INPUTPULLUP,FWD);
  8e:	40 e0       	ldi	r20, 0x00	; 0
  90:	62 e0       	ldi	r22, 0x02	; 2
  92:	86 e3       	ldi	r24, 0x36	; 54
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <PinDirection>
	PinDirection(GPIOB,INPUTPULLUP,LFT);
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	62 e0       	ldi	r22, 0x02	; 2
  9e:	86 e3       	ldi	r24, 0x36	; 54
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <PinDirection>
	PinDirection(GPIOB,INPUTPULLUP,RHT);
  a6:	42 e0       	ldi	r20, 0x02	; 2
  a8:	62 e0       	ldi	r22, 0x02	; 2
  aa:	86 e3       	ldi	r24, 0x36	; 54
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <PinDirection>
	PinDirection(GPIOB,INPUTPULLUP,BCK);
  b2:	42 e0       	ldi	r20, 0x02	; 2
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	86 e3       	ldi	r24, 0x36	; 54
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <PinDirection>
	PortDirection(GPIOC,OUTPUT);
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	83 e3       	ldi	r24, 0x33	; 51
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 12 01 	call	0x224	; 0x224 <PortDirection>
}
  c8:	0f 91       	pop	r16
  ca:	ef 90       	pop	r14
  cc:	08 95       	ret

000000ce <sysUpdate>:
void sysUpdate(void)
{
	uint8 data;
	data = ((~(GPIOB->pin))&0X0F)/*+'a'*/;
  ce:	86 b3       	in	r24, 0x16	; 22
	USART_SendByte((char)data);
  d0:	80 95       	com	r24
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <USART_SendByte>

	data = (uint8)(analog_Read(_PA0_)/204.0)+(uint8)'A';
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <analog_Read>
	USART_SendByte(data);
  de:	bc 01       	movw	r22, r24
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 82 02 	call	0x504	; 0x504 <__floatunsisf>
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	4c e4       	ldi	r20, 0x4C	; 76
  ee:	53 e4       	ldi	r21, 0x43	; 67
  f0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__divsf3>
  f4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__fixunssfsi>
  f8:	81 e4       	ldi	r24, 0x41	; 65
  fa:	86 0f       	add	r24, r22
  fc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <USART_SendByte>

	data = (uint8)(analog_Read(_PA1_)/204.0)+(uint8)'G';
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <analog_Read>
	USART_SendByte(data);
 106:	bc 01       	movw	r22, r24
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 82 02 	call	0x504	; 0x504 <__floatunsisf>
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	4c e4       	ldi	r20, 0x4C	; 76
 116:	53 e4       	ldi	r21, 0x43	; 67
 118:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__divsf3>
 11c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__fixunssfsi>
 120:	87 e4       	ldi	r24, 0x47	; 71
 122:	86 0f       	add	r24, r22
 124:	0e 94 70 01 	call	0x2e0	; 0x2e0 <USART_SendByte>

	data = (uint8)(analog_Read(_PA2_)/204.0)+(uint8)'M';
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <analog_Read>
	USART_SendByte(data);
 12e:	bc 01       	movw	r22, r24
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 82 02 	call	0x504	; 0x504 <__floatunsisf>
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	4c e4       	ldi	r20, 0x4C	; 76
 13e:	53 e4       	ldi	r21, 0x43	; 67
 140:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__divsf3>
 144:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__fixunssfsi>
 148:	8d e4       	ldi	r24, 0x4D	; 77
 14a:	86 0f       	add	r24, r22
 14c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <USART_SendByte>

	data = (uint8)(analog_Read(_PA3_)/204.0)+(uint8)'S';
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <analog_Read>
	USART_SendByte(data);
 156:	bc 01       	movw	r22, r24
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 82 02 	call	0x504	; 0x504 <__floatunsisf>
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	4c e4       	ldi	r20, 0x4C	; 76
 166:	53 e4       	ldi	r21, 0x43	; 67
 168:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__divsf3>
 16c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__fixunssfsi>
 170:	83 e5       	ldi	r24, 0x53	; 83
 172:	86 0f       	add	r24, r22
 174:	0e 94 70 01 	call	0x2e0	; 0x2e0 <USART_SendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	87 e8       	ldi	r24, 0x87	; 135
 17a:	93 e1       	ldi	r25, 0x13	; 19
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <sysUpdate+0xae>
 180:	00 c0       	rjmp	.+0      	; 0x182 <sysUpdate+0xb4>
 182:	00 00       	nop
 184:	08 95       	ret

00000186 <main>:
 */ 
#include "MAIN.h"

int main(void)
{
    sysInit();
 186:	0e 94 36 00 	call	0x6c	; 0x6c <sysInit>
    while (1) 
    {
		sysUpdate();
 18a:	0e 94 67 00 	call	0xce	; 0xce <sysUpdate>
 18e:	fd cf       	rjmp	.-6      	; 0x18a <main+0x4>

00000190 <ADC_Init>:
 */ 
#include "ADC.h"

void ADC_Init(Trigger_Mode mode,ADC_REF REF,INT_ENABLE INT,PreScalar_Sel CLK)
{
	ADMUX  =(REF);
 190:	67 b9       	out	0x07, r22	; 7
	ADCSRA =(INT<<ADIE)|(CLK);
 192:	44 0f       	add	r20, r20
 194:	44 0f       	add	r20, r20
 196:	44 0f       	add	r20, r20
 198:	24 2b       	or	r18, r20
 19a:	26 b9       	out	0x06, r18	; 6
	if (mode!=Free_Running)
 19c:	81 11       	cpse	r24, r1
	{
		Set_Bit(ADCSRA,ADATE); 
 19e:	35 9a       	sbi	0x06, 5	; 6
	}
	Set_Bit(ADCSRA,ADEN);
 1a0:	37 9a       	sbi	0x06, 7	; 6
 1a2:	08 95       	ret

000001a4 <analog_Read>:
}
uint16 analog_Read(Channel_Sel Channel)
{
	uint16 Data=0;
	ADMUX &=0xE0;
 1a4:	97 b1       	in	r25, 0x07	; 7
 1a6:	90 7e       	andi	r25, 0xE0	; 224
 1a8:	97 b9       	out	0x07, r25	; 7
	/*start conv*/
	ADMUX |=Channel;
 1aa:	97 b1       	in	r25, 0x07	; 7
 1ac:	89 2b       	or	r24, r25
 1ae:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADSC);
 1b0:	36 9a       	sbi	0x06, 6	; 6
	while (Bit_Is_Set(ADCSRA,ADIF)==0){};
 1b2:	34 9b       	sbis	0x06, 4	; 6
 1b4:	fe cf       	rjmp	.-4      	; 0x1b2 <analog_Read+0xe>
	Data = (ADC & 0x03FF);
 1b6:	84 b1       	in	r24, 0x04	; 4
 1b8:	95 b1       	in	r25, 0x05	; 5
	/* ADIF must be Cleared*/
	Set_Bit(ADCSRA,ADIF);
 1ba:	34 9a       	sbi	0x06, 4	; 6
	return Data;
}
 1bc:	93 70       	andi	r25, 0x03	; 3
 1be:	08 95       	ret

000001c0 <PinDirection>:
 1c0:	fc 01       	movw	r30, r24
 1c2:	61 30       	cpi	r22, 0x01	; 1
 1c4:	79 f0       	breq	.+30     	; 0x1e4 <PinDirection+0x24>
 1c6:	18 f0       	brcs	.+6      	; 0x1ce <PinDirection+0xe>
 1c8:	62 30       	cpi	r22, 0x02	; 2
 1ca:	e1 f0       	breq	.+56     	; 0x204 <PinDirection+0x44>
 1cc:	08 95       	ret
 1ce:	21 81       	ldd	r18, Z+1	; 0x01
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <PinDirection+0x1a>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	4a 95       	dec	r20
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <PinDirection+0x16>
 1de:	82 2b       	or	r24, r18
 1e0:	81 83       	std	Z+1, r24	; 0x01
 1e2:	08 95       	ret
 1e4:	21 81       	ldd	r18, Z+1	; 0x01
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <PinDirection+0x30>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	4a 95       	dec	r20
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <PinDirection+0x2c>
 1f4:	80 95       	com	r24
 1f6:	92 2f       	mov	r25, r18
 1f8:	98 23       	and	r25, r24
 1fa:	91 83       	std	Z+1, r25	; 0x01
 1fc:	92 81       	ldd	r25, Z+2	; 0x02
 1fe:	89 23       	and	r24, r25
 200:	82 83       	std	Z+2, r24	; 0x02
 202:	08 95       	ret
 204:	21 81       	ldd	r18, Z+1	; 0x01
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <PinDirection+0x50>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	4a 95       	dec	r20
 212:	e2 f7       	brpl	.-8      	; 0x20c <PinDirection+0x4c>
 214:	98 2f       	mov	r25, r24
 216:	90 95       	com	r25
 218:	92 23       	and	r25, r18
 21a:	91 83       	std	Z+1, r25	; 0x01
 21c:	92 81       	ldd	r25, Z+2	; 0x02
 21e:	89 2b       	or	r24, r25
 220:	82 83       	std	Z+2, r24	; 0x02
 222:	08 95       	ret

00000224 <PortDirection>:
 224:	61 11       	cpse	r22, r1
 226:	04 c0       	rjmp	.+8      	; 0x230 <PortDirection+0xc>
 228:	2f ef       	ldi	r18, 0xFF	; 255
 22a:	fc 01       	movw	r30, r24
 22c:	21 83       	std	Z+1, r18	; 0x01
 22e:	08 95       	ret
 230:	fc 01       	movw	r30, r24
 232:	11 82       	std	Z+1, r1	; 0x01
 234:	08 95       	ret

00000236 <USART_Init>:
 */ 

#include "USART.h"

void  USART_Init(uint16 Baud_Rate, Bits_Set Bit, USART_Mode Mode,USART_INT_Enable INT,Parity_Mode Parity,Stop_Bits Stop)
{
 236:	ef 92       	push	r14
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	c6 2f       	mov	r28, r22
 242:	d4 2f       	mov	r29, r20
 244:	12 2f       	mov	r17, r18
	uint16 _UBRR;
	if (Mode != USART_Async)
 246:	44 23       	and	r20, r20
 248:	d1 f0       	breq	.+52     	; 0x27e <USART_Init+0x48>
	{
		_UBRR=(uint16)((((double)F_CPU) / (2.0*Baud_Rate))-1.0);
 24a:	bc 01       	movw	r22, r24
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 82 02 	call	0x504	; 0x504 <__floatunsisf>
 254:	9b 01       	movw	r18, r22
 256:	ac 01       	movw	r20, r24
 258:	0e 94 75 01 	call	0x2ea	; 0x2ea <__addsf3>
 25c:	9b 01       	movw	r18, r22
 25e:	ac 01       	movw	r20, r24
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	74 e2       	ldi	r23, 0x24	; 36
 264:	84 e7       	ldi	r24, 0x74	; 116
 266:	99 e4       	ldi	r25, 0x49	; 73
 268:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__divsf3>
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	40 e8       	ldi	r20, 0x80	; 128
 272:	5f e3       	ldi	r21, 0x3F	; 63
 274:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__subsf3>
 278:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__fixunssfsi>
 27c:	1b c0       	rjmp	.+54     	; 0x2b4 <USART_Init+0x7e>
	}
	else
	{
		if(Double_Speed)
			_UBRR=(uint16)((((double)F_CPU) / (8.0*Baud_Rate))-1.0);
 27e:	bc 01       	movw	r22, r24
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 82 02 	call	0x504	; 0x504 <__floatunsisf>
 288:	20 e0       	ldi	r18, 0x00	; 0
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	51 e4       	ldi	r21, 0x41	; 65
 290:	0e 94 10 03 	call	0x620	; 0x620 <__mulsf3>
 294:	9b 01       	movw	r18, r22
 296:	ac 01       	movw	r20, r24
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	74 e2       	ldi	r23, 0x24	; 36
 29c:	84 e7       	ldi	r24, 0x74	; 116
 29e:	99 e4       	ldi	r25, 0x49	; 73
 2a0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__divsf3>
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	40 e8       	ldi	r20, 0x80	; 128
 2aa:	5f e3       	ldi	r21, 0x3F	; 63
 2ac:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__subsf3>
 2b0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__fixunssfsi>
		else		
			_UBRR=(uint16)((((double)F_CPU) / (16.0*Baud_Rate))-1.0);
	}
	UBRR(_UBRR);
 2b4:	69 b9       	out	0x09, r22	; 9
 2b6:	73 70       	andi	r23, 0x03	; 3
 2b8:	70 bd       	out	0x20, r23	; 32
	
	
	UCSRA =(Double_Speed<<U2X)|(Mulit_processor<<MPCM);
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	8b b9       	out	0x0b, r24	; 11
	UCSRB =INT|(1<<RXEN)|(1<<TXEN)|(_9thBit<<UCSZ2);
 2be:	18 61       	ori	r17, 0x18	; 24
 2c0:	1a b9       	out	0x0a, r17	; 10
	UCSRC =(1<<URSEL)|(Mode)|(Bit)|(Parity)|(Stop<<3);
 2c2:	00 68       	ori	r16, 0x80	; 128
 2c4:	0c 2b       	or	r16, r28
 2c6:	ce 2d       	mov	r28, r14
 2c8:	cc 0f       	add	r28, r28
 2ca:	cc 0f       	add	r28, r28
 2cc:	cc 0f       	add	r28, r28
 2ce:	c0 2b       	or	r28, r16
 2d0:	cd 2b       	or	r28, r29
 2d2:	c0 bd       	out	0x20, r28	; 32
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	ef 90       	pop	r14
 2de:	08 95       	ret

000002e0 <USART_SendByte>:
void  USART_SendByte(uint8 Data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
 2e0:	5d 9b       	sbis	0x0b, 5	; 11
 2e2:	fe cf       	rjmp	.-4      	; 0x2e0 <USART_SendByte>
	if ( Data & 0x0100 )
	UCSRB |= (1<<TXB8);
       #endif
	
	/* Put data into buffer, sends the data */
	UDR = Data;
 2e4:	8c b9       	out	0x0c, r24	; 12
 2e6:	08 95       	ret

000002e8 <__subsf3>:
 2e8:	50 58       	subi	r21, 0x80	; 128

000002ea <__addsf3>:
 2ea:	bb 27       	eor	r27, r27
 2ec:	aa 27       	eor	r26, r26
 2ee:	0e 94 8c 01 	call	0x318	; 0x318 <__addsf3x>
 2f2:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__fp_round>
 2f6:	0e 94 c8 02 	call	0x590	; 0x590 <__fp_pscA>
 2fa:	38 f0       	brcs	.+14     	; 0x30a <__addsf3+0x20>
 2fc:	0e 94 cf 02 	call	0x59e	; 0x59e <__fp_pscB>
 300:	20 f0       	brcs	.+8      	; 0x30a <__addsf3+0x20>
 302:	39 f4       	brne	.+14     	; 0x312 <__addsf3+0x28>
 304:	9f 3f       	cpi	r25, 0xFF	; 255
 306:	19 f4       	brne	.+6      	; 0x30e <__addsf3+0x24>
 308:	26 f4       	brtc	.+8      	; 0x312 <__addsf3+0x28>
 30a:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__fp_nan>
 30e:	0e f4       	brtc	.+2      	; 0x312 <__addsf3+0x28>
 310:	e0 95       	com	r30
 312:	e7 fb       	bst	r30, 7
 314:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__fp_inf>

00000318 <__addsf3x>:
 318:	e9 2f       	mov	r30, r25
 31a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__fp_split3>
 31e:	58 f3       	brcs	.-42     	; 0x2f6 <__addsf3+0xc>
 320:	ba 17       	cp	r27, r26
 322:	62 07       	cpc	r22, r18
 324:	73 07       	cpc	r23, r19
 326:	84 07       	cpc	r24, r20
 328:	95 07       	cpc	r25, r21
 32a:	20 f0       	brcs	.+8      	; 0x334 <__addsf3x+0x1c>
 32c:	79 f4       	brne	.+30     	; 0x34c <__addsf3x+0x34>
 32e:	a6 f5       	brtc	.+104    	; 0x398 <__addsf3x+0x80>
 330:	0c 94 09 03 	jmp	0x612	; 0x612 <__fp_zero>
 334:	0e f4       	brtc	.+2      	; 0x338 <__addsf3x+0x20>
 336:	e0 95       	com	r30
 338:	0b 2e       	mov	r0, r27
 33a:	ba 2f       	mov	r27, r26
 33c:	a0 2d       	mov	r26, r0
 33e:	0b 01       	movw	r0, r22
 340:	b9 01       	movw	r22, r18
 342:	90 01       	movw	r18, r0
 344:	0c 01       	movw	r0, r24
 346:	ca 01       	movw	r24, r20
 348:	a0 01       	movw	r20, r0
 34a:	11 24       	eor	r1, r1
 34c:	ff 27       	eor	r31, r31
 34e:	59 1b       	sub	r21, r25
 350:	99 f0       	breq	.+38     	; 0x378 <__addsf3x+0x60>
 352:	59 3f       	cpi	r21, 0xF9	; 249
 354:	50 f4       	brcc	.+20     	; 0x36a <__addsf3x+0x52>
 356:	50 3e       	cpi	r21, 0xE0	; 224
 358:	68 f1       	brcs	.+90     	; 0x3b4 <__addsf3x+0x9c>
 35a:	1a 16       	cp	r1, r26
 35c:	f0 40       	sbci	r31, 0x00	; 0
 35e:	a2 2f       	mov	r26, r18
 360:	23 2f       	mov	r18, r19
 362:	34 2f       	mov	r19, r20
 364:	44 27       	eor	r20, r20
 366:	58 5f       	subi	r21, 0xF8	; 248
 368:	f3 cf       	rjmp	.-26     	; 0x350 <__addsf3x+0x38>
 36a:	46 95       	lsr	r20
 36c:	37 95       	ror	r19
 36e:	27 95       	ror	r18
 370:	a7 95       	ror	r26
 372:	f0 40       	sbci	r31, 0x00	; 0
 374:	53 95       	inc	r21
 376:	c9 f7       	brne	.-14     	; 0x36a <__addsf3x+0x52>
 378:	7e f4       	brtc	.+30     	; 0x398 <__addsf3x+0x80>
 37a:	1f 16       	cp	r1, r31
 37c:	ba 0b       	sbc	r27, r26
 37e:	62 0b       	sbc	r22, r18
 380:	73 0b       	sbc	r23, r19
 382:	84 0b       	sbc	r24, r20
 384:	ba f0       	brmi	.+46     	; 0x3b4 <__addsf3x+0x9c>
 386:	91 50       	subi	r25, 0x01	; 1
 388:	a1 f0       	breq	.+40     	; 0x3b2 <__addsf3x+0x9a>
 38a:	ff 0f       	add	r31, r31
 38c:	bb 1f       	adc	r27, r27
 38e:	66 1f       	adc	r22, r22
 390:	77 1f       	adc	r23, r23
 392:	88 1f       	adc	r24, r24
 394:	c2 f7       	brpl	.-16     	; 0x386 <__addsf3x+0x6e>
 396:	0e c0       	rjmp	.+28     	; 0x3b4 <__addsf3x+0x9c>
 398:	ba 0f       	add	r27, r26
 39a:	62 1f       	adc	r22, r18
 39c:	73 1f       	adc	r23, r19
 39e:	84 1f       	adc	r24, r20
 3a0:	48 f4       	brcc	.+18     	; 0x3b4 <__addsf3x+0x9c>
 3a2:	87 95       	ror	r24
 3a4:	77 95       	ror	r23
 3a6:	67 95       	ror	r22
 3a8:	b7 95       	ror	r27
 3aa:	f7 95       	ror	r31
 3ac:	9e 3f       	cpi	r25, 0xFE	; 254
 3ae:	08 f0       	brcs	.+2      	; 0x3b2 <__addsf3x+0x9a>
 3b0:	b0 cf       	rjmp	.-160    	; 0x312 <__addsf3+0x28>
 3b2:	93 95       	inc	r25
 3b4:	88 0f       	add	r24, r24
 3b6:	08 f0       	brcs	.+2      	; 0x3ba <__addsf3x+0xa2>
 3b8:	99 27       	eor	r25, r25
 3ba:	ee 0f       	add	r30, r30
 3bc:	97 95       	ror	r25
 3be:	87 95       	ror	r24
 3c0:	08 95       	ret

000003c2 <__divsf3>:
 3c2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__divsf3x>
 3c6:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__fp_round>
 3ca:	0e 94 cf 02 	call	0x59e	; 0x59e <__fp_pscB>
 3ce:	58 f0       	brcs	.+22     	; 0x3e6 <__divsf3+0x24>
 3d0:	0e 94 c8 02 	call	0x590	; 0x590 <__fp_pscA>
 3d4:	40 f0       	brcs	.+16     	; 0x3e6 <__divsf3+0x24>
 3d6:	29 f4       	brne	.+10     	; 0x3e2 <__divsf3+0x20>
 3d8:	5f 3f       	cpi	r21, 0xFF	; 255
 3da:	29 f0       	breq	.+10     	; 0x3e6 <__divsf3+0x24>
 3dc:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__fp_inf>
 3e0:	51 11       	cpse	r21, r1
 3e2:	0c 94 0a 03 	jmp	0x614	; 0x614 <__fp_szero>
 3e6:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__fp_nan>

000003ea <__divsf3x>:
 3ea:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__fp_split3>
 3ee:	68 f3       	brcs	.-38     	; 0x3ca <__divsf3+0x8>

000003f0 <__divsf3_pse>:
 3f0:	99 23       	and	r25, r25
 3f2:	b1 f3       	breq	.-20     	; 0x3e0 <__divsf3+0x1e>
 3f4:	55 23       	and	r21, r21
 3f6:	91 f3       	breq	.-28     	; 0x3dc <__divsf3+0x1a>
 3f8:	95 1b       	sub	r25, r21
 3fa:	55 0b       	sbc	r21, r21
 3fc:	bb 27       	eor	r27, r27
 3fe:	aa 27       	eor	r26, r26
 400:	62 17       	cp	r22, r18
 402:	73 07       	cpc	r23, r19
 404:	84 07       	cpc	r24, r20
 406:	38 f0       	brcs	.+14     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 408:	9f 5f       	subi	r25, 0xFF	; 255
 40a:	5f 4f       	sbci	r21, 0xFF	; 255
 40c:	22 0f       	add	r18, r18
 40e:	33 1f       	adc	r19, r19
 410:	44 1f       	adc	r20, r20
 412:	aa 1f       	adc	r26, r26
 414:	a9 f3       	breq	.-22     	; 0x400 <__LOCK_REGION_LENGTH__>
 416:	35 d0       	rcall	.+106    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 418:	0e 2e       	mov	r0, r30
 41a:	3a f0       	brmi	.+14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 41c:	e0 e8       	ldi	r30, 0x80	; 128
 41e:	32 d0       	rcall	.+100    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 420:	91 50       	subi	r25, 0x01	; 1
 422:	50 40       	sbci	r21, 0x00	; 0
 424:	e6 95       	lsr	r30
 426:	00 1c       	adc	r0, r0
 428:	ca f7       	brpl	.-14     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 42a:	2b d0       	rcall	.+86     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 42c:	fe 2f       	mov	r31, r30
 42e:	29 d0       	rcall	.+82     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 430:	66 0f       	add	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	88 1f       	adc	r24, r24
 436:	bb 1f       	adc	r27, r27
 438:	26 17       	cp	r18, r22
 43a:	37 07       	cpc	r19, r23
 43c:	48 07       	cpc	r20, r24
 43e:	ab 07       	cpc	r26, r27
 440:	b0 e8       	ldi	r27, 0x80	; 128
 442:	09 f0       	breq	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 444:	bb 0b       	sbc	r27, r27
 446:	80 2d       	mov	r24, r0
 448:	bf 01       	movw	r22, r30
 44a:	ff 27       	eor	r31, r31
 44c:	93 58       	subi	r25, 0x83	; 131
 44e:	5f 4f       	sbci	r21, 0xFF	; 255
 450:	3a f0       	brmi	.+14     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 452:	9e 3f       	cpi	r25, 0xFE	; 254
 454:	51 05       	cpc	r21, r1
 456:	78 f0       	brcs	.+30     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 458:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__fp_inf>
 45c:	0c 94 0a 03 	jmp	0x614	; 0x614 <__fp_szero>
 460:	5f 3f       	cpi	r21, 0xFF	; 255
 462:	e4 f3       	brlt	.-8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 464:	98 3e       	cpi	r25, 0xE8	; 232
 466:	d4 f3       	brlt	.-12     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 468:	86 95       	lsr	r24
 46a:	77 95       	ror	r23
 46c:	67 95       	ror	r22
 46e:	b7 95       	ror	r27
 470:	f7 95       	ror	r31
 472:	9f 5f       	subi	r25, 0xFF	; 255
 474:	c9 f7       	brne	.-14     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 476:	88 0f       	add	r24, r24
 478:	91 1d       	adc	r25, r1
 47a:	96 95       	lsr	r25
 47c:	87 95       	ror	r24
 47e:	97 f9       	bld	r25, 7
 480:	08 95       	ret
 482:	e1 e0       	ldi	r30, 0x01	; 1
 484:	66 0f       	add	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	88 1f       	adc	r24, r24
 48a:	bb 1f       	adc	r27, r27
 48c:	62 17       	cp	r22, r18
 48e:	73 07       	cpc	r23, r19
 490:	84 07       	cpc	r24, r20
 492:	ba 07       	cpc	r27, r26
 494:	20 f0       	brcs	.+8      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 496:	62 1b       	sub	r22, r18
 498:	73 0b       	sbc	r23, r19
 49a:	84 0b       	sbc	r24, r20
 49c:	ba 0b       	sbc	r27, r26
 49e:	ee 1f       	adc	r30, r30
 4a0:	88 f7       	brcc	.-30     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 4a2:	e0 95       	com	r30
 4a4:	08 95       	ret

000004a6 <__fixunssfsi>:
 4a6:	0e 94 ef 02 	call	0x5de	; 0x5de <__fp_splitA>
 4aa:	88 f0       	brcs	.+34     	; 0x4ce <__fixunssfsi+0x28>
 4ac:	9f 57       	subi	r25, 0x7F	; 127
 4ae:	98 f0       	brcs	.+38     	; 0x4d6 <__fixunssfsi+0x30>
 4b0:	b9 2f       	mov	r27, r25
 4b2:	99 27       	eor	r25, r25
 4b4:	b7 51       	subi	r27, 0x17	; 23
 4b6:	b0 f0       	brcs	.+44     	; 0x4e4 <__fixunssfsi+0x3e>
 4b8:	e1 f0       	breq	.+56     	; 0x4f2 <__fixunssfsi+0x4c>
 4ba:	66 0f       	add	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	88 1f       	adc	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	1a f0       	brmi	.+6      	; 0x4ca <__fixunssfsi+0x24>
 4c4:	ba 95       	dec	r27
 4c6:	c9 f7       	brne	.-14     	; 0x4ba <__fixunssfsi+0x14>
 4c8:	14 c0       	rjmp	.+40     	; 0x4f2 <__fixunssfsi+0x4c>
 4ca:	b1 30       	cpi	r27, 0x01	; 1
 4cc:	91 f0       	breq	.+36     	; 0x4f2 <__fixunssfsi+0x4c>
 4ce:	0e 94 09 03 	call	0x612	; 0x612 <__fp_zero>
 4d2:	b1 e0       	ldi	r27, 0x01	; 1
 4d4:	08 95       	ret
 4d6:	0c 94 09 03 	jmp	0x612	; 0x612 <__fp_zero>
 4da:	67 2f       	mov	r22, r23
 4dc:	78 2f       	mov	r23, r24
 4de:	88 27       	eor	r24, r24
 4e0:	b8 5f       	subi	r27, 0xF8	; 248
 4e2:	39 f0       	breq	.+14     	; 0x4f2 <__fixunssfsi+0x4c>
 4e4:	b9 3f       	cpi	r27, 0xF9	; 249
 4e6:	cc f3       	brlt	.-14     	; 0x4da <__fixunssfsi+0x34>
 4e8:	86 95       	lsr	r24
 4ea:	77 95       	ror	r23
 4ec:	67 95       	ror	r22
 4ee:	b3 95       	inc	r27
 4f0:	d9 f7       	brne	.-10     	; 0x4e8 <__fixunssfsi+0x42>
 4f2:	3e f4       	brtc	.+14     	; 0x502 <__fixunssfsi+0x5c>
 4f4:	90 95       	com	r25
 4f6:	80 95       	com	r24
 4f8:	70 95       	com	r23
 4fa:	61 95       	neg	r22
 4fc:	7f 4f       	sbci	r23, 0xFF	; 255
 4fe:	8f 4f       	sbci	r24, 0xFF	; 255
 500:	9f 4f       	sbci	r25, 0xFF	; 255
 502:	08 95       	ret

00000504 <__floatunsisf>:
 504:	e8 94       	clt
 506:	09 c0       	rjmp	.+18     	; 0x51a <__floatsisf+0x12>

00000508 <__floatsisf>:
 508:	97 fb       	bst	r25, 7
 50a:	3e f4       	brtc	.+14     	; 0x51a <__floatsisf+0x12>
 50c:	90 95       	com	r25
 50e:	80 95       	com	r24
 510:	70 95       	com	r23
 512:	61 95       	neg	r22
 514:	7f 4f       	sbci	r23, 0xFF	; 255
 516:	8f 4f       	sbci	r24, 0xFF	; 255
 518:	9f 4f       	sbci	r25, 0xFF	; 255
 51a:	99 23       	and	r25, r25
 51c:	a9 f0       	breq	.+42     	; 0x548 <__floatsisf+0x40>
 51e:	f9 2f       	mov	r31, r25
 520:	96 e9       	ldi	r25, 0x96	; 150
 522:	bb 27       	eor	r27, r27
 524:	93 95       	inc	r25
 526:	f6 95       	lsr	r31
 528:	87 95       	ror	r24
 52a:	77 95       	ror	r23
 52c:	67 95       	ror	r22
 52e:	b7 95       	ror	r27
 530:	f1 11       	cpse	r31, r1
 532:	f8 cf       	rjmp	.-16     	; 0x524 <__floatsisf+0x1c>
 534:	fa f4       	brpl	.+62     	; 0x574 <__floatsisf+0x6c>
 536:	bb 0f       	add	r27, r27
 538:	11 f4       	brne	.+4      	; 0x53e <__floatsisf+0x36>
 53a:	60 ff       	sbrs	r22, 0
 53c:	1b c0       	rjmp	.+54     	; 0x574 <__floatsisf+0x6c>
 53e:	6f 5f       	subi	r22, 0xFF	; 255
 540:	7f 4f       	sbci	r23, 0xFF	; 255
 542:	8f 4f       	sbci	r24, 0xFF	; 255
 544:	9f 4f       	sbci	r25, 0xFF	; 255
 546:	16 c0       	rjmp	.+44     	; 0x574 <__floatsisf+0x6c>
 548:	88 23       	and	r24, r24
 54a:	11 f0       	breq	.+4      	; 0x550 <__floatsisf+0x48>
 54c:	96 e9       	ldi	r25, 0x96	; 150
 54e:	11 c0       	rjmp	.+34     	; 0x572 <__floatsisf+0x6a>
 550:	77 23       	and	r23, r23
 552:	21 f0       	breq	.+8      	; 0x55c <__floatsisf+0x54>
 554:	9e e8       	ldi	r25, 0x8E	; 142
 556:	87 2f       	mov	r24, r23
 558:	76 2f       	mov	r23, r22
 55a:	05 c0       	rjmp	.+10     	; 0x566 <__floatsisf+0x5e>
 55c:	66 23       	and	r22, r22
 55e:	71 f0       	breq	.+28     	; 0x57c <__floatsisf+0x74>
 560:	96 e8       	ldi	r25, 0x86	; 134
 562:	86 2f       	mov	r24, r22
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	2a f0       	brmi	.+10     	; 0x574 <__floatsisf+0x6c>
 56a:	9a 95       	dec	r25
 56c:	66 0f       	add	r22, r22
 56e:	77 1f       	adc	r23, r23
 570:	88 1f       	adc	r24, r24
 572:	da f7       	brpl	.-10     	; 0x56a <__floatsisf+0x62>
 574:	88 0f       	add	r24, r24
 576:	96 95       	lsr	r25
 578:	87 95       	ror	r24
 57a:	97 f9       	bld	r25, 7
 57c:	08 95       	ret

0000057e <__fp_inf>:
 57e:	97 f9       	bld	r25, 7
 580:	9f 67       	ori	r25, 0x7F	; 127
 582:	80 e8       	ldi	r24, 0x80	; 128
 584:	70 e0       	ldi	r23, 0x00	; 0
 586:	60 e0       	ldi	r22, 0x00	; 0
 588:	08 95       	ret

0000058a <__fp_nan>:
 58a:	9f ef       	ldi	r25, 0xFF	; 255
 58c:	80 ec       	ldi	r24, 0xC0	; 192
 58e:	08 95       	ret

00000590 <__fp_pscA>:
 590:	00 24       	eor	r0, r0
 592:	0a 94       	dec	r0
 594:	16 16       	cp	r1, r22
 596:	17 06       	cpc	r1, r23
 598:	18 06       	cpc	r1, r24
 59a:	09 06       	cpc	r0, r25
 59c:	08 95       	ret

0000059e <__fp_pscB>:
 59e:	00 24       	eor	r0, r0
 5a0:	0a 94       	dec	r0
 5a2:	12 16       	cp	r1, r18
 5a4:	13 06       	cpc	r1, r19
 5a6:	14 06       	cpc	r1, r20
 5a8:	05 06       	cpc	r0, r21
 5aa:	08 95       	ret

000005ac <__fp_round>:
 5ac:	09 2e       	mov	r0, r25
 5ae:	03 94       	inc	r0
 5b0:	00 0c       	add	r0, r0
 5b2:	11 f4       	brne	.+4      	; 0x5b8 <__fp_round+0xc>
 5b4:	88 23       	and	r24, r24
 5b6:	52 f0       	brmi	.+20     	; 0x5cc <__fp_round+0x20>
 5b8:	bb 0f       	add	r27, r27
 5ba:	40 f4       	brcc	.+16     	; 0x5cc <__fp_round+0x20>
 5bc:	bf 2b       	or	r27, r31
 5be:	11 f4       	brne	.+4      	; 0x5c4 <__fp_round+0x18>
 5c0:	60 ff       	sbrs	r22, 0
 5c2:	04 c0       	rjmp	.+8      	; 0x5cc <__fp_round+0x20>
 5c4:	6f 5f       	subi	r22, 0xFF	; 255
 5c6:	7f 4f       	sbci	r23, 0xFF	; 255
 5c8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ca:	9f 4f       	sbci	r25, 0xFF	; 255
 5cc:	08 95       	ret

000005ce <__fp_split3>:
 5ce:	57 fd       	sbrc	r21, 7
 5d0:	90 58       	subi	r25, 0x80	; 128
 5d2:	44 0f       	add	r20, r20
 5d4:	55 1f       	adc	r21, r21
 5d6:	59 f0       	breq	.+22     	; 0x5ee <__fp_splitA+0x10>
 5d8:	5f 3f       	cpi	r21, 0xFF	; 255
 5da:	71 f0       	breq	.+28     	; 0x5f8 <__fp_splitA+0x1a>
 5dc:	47 95       	ror	r20

000005de <__fp_splitA>:
 5de:	88 0f       	add	r24, r24
 5e0:	97 fb       	bst	r25, 7
 5e2:	99 1f       	adc	r25, r25
 5e4:	61 f0       	breq	.+24     	; 0x5fe <__fp_splitA+0x20>
 5e6:	9f 3f       	cpi	r25, 0xFF	; 255
 5e8:	79 f0       	breq	.+30     	; 0x608 <__fp_splitA+0x2a>
 5ea:	87 95       	ror	r24
 5ec:	08 95       	ret
 5ee:	12 16       	cp	r1, r18
 5f0:	13 06       	cpc	r1, r19
 5f2:	14 06       	cpc	r1, r20
 5f4:	55 1f       	adc	r21, r21
 5f6:	f2 cf       	rjmp	.-28     	; 0x5dc <__fp_split3+0xe>
 5f8:	46 95       	lsr	r20
 5fa:	f1 df       	rcall	.-30     	; 0x5de <__fp_splitA>
 5fc:	08 c0       	rjmp	.+16     	; 0x60e <__fp_splitA+0x30>
 5fe:	16 16       	cp	r1, r22
 600:	17 06       	cpc	r1, r23
 602:	18 06       	cpc	r1, r24
 604:	99 1f       	adc	r25, r25
 606:	f1 cf       	rjmp	.-30     	; 0x5ea <__fp_splitA+0xc>
 608:	86 95       	lsr	r24
 60a:	71 05       	cpc	r23, r1
 60c:	61 05       	cpc	r22, r1
 60e:	08 94       	sec
 610:	08 95       	ret

00000612 <__fp_zero>:
 612:	e8 94       	clt

00000614 <__fp_szero>:
 614:	bb 27       	eor	r27, r27
 616:	66 27       	eor	r22, r22
 618:	77 27       	eor	r23, r23
 61a:	cb 01       	movw	r24, r22
 61c:	97 f9       	bld	r25, 7
 61e:	08 95       	ret

00000620 <__mulsf3>:
 620:	0e 94 23 03 	call	0x646	; 0x646 <__mulsf3x>
 624:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__fp_round>
 628:	0e 94 c8 02 	call	0x590	; 0x590 <__fp_pscA>
 62c:	38 f0       	brcs	.+14     	; 0x63c <__mulsf3+0x1c>
 62e:	0e 94 cf 02 	call	0x59e	; 0x59e <__fp_pscB>
 632:	20 f0       	brcs	.+8      	; 0x63c <__mulsf3+0x1c>
 634:	95 23       	and	r25, r21
 636:	11 f0       	breq	.+4      	; 0x63c <__mulsf3+0x1c>
 638:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__fp_inf>
 63c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__fp_nan>
 640:	11 24       	eor	r1, r1
 642:	0c 94 0a 03 	jmp	0x614	; 0x614 <__fp_szero>

00000646 <__mulsf3x>:
 646:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__fp_split3>
 64a:	70 f3       	brcs	.-36     	; 0x628 <__mulsf3+0x8>

0000064c <__mulsf3_pse>:
 64c:	95 9f       	mul	r25, r21
 64e:	c1 f3       	breq	.-16     	; 0x640 <__mulsf3+0x20>
 650:	95 0f       	add	r25, r21
 652:	50 e0       	ldi	r21, 0x00	; 0
 654:	55 1f       	adc	r21, r21
 656:	62 9f       	mul	r22, r18
 658:	f0 01       	movw	r30, r0
 65a:	72 9f       	mul	r23, r18
 65c:	bb 27       	eor	r27, r27
 65e:	f0 0d       	add	r31, r0
 660:	b1 1d       	adc	r27, r1
 662:	63 9f       	mul	r22, r19
 664:	aa 27       	eor	r26, r26
 666:	f0 0d       	add	r31, r0
 668:	b1 1d       	adc	r27, r1
 66a:	aa 1f       	adc	r26, r26
 66c:	64 9f       	mul	r22, r20
 66e:	66 27       	eor	r22, r22
 670:	b0 0d       	add	r27, r0
 672:	a1 1d       	adc	r26, r1
 674:	66 1f       	adc	r22, r22
 676:	82 9f       	mul	r24, r18
 678:	22 27       	eor	r18, r18
 67a:	b0 0d       	add	r27, r0
 67c:	a1 1d       	adc	r26, r1
 67e:	62 1f       	adc	r22, r18
 680:	73 9f       	mul	r23, r19
 682:	b0 0d       	add	r27, r0
 684:	a1 1d       	adc	r26, r1
 686:	62 1f       	adc	r22, r18
 688:	83 9f       	mul	r24, r19
 68a:	a0 0d       	add	r26, r0
 68c:	61 1d       	adc	r22, r1
 68e:	22 1f       	adc	r18, r18
 690:	74 9f       	mul	r23, r20
 692:	33 27       	eor	r19, r19
 694:	a0 0d       	add	r26, r0
 696:	61 1d       	adc	r22, r1
 698:	23 1f       	adc	r18, r19
 69a:	84 9f       	mul	r24, r20
 69c:	60 0d       	add	r22, r0
 69e:	21 1d       	adc	r18, r1
 6a0:	82 2f       	mov	r24, r18
 6a2:	76 2f       	mov	r23, r22
 6a4:	6a 2f       	mov	r22, r26
 6a6:	11 24       	eor	r1, r1
 6a8:	9f 57       	subi	r25, 0x7F	; 127
 6aa:	50 40       	sbci	r21, 0x00	; 0
 6ac:	9a f0       	brmi	.+38     	; 0x6d4 <__mulsf3_pse+0x88>
 6ae:	f1 f0       	breq	.+60     	; 0x6ec <__mulsf3_pse+0xa0>
 6b0:	88 23       	and	r24, r24
 6b2:	4a f0       	brmi	.+18     	; 0x6c6 <__mulsf3_pse+0x7a>
 6b4:	ee 0f       	add	r30, r30
 6b6:	ff 1f       	adc	r31, r31
 6b8:	bb 1f       	adc	r27, r27
 6ba:	66 1f       	adc	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	88 1f       	adc	r24, r24
 6c0:	91 50       	subi	r25, 0x01	; 1
 6c2:	50 40       	sbci	r21, 0x00	; 0
 6c4:	a9 f7       	brne	.-22     	; 0x6b0 <__mulsf3_pse+0x64>
 6c6:	9e 3f       	cpi	r25, 0xFE	; 254
 6c8:	51 05       	cpc	r21, r1
 6ca:	80 f0       	brcs	.+32     	; 0x6ec <__mulsf3_pse+0xa0>
 6cc:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__fp_inf>
 6d0:	0c 94 0a 03 	jmp	0x614	; 0x614 <__fp_szero>
 6d4:	5f 3f       	cpi	r21, 0xFF	; 255
 6d6:	e4 f3       	brlt	.-8      	; 0x6d0 <__mulsf3_pse+0x84>
 6d8:	98 3e       	cpi	r25, 0xE8	; 232
 6da:	d4 f3       	brlt	.-12     	; 0x6d0 <__mulsf3_pse+0x84>
 6dc:	86 95       	lsr	r24
 6de:	77 95       	ror	r23
 6e0:	67 95       	ror	r22
 6e2:	b7 95       	ror	r27
 6e4:	f7 95       	ror	r31
 6e6:	e7 95       	ror	r30
 6e8:	9f 5f       	subi	r25, 0xFF	; 255
 6ea:	c1 f7       	brne	.-16     	; 0x6dc <__mulsf3_pse+0x90>
 6ec:	fe 2b       	or	r31, r30
 6ee:	88 0f       	add	r24, r24
 6f0:	91 1d       	adc	r25, r1
 6f2:	96 95       	lsr	r25
 6f4:	87 95       	ror	r24
 6f6:	97 f9       	bld	r25, 7
 6f8:	08 95       	ret

000006fa <_exit>:
 6fa:	f8 94       	cli

000006fc <__stop_program>:
 6fc:	ff cf       	rjmp	.-2      	; 0x6fc <__stop_program>
