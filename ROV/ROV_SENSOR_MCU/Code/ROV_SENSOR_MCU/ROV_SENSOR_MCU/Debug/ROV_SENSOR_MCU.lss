
ROV_SENSOR_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  00000fb8  0000104c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f1  008000e0  008000e0  000010cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000344c  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001075  00000000  00000000  000047c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000178e  00000000  00000000  00005839  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000057c  00000000  00000000  00006fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e70  00000000  00000000  00007544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000198c  00000000  00000000  000083b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00009d40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_1>
   8:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3e       	cpi	r26, 0xE0	; 224
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 ee       	ldi	r26, 0xE0	; 224
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3d       	cpi	r26, 0xD1	; 209
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8b 02 	call	0x516	; 0x516 <main>
  8a:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <sysInit>:
UltraSonicInfo UTR_V;
DHT_Info DHT;
RTC_Info RTC;

void sysInit(void)
{
  92:	ef 92       	push	r14
  94:	0f 93       	push	r16
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
	UTR_H.Uport =GPIOD;
  9a:	ea eb       	ldi	r30, 0xBA	; 186
  9c:	f1 e0       	ldi	r31, 0x01	; 1
  9e:	c0 e3       	ldi	r28, 0x30	; 48
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	d1 83       	std	Z+1, r29	; 0x01
  a4:	c0 83       	st	Z, r28
	UTR_H.Echo =_INT1;
  a6:	80 e8       	ldi	r24, 0x80	; 128
  a8:	83 83       	std	Z+3, r24	; 0x03
	UTR_H.INTmODE = LVL_INT1;
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	84 83       	std	Z+4, r24	; 0x04
	UTR_H.Trig = PD4;
  ae:	82 83       	std	Z+2, r24	; 0x02
	UltraSonicInit(&UTR_H);
  b0:	cf 01       	movw	r24, r30
  b2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <UltraSonicInit>
	UTR_V.Uport =GPIOD;
  b6:	e8 ec       	ldi	r30, 0xC8	; 200
  b8:	f1 e0       	ldi	r31, 0x01	; 1
  ba:	d1 83       	std	Z+1, r29	; 0x01
  bc:	c0 83       	st	Z, r28
	UTR_V.Echo =_INT0;
  be:	80 e4       	ldi	r24, 0x40	; 64
  c0:	83 83       	std	Z+3, r24	; 0x03
	UTR_V.INTmODE = LVL_INT0;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	84 83       	std	Z+4, r24	; 0x04
	UTR_V.Trig = PD5;
  c6:	c5 e0       	ldi	r28, 0x05	; 5
  c8:	c2 83       	std	Z+2, r28	; 0x02
	UltraSonicInit(&UTR_V);
  ca:	cf 01       	movw	r24, r30
  cc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <UltraSonicInit>
	DHT.DHT = GPIOB;
  d0:	e2 eb       	ldi	r30, 0xB2	; 178
  d2:	f1 e0       	ldi	r31, 0x01	; 1
  d4:	86 e3       	ldi	r24, 0x36	; 54
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	91 83       	std	Z+1, r25	; 0x01
  da:	80 83       	st	Z, r24
	DHT.DHT_Pin = PB5;
  dc:	c2 83       	std	Z+2, r28	; 0x02
	I2C_Init(0X08,100000,I2C_INT_Disable,I2C_pre1);
  de:	00 e0       	ldi	r16, 0x00	; 0
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	40 ea       	ldi	r20, 0xA0	; 160
  e4:	56 e8       	ldi	r21, 0x86	; 134
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	88 e0       	ldi	r24, 0x08	; 8
  ec:	0e 94 75 04 	call	0x8ea	; 0x8ea <I2C_Init>
	RTC_Init(&RTC);
  f0:	81 ec       	ldi	r24, 0xC1	; 193
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	0e 94 24 03 	call	0x648	; 0x648 <RTC_Init>
	USART_Init(9600, _8Bit_9Bit, USART_Async, USART_INT_Disable, PARITY_Disable, STOP1);
  f8:	e1 2c       	mov	r14, r1
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	66 e0       	ldi	r22, 0x06	; 6
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	95 e2       	ldi	r25, 0x25	; 37
 104:	0e 94 38 05 	call	0xa70	; 0xa70 <USART_Init>
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	0f 91       	pop	r16
 10e:	ef 90       	pop	r14
 110:	08 95       	ret

00000112 <TransUART>:
	MassgeUpdata();
	_delay_ms(1000);
}

void TransUART(uint8 *ptr)
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ec 01       	movw	r28, r24
	while (*ptr!='\0')
 118:	88 81       	ld	r24, Y
 11a:	88 23       	and	r24, r24
 11c:	31 f0       	breq	.+12     	; 0x12a <TransUART+0x18>
 11e:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_SendByte(*ptr);
 120:	0e 94 8d 05 	call	0xb1a	; 0xb1a <USART_SendByte>
	_delay_ms(1000);
}

void TransUART(uint8 *ptr)
{
	while (*ptr!='\0')
 124:	89 91       	ld	r24, Y+
 126:	81 11       	cpse	r24, r1
 128:	fb cf       	rjmp	.-10     	; 0x120 <TransUART+0xe>
	{
		USART_SendByte(*ptr);
		ptr++;
	}
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <DisplayRTC>:
	TransUART((uint8*)"**************************************");
	USART_SendByte(0x0D);
}

void DisplayRTC(RTC_Info *info,uint8 *Date,uint8 *clk)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
 13e:	8b 01       	movw	r16, r22
 140:	7a 01       	movw	r14, r20
	static char shour1[2],smin1[2],ssec1[2];
	
	static uint8 syear[2],smon[2],sday[2];
	static uint8 ssyear[2],ssmon[2],ssday[2];
	
	itoa((info->Hour&0x0f),shour,10);
 142:	8a 81       	ldd	r24, Y+2	; 0x02
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 144:	8f 70       	andi	r24, 0x0F	; 15
 146:	4a e0       	ldi	r20, 0x0A	; 10
 148:	66 e0       	ldi	r22, 0x06	; 6
 14a:	71 e0       	ldi	r23, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__itoa_ncheck>
	itoa((info->Min&0x0f),smin,10);
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	8f 70       	andi	r24, 0x0F	; 15
 156:	4a e0       	ldi	r20, 0x0A	; 10
 158:	64 e0       	ldi	r22, 0x04	; 4
 15a:	71 e0       	ldi	r23, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__itoa_ncheck>
	itoa((info->Second&0x0f),ssec,10);
 162:	88 81       	ld	r24, Y
 164:	8f 70       	andi	r24, 0x0F	; 15
 166:	4a e0       	ldi	r20, 0x0A	; 10
 168:	62 e0       	ldi	r22, 0x02	; 2
 16a:	71 e0       	ldi	r23, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__itoa_ncheck>
	itoa((info->Hour>>4),shour1,10);
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	82 95       	swap	r24
 176:	8f 70       	andi	r24, 0x0F	; 15
 178:	4a e0       	ldi	r20, 0x0A	; 10
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	71 e0       	ldi	r23, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__itoa_ncheck>
	itoa(info->Min>>4,smin1,10);
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	82 95       	swap	r24
 188:	8f 70       	andi	r24, 0x0F	; 15
 18a:	4a e0       	ldi	r20, 0x0A	; 10
 18c:	6e ef       	ldi	r22, 0xFE	; 254
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__itoa_ncheck>
	itoa(info->Second>>4,ssec1,10);
 196:	88 81       	ld	r24, Y
 198:	82 95       	swap	r24
 19a:	8f 70       	andi	r24, 0x0F	; 15
 19c:	4a e0       	ldi	r20, 0x0A	; 10
 19e:	6c ef       	ldi	r22, 0xFC	; 252
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__itoa_ncheck>
	
	itoa((info->Date&0x0f),(char*)sday,10);
 1a8:	8c 81       	ldd	r24, Y+4	; 0x04
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	4a e0       	ldi	r20, 0x0A	; 10
 1ae:	6a ef       	ldi	r22, 0xFA	; 250
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__itoa_ncheck>
	itoa((info->Mon&0x0f),(char*)smon,10);
 1b8:	8d 81       	ldd	r24, Y+5	; 0x05
 1ba:	8f 70       	andi	r24, 0x0F	; 15
 1bc:	4a e0       	ldi	r20, 0x0A	; 10
 1be:	68 ef       	ldi	r22, 0xF8	; 248
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__itoa_ncheck>
	itoa((info->Year&0x0f),(char*)syear,10);
 1c8:	8e 81       	ldd	r24, Y+6	; 0x06
 1ca:	8f 70       	andi	r24, 0x0F	; 15
 1cc:	4a e0       	ldi	r20, 0x0A	; 10
 1ce:	66 ef       	ldi	r22, 0xF6	; 246
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__itoa_ncheck>
	itoa((info->Date>>4),(char*)ssday,10);
 1d8:	8c 81       	ldd	r24, Y+4	; 0x04
 1da:	82 95       	swap	r24
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	4a e0       	ldi	r20, 0x0A	; 10
 1e0:	64 ef       	ldi	r22, 0xF4	; 244
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__itoa_ncheck>
	itoa(info->Mon>>4,(char*)ssmon,10);
 1ea:	8d 81       	ldd	r24, Y+5	; 0x05
 1ec:	82 95       	swap	r24
 1ee:	8f 70       	andi	r24, 0x0F	; 15
 1f0:	4a e0       	ldi	r20, 0x0A	; 10
 1f2:	62 ef       	ldi	r22, 0xF2	; 242
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__itoa_ncheck>
	itoa(info->Year>>4,(char*)ssyear,10);
 1fc:	8e 81       	ldd	r24, Y+6	; 0x06
 1fe:	82 95       	swap	r24
 200:	8f 70       	andi	r24, 0x0F	; 15
 202:	4a e0       	ldi	r20, 0x0A	; 10
 204:	60 ef       	ldi	r22, 0xF0	; 240
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__itoa_ncheck>
	
	strcpy((char*)clk,"ClocK:");
 20e:	87 e0       	ldi	r24, 0x07	; 7
 210:	e0 e6       	ldi	r30, 0x60	; 96
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	d7 01       	movw	r26, r14
 216:	01 90       	ld	r0, Z+
 218:	0d 92       	st	X+, r0
 21a:	8a 95       	dec	r24
 21c:	e1 f7       	brne	.-8      	; 0x216 <DisplayRTC+0xe6>
	strcat((char*)clk,(char*)shour1);
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	71 e0       	ldi	r23, 0x01	; 1
 222:	c7 01       	movw	r24, r14
 224:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
	strcat((char*)clk,(char*)shour);
 228:	66 e0       	ldi	r22, 0x06	; 6
 22a:	71 e0       	ldi	r23, 0x01	; 1
 22c:	c7 01       	movw	r24, r14
 22e:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
	strcat((char*)clk,":");
 232:	f7 01       	movw	r30, r14
 234:	01 90       	ld	r0, Z+
 236:	00 20       	and	r0, r0
 238:	e9 f7       	brne	.-6      	; 0x234 <DisplayRTC+0x104>
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	ca e3       	ldi	r28, 0x3A	; 58
 23e:	d0 e0       	ldi	r29, 0x00	; 0
 240:	d1 83       	std	Z+1, r29	; 0x01
 242:	c0 83       	st	Z, r28
	strcat((char*)clk,(char*)smin1);
 244:	6e ef       	ldi	r22, 0xFE	; 254
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	c7 01       	movw	r24, r14
 24a:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
	strcat((char*)clk,(char*)smin);
 24e:	64 e0       	ldi	r22, 0x04	; 4
 250:	71 e0       	ldi	r23, 0x01	; 1
 252:	c7 01       	movw	r24, r14
 254:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
	strcat((char*)clk,":");
 258:	f7 01       	movw	r30, r14
 25a:	01 90       	ld	r0, Z+
 25c:	00 20       	and	r0, r0
 25e:	e9 f7       	brne	.-6      	; 0x25a <DisplayRTC+0x12a>
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	d1 83       	std	Z+1, r29	; 0x01
 264:	c0 83       	st	Z, r28
	strcat((char*)clk,(char*)ssec1);
 266:	6c ef       	ldi	r22, 0xFC	; 252
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	c7 01       	movw	r24, r14
 26c:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
	strcat((char*)clk,(char*)ssec);	
 270:	62 e0       	ldi	r22, 0x02	; 2
 272:	71 e0       	ldi	r23, 0x01	; 1
 274:	c7 01       	movw	r24, r14
 276:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
	
	strcpy((char*)Date,"Date:");
 27a:	86 e0       	ldi	r24, 0x06	; 6
 27c:	e7 e6       	ldi	r30, 0x67	; 103
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	d8 01       	movw	r26, r16
 282:	01 90       	ld	r0, Z+
 284:	0d 92       	st	X+, r0
 286:	8a 95       	dec	r24
 288:	e1 f7       	brne	.-8      	; 0x282 <DisplayRTC+0x152>
	strcat((char*)Date,(char*)ssday);
 28a:	64 ef       	ldi	r22, 0xF4	; 244
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	c8 01       	movw	r24, r16
 290:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
	strcat((char*)Date,(char*)sday);
 294:	6a ef       	ldi	r22, 0xFA	; 250
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	c8 01       	movw	r24, r16
 29a:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
	strcat((char*)Date,"/");
 29e:	f8 01       	movw	r30, r16
 2a0:	01 90       	ld	r0, Z+
 2a2:	00 20       	and	r0, r0
 2a4:	e9 f7       	brne	.-6      	; 0x2a0 <DisplayRTC+0x170>
 2a6:	31 97       	sbiw	r30, 0x01	; 1
 2a8:	cf e2       	ldi	r28, 0x2F	; 47
 2aa:	d0 e0       	ldi	r29, 0x00	; 0
 2ac:	d1 83       	std	Z+1, r29	; 0x01
 2ae:	c0 83       	st	Z, r28
	strcat((char*)Date,(char*)ssmon);
 2b0:	62 ef       	ldi	r22, 0xF2	; 242
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	c8 01       	movw	r24, r16
 2b6:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
	strcat((char*)Date,(char*)smon);
 2ba:	68 ef       	ldi	r22, 0xF8	; 248
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	c8 01       	movw	r24, r16
 2c0:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
	strcat((char*)Date,"/");
 2c4:	f8 01       	movw	r30, r16
 2c6:	01 90       	ld	r0, Z+
 2c8:	00 20       	and	r0, r0
 2ca:	e9 f7       	brne	.-6      	; 0x2c6 <DisplayRTC+0x196>
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	d1 83       	std	Z+1, r29	; 0x01
 2d0:	c0 83       	st	Z, r28
	strcat((char*)Date,(char*)ssyear);
 2d2:	60 ef       	ldi	r22, 0xF0	; 240
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	c8 01       	movw	r24, r16
 2d8:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
	strcat((char*)Date,(char*)syear);
 2dc:	66 ef       	ldi	r22, 0xF6	; 246
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	c8 01       	movw	r24, r16
 2e2:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>

}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	ff 90       	pop	r15
 2f0:	ef 90       	pop	r14
 2f2:	08 95       	ret

000002f4 <DHTDis>:

void DHTDis(DHT_Info *DHT,uint8 *temp ,uint8 *hum)
{
 2f4:	ef 92       	push	r14
 2f6:	ff 92       	push	r15
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	7c 01       	movw	r14, r24
 302:	8b 01       	movw	r16, r22
 304:	ea 01       	movw	r28, r20
 306:	fc 01       	movw	r30, r24
 308:	83 81       	ldd	r24, Z+3	; 0x03
 30a:	4a e0       	ldi	r20, 0x0A	; 10
 30c:	6c ee       	ldi	r22, 0xEC	; 236
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__itoa_ncheck>
 316:	f7 01       	movw	r30, r14
 318:	85 81       	ldd	r24, Z+5	; 0x05
 31a:	4a e0       	ldi	r20, 0x0A	; 10
 31c:	68 ee       	ldi	r22, 0xE8	; 232
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__itoa_ncheck>
	static uint8 tmp[4],rh[4];
	
	itoa(DHT->IRH,(char*)rh,10);
	itoa(DHT->IT,(char*)tmp,10);
	
	strcpy((char*)temp,"Temperature : ");
 326:	8f e0       	ldi	r24, 0x0F	; 15
 328:	ed e6       	ldi	r30, 0x6D	; 109
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	d8 01       	movw	r26, r16
 32e:	01 90       	ld	r0, Z+
 330:	0d 92       	st	X+, r0
 332:	8a 95       	dec	r24
 334:	e1 f7       	brne	.-8      	; 0x32e <DHTDis+0x3a>
	strcat((char*)temp,(char*)tmp);
 336:	68 ee       	ldi	r22, 0xE8	; 232
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	c8 01       	movw	r24, r16
 33c:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
	strcat((char*)temp," C.");
 340:	f8 01       	movw	r30, r16
 342:	01 90       	ld	r0, Z+
 344:	00 20       	and	r0, r0
 346:	e9 f7       	brne	.-6      	; 0x342 <DHTDis+0x4e>
 348:	31 97       	sbiw	r30, 0x01	; 1
 34a:	80 e2       	ldi	r24, 0x20	; 32
 34c:	93 e4       	ldi	r25, 0x43	; 67
 34e:	91 83       	std	Z+1, r25	; 0x01
 350:	80 83       	st	Z, r24
 352:	8e e2       	ldi	r24, 0x2E	; 46
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	93 83       	std	Z+3, r25	; 0x03
 358:	82 83       	std	Z+2, r24	; 0x02
	
	strcpy((char*)hum,"Humedity : ");
 35a:	8c e0       	ldi	r24, 0x0C	; 12
 35c:	ec e7       	ldi	r30, 0x7C	; 124
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	de 01       	movw	r26, r28
 362:	01 90       	ld	r0, Z+
 364:	0d 92       	st	X+, r0
 366:	8a 95       	dec	r24
 368:	e1 f7       	brne	.-8      	; 0x362 <DHTDis+0x6e>
	strcat((char*)hum,(char*)rh);
 36a:	6c ee       	ldi	r22, 0xEC	; 236
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	ce 01       	movw	r24, r28
 370:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
	strcat((char*)hum," %");
 374:	09 90       	ld	r0, Y+
 376:	00 20       	and	r0, r0
 378:	e9 f7       	brne	.-6      	; 0x374 <DHTDis+0x80>
 37a:	21 97       	sbiw	r28, 0x01	; 1
 37c:	80 e2       	ldi	r24, 0x20	; 32
 37e:	95 e2       	ldi	r25, 0x25	; 37
 380:	99 83       	std	Y+1, r25	; 0x01
 382:	88 83       	st	Y, r24
 384:	1a 82       	std	Y+2, r1	; 0x02
}
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	ff 90       	pop	r15
 390:	ef 90       	pop	r14
 392:	08 95       	ret

00000394 <DisULR>:

void DisULR(UltraSonicInfo *ulrh,UltraSonicInfo *ulrv,uint8 *ulrhw,uint8 *ulrvw)
{
 394:	ef 92       	push	r14
 396:	ff 92       	push	r15
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	7b 01       	movw	r14, r22
 3a2:	8a 01       	movw	r16, r20
 3a4:	e9 01       	movw	r28, r18
 3a6:	4a e0       	ldi	r20, 0x0A	; 10
 3a8:	64 ee       	ldi	r22, 0xE4	; 228
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	fc 01       	movw	r30, r24
 3ae:	85 81       	ldd	r24, Z+5	; 0x05
 3b0:	96 81       	ldd	r25, Z+6	; 0x06
 3b2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__itoa_ncheck>
 3b6:	4a e0       	ldi	r20, 0x0A	; 10
 3b8:	60 ee       	ldi	r22, 0xE0	; 224
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	f7 01       	movw	r30, r14
 3be:	85 81       	ldd	r24, Z+5	; 0x05
 3c0:	96 81       	ldd	r25, Z+6	; 0x06
 3c2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__itoa_ncheck>
	static uint8 horiz[4],vert[4];
	
	itoa(ulrh->Read,(char*)horiz,10);
	itoa(ulrv->Read,(char*)vert,10);
	
	strcpy((char*)ulrhw,"Horizontal Distance : ");
 3c6:	87 e1       	ldi	r24, 0x17	; 23
 3c8:	e8 e8       	ldi	r30, 0x88	; 136
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	d8 01       	movw	r26, r16
 3ce:	01 90       	ld	r0, Z+
 3d0:	0d 92       	st	X+, r0
 3d2:	8a 95       	dec	r24
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <DisULR+0x3a>
	strcat((char*)ulrhw,(char*)horiz);
 3d6:	64 ee       	ldi	r22, 0xE4	; 228
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	c8 01       	movw	r24, r16
 3dc:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
	strcat((char*)ulrhw," cm.");
 3e0:	d8 01       	movw	r26, r16
 3e2:	0d 90       	ld	r0, X+
 3e4:	00 20       	and	r0, r0
 3e6:	e9 f7       	brne	.-6      	; 0x3e2 <DisULR+0x4e>
 3e8:	11 97       	sbiw	r26, 0x01	; 1
 3ea:	85 e0       	ldi	r24, 0x05	; 5
 3ec:	ef e9       	ldi	r30, 0x9F	; 159
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	01 90       	ld	r0, Z+
 3f2:	0d 92       	st	X+, r0
 3f4:	8a 95       	dec	r24
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <DisULR+0x5c>
	
	strcpy((char*)ulrvw,"Vertical Distance : ");
 3f8:	85 e1       	ldi	r24, 0x15	; 21
 3fa:	e4 ea       	ldi	r30, 0xA4	; 164
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	de 01       	movw	r26, r28
 400:	01 90       	ld	r0, Z+
 402:	0d 92       	st	X+, r0
 404:	8a 95       	dec	r24
 406:	e1 f7       	brne	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
	strcat((char*)ulrvw,(char*)vert);
 408:	60 ee       	ldi	r22, 0xE0	; 224
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	ce 01       	movw	r24, r28
 40e:	0e 94 9a 07 	call	0xf34	; 0xf34 <strcat>
	strcat((char*)ulrvw," cm.");
 412:	de 01       	movw	r26, r28
 414:	0d 90       	ld	r0, X+
 416:	00 20       	and	r0, r0
 418:	e9 f7       	brne	.-6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41a:	11 97       	sbiw	r26, 0x01	; 1
 41c:	85 e0       	ldi	r24, 0x05	; 5
 41e:	ef e9       	ldi	r30, 0x9F	; 159
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	01 90       	ld	r0, Z+
 424:	0d 92       	st	X+, r0
 426:	8a 95       	dec	r24
 428:	e1 f7       	brne	.-8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	08 95       	ret

00000438 <MassgeUpdata>:
void MassgeUpdata(void)
{
	static uint8 Date[24],clk[24];
	static uint8 temp[30],HM[30];
	static uint8 HORIZ[30],VERT[30];
	DisplayRTC(&RTC,Date,clk);
 438:	40 e8       	ldi	r20, 0x80	; 128
 43a:	51 e0       	ldi	r21, 0x01	; 1
 43c:	68 e9       	ldi	r22, 0x98	; 152
 43e:	71 e0       	ldi	r23, 0x01	; 1
 440:	81 ec       	ldi	r24, 0xC1	; 193
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	0e 94 98 00 	call	0x130	; 0x130 <DisplayRTC>
	DHTDis(&DHT,temp,HM);
 448:	44 e4       	ldi	r20, 0x44	; 68
 44a:	51 e0       	ldi	r21, 0x01	; 1
 44c:	62 e6       	ldi	r22, 0x62	; 98
 44e:	71 e0       	ldi	r23, 0x01	; 1
 450:	82 eb       	ldi	r24, 0xB2	; 178
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DHTDis>
	DisULR(&UTR_H,&UTR_V,HORIZ,VERT);
 458:	28 e0       	ldi	r18, 0x08	; 8
 45a:	31 e0       	ldi	r19, 0x01	; 1
 45c:	46 e2       	ldi	r20, 0x26	; 38
 45e:	51 e0       	ldi	r21, 0x01	; 1
 460:	68 ec       	ldi	r22, 0xC8	; 200
 462:	71 e0       	ldi	r23, 0x01	; 1
 464:	8a eb       	ldi	r24, 0xBA	; 186
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 ca 01 	call	0x394	; 0x394 <DisULR>
	TransUART((uint8*)"**************************************");
 46c:	89 eb       	ldi	r24, 0xB9	; 185
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 89 00 	call	0x112	; 0x112 <TransUART>
	USART_SendByte(0x0D);
 474:	8d e0       	ldi	r24, 0x0D	; 13
 476:	0e 94 8d 05 	call	0xb1a	; 0xb1a <USART_SendByte>
	TransUART(Date);
 47a:	88 e9       	ldi	r24, 0x98	; 152
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	0e 94 89 00 	call	0x112	; 0x112 <TransUART>
	USART_SendByte(0x0D);
 482:	8d e0       	ldi	r24, 0x0D	; 13
 484:	0e 94 8d 05 	call	0xb1a	; 0xb1a <USART_SendByte>
	TransUART(clk);
 488:	80 e8       	ldi	r24, 0x80	; 128
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 89 00 	call	0x112	; 0x112 <TransUART>
	USART_SendByte(0x0D);
 490:	8d e0       	ldi	r24, 0x0D	; 13
 492:	0e 94 8d 05 	call	0xb1a	; 0xb1a <USART_SendByte>
	TransUART(temp);
 496:	82 e6       	ldi	r24, 0x62	; 98
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	0e 94 89 00 	call	0x112	; 0x112 <TransUART>
	USART_SendByte(0x0D);
 49e:	8d e0       	ldi	r24, 0x0D	; 13
 4a0:	0e 94 8d 05 	call	0xb1a	; 0xb1a <USART_SendByte>
	TransUART(HM);
 4a4:	84 e4       	ldi	r24, 0x44	; 68
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	0e 94 89 00 	call	0x112	; 0x112 <TransUART>
	USART_SendByte(0x0D);
 4ac:	8d e0       	ldi	r24, 0x0D	; 13
 4ae:	0e 94 8d 05 	call	0xb1a	; 0xb1a <USART_SendByte>
	TransUART(HORIZ);
 4b2:	86 e2       	ldi	r24, 0x26	; 38
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	0e 94 89 00 	call	0x112	; 0x112 <TransUART>
	USART_SendByte(0x0D);
 4ba:	8d e0       	ldi	r24, 0x0D	; 13
 4bc:	0e 94 8d 05 	call	0xb1a	; 0xb1a <USART_SendByte>
	TransUART(VERT);
 4c0:	88 e0       	ldi	r24, 0x08	; 8
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	0e 94 89 00 	call	0x112	; 0x112 <TransUART>
	USART_SendByte(0x0D);
 4c8:	8d e0       	ldi	r24, 0x0D	; 13
 4ca:	0e 94 8d 05 	call	0xb1a	; 0xb1a <USART_SendByte>
	TransUART((uint8*)"**************************************");
 4ce:	89 eb       	ldi	r24, 0xB9	; 185
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 89 00 	call	0x112	; 0x112 <TransUART>
	USART_SendByte(0x0D);
 4d6:	8d e0       	ldi	r24, 0x0D	; 13
 4d8:	0e 94 8d 05 	call	0xb1a	; 0xb1a <USART_SendByte>
 4dc:	08 95       	ret

000004de <sysUpdate>:
	RTC_Init(&RTC);
	USART_Init(9600, _8Bit_9Bit, USART_Async, USART_INT_Disable, PARITY_Disable, STOP1);
}
void sysUpdate(void)
{
	DHT_Operate(&DHT);
 4de:	82 eb       	ldi	r24, 0xB2	; 178
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	0e 94 05 03 	call	0x60a	; 0x60a <DHT_Operate>
	RTC_Read(&RTC);
 4e6:	81 ec       	ldi	r24, 0xC1	; 193
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	0e 94 32 03 	call	0x664	; 0x664 <RTC_Read>
	UltrasonicReading(&UTR_H);
 4ee:	8a eb       	ldi	r24, 0xBA	; 186
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <UltrasonicReading>
	UltrasonicReading(&UTR_V);
 4f6:	88 ec       	ldi	r24, 0xC8	; 200
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	0e 94 70 03 	call	0x6e0	; 0x6e0 <UltrasonicReading>
	MassgeUpdata();
 4fe:	0e 94 1c 02 	call	0x438	; 0x438 <MassgeUpdata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 502:	2f ef       	ldi	r18, 0xFF	; 255
 504:	83 ed       	ldi	r24, 0xD3	; 211
 506:	90 e3       	ldi	r25, 0x30	; 48
 508:	21 50       	subi	r18, 0x01	; 1
 50a:	80 40       	sbci	r24, 0x00	; 0
 50c:	90 40       	sbci	r25, 0x00	; 0
 50e:	e1 f7       	brne	.-8      	; 0x508 <sysUpdate+0x2a>
 510:	00 c0       	rjmp	.+0      	; 0x512 <sysUpdate+0x34>
 512:	00 00       	nop
 514:	08 95       	ret

00000516 <main>:



int main(void)
{
    sysInit();
 516:	0e 94 49 00 	call	0x92	; 0x92 <sysInit>
    while (1) 
    {
		sysUpdate();
 51a:	0e 94 6f 02 	call	0x4de	; 0x4de <sysUpdate>
 51e:	fd cf       	rjmp	.-6      	; 0x51a <main+0x4>

00000520 <DHT_Start>:
 *  Author: SHAHER
 */ 
#include "DHT11.h"

void DHT_Start(DHT_Info *info)
{
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	ec 01       	movw	r28, r24
	PinDirection(info->DHT,OUTPUT,info->DHT_Pin);
 526:	4a 81       	ldd	r20, Y+2	; 0x02
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	88 81       	ld	r24, Y
 52c:	99 81       	ldd	r25, Y+1	; 0x01
 52e:	0e 94 25 04 	call	0x84a	; 0x84a <PinDirection>
	PinWrite	(info->DHT,info->DHT_Pin,LOW);       //sending start
 532:	40 e0       	ldi	r20, 0x00	; 0
 534:	6a 81       	ldd	r22, Y+2	; 0x02
 536:	88 81       	ld	r24, Y
 538:	99 81       	ldd	r25, Y+1	; 0x01
 53a:	0e 94 57 04 	call	0x8ae	; 0x8ae <PinWrite>
 53e:	2f ef       	ldi	r18, 0xFF	; 255
 540:	80 ee       	ldi	r24, 0xE0	; 224
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	21 50       	subi	r18, 0x01	; 1
 546:	80 40       	sbci	r24, 0x00	; 0
 548:	90 40       	sbci	r25, 0x00	; 0
 54a:	e1 f7       	brne	.-8      	; 0x544 <DHT_Start+0x24>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <DHT_Start+0x2e>
 54e:	00 00       	nop
	_delay_ms(18);
}
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <DHT_Response>:
void DHT_Response(DHT_Info *info)
{
 556:	1f 93       	push	r17
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
	vuint8 *pin = &(info->DHT->pin);
 55c:	fc 01       	movw	r30, r24
 55e:	c0 81       	ld	r28, Z
 560:	d1 81       	ldd	r29, Z+1	; 0x01
	uint8 pinNum = info->DHT_Pin; 
 562:	12 81       	ldd	r17, Z+2	; 0x02
	PinDirection(info->DHT, INPUTPULLUP,info->DHT_Pin);
 564:	41 2f       	mov	r20, r17
 566:	62 e0       	ldi	r22, 0x02	; 2
 568:	ce 01       	movw	r24, r28
 56a:	0e 94 25 04 	call	0x84a	; 0x84a <PinDirection>
 56e:	21 e0       	ldi	r18, 0x01	; 1
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	02 c0       	rjmp	.+4      	; 0x578 <DHT_Response+0x22>
 574:	22 0f       	add	r18, r18
 576:	33 1f       	adc	r19, r19
 578:	1a 95       	dec	r17
 57a:	e2 f7       	brpl	.-8      	; 0x574 <DHT_Response+0x1e>
	while (((*(vuint8*)pin)&(1<<pinNum))!=0x00);		//waiting for response
 57c:	88 81       	ld	r24, Y
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	82 23       	and	r24, r18
 582:	93 23       	and	r25, r19
 584:	89 2b       	or	r24, r25
 586:	d1 f7       	brne	.-12     	; 0x57c <DHT_Response+0x26>
	while (((*(vuint8*)pin)&(1<<pinNum))==0x00);		//preparing data
 588:	88 81       	ld	r24, Y
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	82 23       	and	r24, r18
 58e:	93 23       	and	r25, r19
 590:	89 2b       	or	r24, r25
 592:	d1 f3       	breq	.-12     	; 0x588 <DHT_Response+0x32>
	while (((*(vuint8*)pin)&(1<<pinNum))!=0x00);		//DHT pull up the bus for 80us
 594:	88 81       	ld	r24, Y
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	82 23       	and	r24, r18
 59a:	93 23       	and	r25, r19
 59c:	89 2b       	or	r24, r25
 59e:	d1 f7       	brne	.-12     	; 0x594 <DHT_Response+0x3e>
}
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	1f 91       	pop	r17
 5a6:	08 95       	ret

000005a8 <DHT_Data>:
uint8 DHT_Data(DHT_Info *info)
{
	uint8 Data=0,i=0;
	uint16 timeout;
	vuint8 *pin = &(info->DHT->pin);
 5a8:	dc 01       	movw	r26, r24
 5aa:	ed 91       	ld	r30, X+
 5ac:	fc 91       	ld	r31, X
 5ae:	11 97       	sbiw	r26, 0x01	; 1
 5b0:	61 e0       	ldi	r22, 0x01	; 1
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	12 96       	adiw	r26, 0x02	; 2
 5b6:	0c 90       	ld	r0, X
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <DHT_Data+0x16>
 5ba:	66 0f       	add	r22, r22
 5bc:	77 1f       	adc	r23, r23
 5be:	0a 94       	dec	r0
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <DHT_Data+0x12>
	uint8 pinNum = info->DHT_Pin;
	for (i=0;i<8;i++)
	{
		timeout = 0xFFFF;
		while (((*(vuint8*)pin)&(1<<pinNum))==0);
 5c2:	98 e0       	ldi	r25, 0x08	; 8
	while (((*(vuint8*)pin)&(1<<pinNum))==0x00);		//preparing data
	while (((*(vuint8*)pin)&(1<<pinNum))!=0x00);		//DHT pull up the bus for 80us
}
uint8 DHT_Data(DHT_Info *info)
{
	uint8 Data=0,i=0;
 5c4:	80 e0       	ldi	r24, 0x00	; 0
	vuint8 *pin = &(info->DHT->pin);
	uint8 pinNum = info->DHT_Pin;
	for (i=0;i<8;i++)
	{
		timeout = 0xFFFF;
		while (((*(vuint8*)pin)&(1<<pinNum))==0);
 5c6:	20 81       	ld	r18, Z
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	26 23       	and	r18, r22
 5cc:	37 23       	and	r19, r23
 5ce:	23 2b       	or	r18, r19
 5d0:	d1 f3       	breq	.-12     	; 0x5c6 <DHT_Data+0x1e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d2:	ba eb       	ldi	r27, 0xBA	; 186
 5d4:	ba 95       	dec	r27
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <DHT_Data+0x2c>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <DHT_Data+0x32>
		_delay_us(35);
		if (((*(vuint8*)pin)&(1<<pinNum)))
 5da:	20 81       	ld	r18, Z
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	26 23       	and	r18, r22
 5e0:	37 23       	and	r19, r23
 5e2:	23 2b       	or	r18, r19
 5e4:	19 f0       	breq	.+6      	; 0x5ec <DHT_Data+0x44>
		{
			Data = (Data<<1)|(0x01);
 5e6:	88 0f       	add	r24, r24
 5e8:	81 60       	ori	r24, 0x01	; 1
 5ea:	01 c0       	rjmp	.+2      	; 0x5ee <DHT_Data+0x46>
		}
		else
		{
			Data = (Data<<1);
 5ec:	88 0f       	add	r24, r24
	while (((*(vuint8*)pin)&(1<<pinNum))==0x00);		//preparing data
	while (((*(vuint8*)pin)&(1<<pinNum))!=0x00);		//DHT pull up the bus for 80us
}
uint8 DHT_Data(DHT_Info *info)
{
	uint8 Data=0,i=0;
 5ee:	4f ef       	ldi	r20, 0xFF	; 255
 5f0:	5f ef       	ldi	r21, 0xFF	; 255
		}
		else
		{
			Data = (Data<<1);
		}
		while ((((*(vuint8*)pin)&(1<<pinNum))!=0x00)&&(--timeout!=0));
 5f2:	20 81       	ld	r18, Z
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	26 23       	and	r18, r22
 5f8:	37 23       	and	r19, r23
 5fa:	23 2b       	or	r18, r19
 5fc:	19 f0       	breq	.+6      	; 0x604 <DHT_Data+0x5c>
 5fe:	41 50       	subi	r20, 0x01	; 1
 600:	51 09       	sbc	r21, r1
 602:	b9 f7       	brne	.-18     	; 0x5f2 <DHT_Data+0x4a>
 604:	91 50       	subi	r25, 0x01	; 1
{
	uint8 Data=0,i=0;
	uint16 timeout;
	vuint8 *pin = &(info->DHT->pin);
	uint8 pinNum = info->DHT_Pin;
	for (i=0;i<8;i++)
 606:	f9 f6       	brne	.-66     	; 0x5c6 <DHT_Data+0x1e>
			Data = (Data<<1);
		}
		while ((((*(vuint8*)pin)&(1<<pinNum))!=0x00)&&(--timeout!=0));
	}
	return Data;
}
 608:	08 95       	ret

0000060a <DHT_Operate>:
void DHT_Operate(DHT_Info *info)
{
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	ec 01       	movw	r28, r24
	DHT_Start(info);
 610:	0e 94 90 02 	call	0x520	; 0x520 <DHT_Start>
	DHT_Response(info);
 614:	ce 01       	movw	r24, r28
 616:	0e 94 ab 02 	call	0x556	; 0x556 <DHT_Response>
	info->IRH = DHT_Data(info);
 61a:	ce 01       	movw	r24, r28
 61c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <DHT_Data>
 620:	8b 83       	std	Y+3, r24	; 0x03
	info->DRH = DHT_Data(info);
 622:	ce 01       	movw	r24, r28
 624:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <DHT_Data>
 628:	8c 83       	std	Y+4, r24	; 0x04
	info->IT = DHT_Data(info);
 62a:	ce 01       	movw	r24, r28
 62c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <DHT_Data>
 630:	8d 83       	std	Y+5, r24	; 0x05
	info->DT = DHT_Data(info);
 632:	ce 01       	movw	r24, r28
 634:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <DHT_Data>
 638:	8e 83       	std	Y+6, r24	; 0x06
	info->Sum = DHT_Data(info);
 63a:	ce 01       	movw	r24, r28
 63c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <DHT_Data>
 640:	8f 83       	std	Y+7, r24	; 0x07
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	08 95       	ret

00000648 <RTC_Init>:

#include "RTC.h"

void RTC_Init(RTC_Info *Info)
{
	I2C_Start();
 648:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <I2C_Start>
	I2C_Write_byte(RTC_Address_Write);
 64c:	80 ed       	ldi	r24, 0xD0	; 208
 64e:	0e 94 22 05 	call	0xa44	; 0xa44 <I2C_Write_byte>
	I2C_Write_byte(Control_Address);
 652:	87 e0       	ldi	r24, 0x07	; 7
 654:	0e 94 22 05 	call	0xa44	; 0xa44 <I2C_Write_byte>
	I2C_Write_byte(0X10);
 658:	80 e1       	ldi	r24, 0x10	; 16
 65a:	0e 94 22 05 	call	0xa44	; 0xa44 <I2C_Write_byte>
	I2C_Stop();
 65e:	0e 94 05 05 	call	0xa0a	; 0xa0a <I2C_Stop>
 662:	08 95       	ret

00000664 <RTC_Read>:
	
}
void RTC_Read(RTC_Info *Info)
{
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
 668:	ec 01       	movw	r28, r24
	I2C_Start();
 66a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <I2C_Start>
	I2C_Write_byte(RTC_Address_Write);
 66e:	80 ed       	ldi	r24, 0xD0	; 208
 670:	0e 94 22 05 	call	0xa44	; 0xa44 <I2C_Write_byte>
	I2C_Write_byte(SEC_Address);
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	0e 94 22 05 	call	0xa44	; 0xa44 <I2C_Write_byte>
	I2C_Stop();
 67a:	0e 94 05 05 	call	0xa0a	; 0xa0a <I2C_Stop>
	I2C_Start();
 67e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <I2C_Start>
	I2C_Write_byte(RTC_Address_Read);
 682:	81 ed       	ldi	r24, 0xD1	; 209
 684:	0e 94 22 05 	call	0xa44	; 0xa44 <I2C_Write_byte>
	Info->Second=I2C_Read_Ack();
 688:	0e 94 0c 05 	call	0xa18	; 0xa18 <I2C_Read_Ack>
 68c:	88 83       	st	Y, r24
	Info->Min   =I2C_Read_Ack();
 68e:	0e 94 0c 05 	call	0xa18	; 0xa18 <I2C_Read_Ack>
 692:	89 83       	std	Y+1, r24	; 0x01
	Info->Hour  =I2C_Read_Ack();
 694:	0e 94 0c 05 	call	0xa18	; 0xa18 <I2C_Read_Ack>
 698:	8a 83       	std	Y+2, r24	; 0x02
	Info->Day   =I2C_Read_Ack();
 69a:	0e 94 0c 05 	call	0xa18	; 0xa18 <I2C_Read_Ack>
 69e:	8b 83       	std	Y+3, r24	; 0x03
	Info->Date  =I2C_Read_Ack();
 6a0:	0e 94 0c 05 	call	0xa18	; 0xa18 <I2C_Read_Ack>
 6a4:	8c 83       	std	Y+4, r24	; 0x04
	Info->Mon   =I2C_Read_Ack();
 6a6:	0e 94 0c 05 	call	0xa18	; 0xa18 <I2C_Read_Ack>
 6aa:	8d 83       	std	Y+5, r24	; 0x05
	Info->Year  =I2C_Read_NAck();
 6ac:	0e 94 17 05 	call	0xa2e	; 0xa2e <I2C_Read_NAck>
 6b0:	8e 83       	std	Y+6, r24	; 0x06
	I2C_Stop();
 6b2:	0e 94 05 05 	call	0xa0a	; 0xa0a <I2C_Stop>
	  
}
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	08 95       	ret

000006bc <UltraSonicInit>:
vuint8 rising_edge=0;
vuint32 timer_counter=0;
vuint16 distance;

void UltraSonicInit(UltraSonicInfo *info)
{
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
 6c0:	ec 01       	movw	r28, r24
	PinDirection(info->Uport,OUTPUT,info->Trig);
 6c2:	4a 81       	ldd	r20, Y+2	; 0x02
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	88 81       	ld	r24, Y
 6c8:	99 81       	ldd	r25, Y+1	; 0x01
 6ca:	0e 94 25 04 	call	0x84a	; 0x84a <PinDirection>
	EX_INT_Enable(info->Echo,info->INTmODE);
 6ce:	6c 81       	ldd	r22, Y+4	; 0x04
 6d0:	8b 81       	ldd	r24, Y+3	; 0x03
 6d2:	0e 94 03 04 	call	0x806	; 0x806 <EX_INT_Enable>
	info->Read = 0;
 6d6:	1e 82       	std	Y+6, r1	; 0x06
 6d8:	1d 82       	std	Y+5, r1	; 0x05
}
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	08 95       	ret

000006e0 <UltrasonicReading>:
void UltrasonicReading(UltraSonicInfo *info)
{	
 6e0:	cf 93       	push	r28
 6e2:	df 93       	push	r29
 6e4:	ec 01       	movw	r28, r24
	Timer1_Init(T1_Normal, T1_Noraml_NO_OC1A, T1_Noraml_NO_OC1B, T1_FCPU8);
 6e6:	22 e0       	ldi	r18, 0x02	; 2
 6e8:	40 e0       	ldi	r20, 0x00	; 0
 6ea:	50 e0       	ldi	r21, 0x00	; 0
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <Timer1_Init>
	INT_Enable();
 6f8:	8f b7       	in	r24, 0x3f	; 63
 6fa:	80 68       	ori	r24, 0x80	; 128
 6fc:	8f bf       	out	0x3f, r24	; 63
	PinWrite(info->Uport,info->Trig,HIGH);
 6fe:	41 e0       	ldi	r20, 0x01	; 1
 700:	6a 81       	ldd	r22, Y+2	; 0x02
 702:	88 81       	ld	r24, Y
 704:	99 81       	ldd	r25, Y+1	; 0x01
 706:	0e 94 57 04 	call	0x8ae	; 0x8ae <PinWrite>
 70a:	85 e3       	ldi	r24, 0x35	; 53
 70c:	8a 95       	dec	r24
 70e:	f1 f7       	brne	.-4      	; 0x70c <UltrasonicReading+0x2c>
 710:	00 00       	nop
	_delay_us(10);
	PinWrite(info->Uport,info->Trig,LOW);
 712:	40 e0       	ldi	r20, 0x00	; 0
 714:	6a 81       	ldd	r22, Y+2	; 0x02
 716:	88 81       	ld	r24, Y
 718:	99 81       	ldd	r25, Y+1	; 0x01
 71a:	0e 94 57 04 	call	0x8ae	; 0x8ae <PinWrite>
	sensor_working=0;
 71e:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <sensor_working>
	rising_edge=0;
 722:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <rising_edge>
	while(!sensor_working);
 726:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <sensor_working>
 72a:	88 23       	and	r24, r24
 72c:	e1 f3       	breq	.-8      	; 0x726 <UltrasonicReading+0x46>
	INT_Disable();
 72e:	8f b7       	in	r24, 0x3f	; 63
 730:	8f 77       	andi	r24, 0x7F	; 127
 732:	8f bf       	out	0x3f, r24	; 63
	Timer1_Init(T1_Normal, T1_Noraml_NO_OC1A, T1_Noraml_NO_OC1B, T1_OFF);
 734:	20 e0       	ldi	r18, 0x00	; 0
 736:	40 e0       	ldi	r20, 0x00	; 0
 738:	50 e0       	ldi	r21, 0x00	; 0
 73a:	60 e0       	ldi	r22, 0x00	; 0
 73c:	70 e0       	ldi	r23, 0x00	; 0
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	0e 94 2d 05 	call	0xa5a	; 0xa5a <Timer1_Init>
	info->Read = (uint8)((float)distance/116);
 746:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <distance>
 74a:	70 91 d0 01 	lds	r23, 0x01D0	; 0x8001d0 <distance+0x1>
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__floatunsisf>
 756:	20 e0       	ldi	r18, 0x00	; 0
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	48 ee       	ldi	r20, 0xE8	; 232
 75c:	52 e4       	ldi	r21, 0x42	; 66
 75e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__divsf3>
 762:	0e 94 70 06 	call	0xce0	; 0xce0 <__fixunssfsi>
 766:	70 e0       	ldi	r23, 0x00	; 0
 768:	7e 83       	std	Y+6, r23	; 0x06
 76a:	6d 83       	std	Y+5, r22	; 0x05
}
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	08 95       	ret

00000772 <__vector_1>:

ISR(INT0_vect)
{
 772:	1f 92       	push	r1
 774:	0f 92       	push	r0
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	0f 92       	push	r0
 77a:	11 24       	eor	r1, r1
 77c:	8f 93       	push	r24
 77e:	9f 93       	push	r25
	if (rising_edge==0)
 780:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <rising_edge>
 784:	81 11       	cpse	r24, r1
 786:	06 c0       	rjmp	.+12     	; 0x794 <__vector_1+0x22>
	{
		TCNT1 = 0;
 788:	1d bc       	out	0x2d, r1	; 45
 78a:	1c bc       	out	0x2c, r1	; 44
		rising_edge=1;
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <rising_edge>
 792:	0d c0       	rjmp	.+26     	; 0x7ae <__vector_1+0x3c>
	}
	else if (rising_edge==1)
 794:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <rising_edge>
 798:	81 30       	cpi	r24, 0x01	; 1
 79a:	49 f4       	brne	.+18     	; 0x7ae <__vector_1+0x3c>
	{
		distance = TCNT1;
 79c:	8c b5       	in	r24, 0x2c	; 44
 79e:	9d b5       	in	r25, 0x2d	; 45
 7a0:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <distance+0x1>
 7a4:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <distance>
		sensor_working = 1;
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <sensor_working>
	}
}
 7ae:	9f 91       	pop	r25
 7b0:	8f 91       	pop	r24
 7b2:	0f 90       	pop	r0
 7b4:	0f be       	out	0x3f, r0	; 63
 7b6:	0f 90       	pop	r0
 7b8:	1f 90       	pop	r1
 7ba:	18 95       	reti

000007bc <__vector_2>:

ISR(INT1_vect)
{
 7bc:	1f 92       	push	r1
 7be:	0f 92       	push	r0
 7c0:	0f b6       	in	r0, 0x3f	; 63
 7c2:	0f 92       	push	r0
 7c4:	11 24       	eor	r1, r1
 7c6:	8f 93       	push	r24
 7c8:	9f 93       	push	r25
	if (rising_edge==0)
 7ca:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <rising_edge>
 7ce:	81 11       	cpse	r24, r1
 7d0:	06 c0       	rjmp	.+12     	; 0x7de <__vector_2+0x22>
	{
		TCNT1 = 0;
 7d2:	1d bc       	out	0x2d, r1	; 45
 7d4:	1c bc       	out	0x2c, r1	; 44
		rising_edge=1;
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <rising_edge>
 7dc:	0d c0       	rjmp	.+26     	; 0x7f8 <__vector_2+0x3c>
	}
	else if (rising_edge==1)
 7de:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <rising_edge>
 7e2:	81 30       	cpi	r24, 0x01	; 1
 7e4:	49 f4       	brne	.+18     	; 0x7f8 <__vector_2+0x3c>
	{
		distance = TCNT1;
 7e6:	8c b5       	in	r24, 0x2c	; 44
 7e8:	9d b5       	in	r25, 0x2d	; 45
 7ea:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <distance+0x1>
 7ee:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <distance>
		sensor_working = 1;
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <sensor_working>
	}
}
 7f8:	9f 91       	pop	r25
 7fa:	8f 91       	pop	r24
 7fc:	0f 90       	pop	r0
 7fe:	0f be       	out	0x3f, r0	; 63
 800:	0f 90       	pop	r0
 802:	1f 90       	pop	r1
 804:	18 95       	reti

00000806 <EX_INT_Enable>:
 806:	9f b7       	in	r25, 0x3f	; 63
 808:	9f 77       	andi	r25, 0x7F	; 127
 80a:	9f bf       	out	0x3f, r25	; 63
 80c:	80 34       	cpi	r24, 0x40	; 64
 80e:	29 f0       	breq	.+10     	; 0x81a <EX_INT_Enable+0x14>
 810:	80 38       	cpi	r24, 0x80	; 128
 812:	51 f0       	breq	.+20     	; 0x828 <EX_INT_Enable+0x22>
 814:	80 32       	cpi	r24, 0x20	; 32
 816:	c1 f4       	brne	.+48     	; 0x848 <EX_INT_Enable+0x42>
 818:	0e c0       	rjmp	.+28     	; 0x836 <EX_INT_Enable+0x30>
 81a:	85 b7       	in	r24, 0x35	; 53
 81c:	68 2b       	or	r22, r24
 81e:	65 bf       	out	0x35, r22	; 53
 820:	8b b7       	in	r24, 0x3b	; 59
 822:	80 64       	ori	r24, 0x40	; 64
 824:	8b bf       	out	0x3b, r24	; 59
 826:	0d c0       	rjmp	.+26     	; 0x842 <EX_INT_Enable+0x3c>
 828:	85 b7       	in	r24, 0x35	; 53
 82a:	68 2b       	or	r22, r24
 82c:	65 bf       	out	0x35, r22	; 53
 82e:	8b b7       	in	r24, 0x3b	; 59
 830:	80 68       	ori	r24, 0x80	; 128
 832:	8b bf       	out	0x3b, r24	; 59
 834:	06 c0       	rjmp	.+12     	; 0x842 <EX_INT_Enable+0x3c>
 836:	84 b7       	in	r24, 0x34	; 52
 838:	68 2b       	or	r22, r24
 83a:	64 bf       	out	0x34, r22	; 52
 83c:	8b b7       	in	r24, 0x3b	; 59
 83e:	80 62       	ori	r24, 0x20	; 32
 840:	8b bf       	out	0x3b, r24	; 59
 842:	8f b7       	in	r24, 0x3f	; 63
 844:	80 68       	ori	r24, 0x80	; 128
 846:	8f bf       	out	0x3f, r24	; 63
 848:	08 95       	ret

0000084a <PinDirection>:
 84a:	fc 01       	movw	r30, r24
 84c:	61 30       	cpi	r22, 0x01	; 1
 84e:	79 f0       	breq	.+30     	; 0x86e <__stack+0xf>
 850:	18 f0       	brcs	.+6      	; 0x858 <PinDirection+0xe>
 852:	62 30       	cpi	r22, 0x02	; 2
 854:	e1 f0       	breq	.+56     	; 0x88e <__stack+0x2f>
 856:	08 95       	ret
 858:	21 81       	ldd	r18, Z+1	; 0x01
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
 860:	88 0f       	add	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	4a 95       	dec	r20
 866:	e2 f7       	brpl	.-8      	; 0x860 <__stack+0x1>
 868:	82 2b       	or	r24, r18
 86a:	81 83       	std	Z+1, r24	; 0x01
 86c:	08 95       	ret
 86e:	21 81       	ldd	r18, Z+1	; 0x01
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	02 c0       	rjmp	.+4      	; 0x87a <__stack+0x1b>
 876:	88 0f       	add	r24, r24
 878:	99 1f       	adc	r25, r25
 87a:	4a 95       	dec	r20
 87c:	e2 f7       	brpl	.-8      	; 0x876 <__stack+0x17>
 87e:	80 95       	com	r24
 880:	92 2f       	mov	r25, r18
 882:	98 23       	and	r25, r24
 884:	91 83       	std	Z+1, r25	; 0x01
 886:	92 81       	ldd	r25, Z+2	; 0x02
 888:	89 23       	and	r24, r25
 88a:	82 83       	std	Z+2, r24	; 0x02
 88c:	08 95       	ret
 88e:	21 81       	ldd	r18, Z+1	; 0x01
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	02 c0       	rjmp	.+4      	; 0x89a <__stack+0x3b>
 896:	88 0f       	add	r24, r24
 898:	99 1f       	adc	r25, r25
 89a:	4a 95       	dec	r20
 89c:	e2 f7       	brpl	.-8      	; 0x896 <__stack+0x37>
 89e:	98 2f       	mov	r25, r24
 8a0:	90 95       	com	r25
 8a2:	92 23       	and	r25, r18
 8a4:	91 83       	std	Z+1, r25	; 0x01
 8a6:	92 81       	ldd	r25, Z+2	; 0x02
 8a8:	89 2b       	or	r24, r25
 8aa:	82 83       	std	Z+2, r24	; 0x02
 8ac:	08 95       	ret

000008ae <PinWrite>:
 8ae:	44 23       	and	r20, r20
 8b0:	19 f0       	breq	.+6      	; 0x8b8 <PinWrite+0xa>
 8b2:	41 30       	cpi	r20, 0x01	; 1
 8b4:	71 f0       	breq	.+28     	; 0x8d2 <PinWrite+0x24>
 8b6:	08 95       	ret
 8b8:	fc 01       	movw	r30, r24
 8ba:	42 81       	ldd	r20, Z+2	; 0x02
 8bc:	21 e0       	ldi	r18, 0x01	; 1
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <PinWrite+0x18>
 8c2:	22 0f       	add	r18, r18
 8c4:	33 1f       	adc	r19, r19
 8c6:	6a 95       	dec	r22
 8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <PinWrite+0x14>
 8ca:	20 95       	com	r18
 8cc:	24 23       	and	r18, r20
 8ce:	22 83       	std	Z+2, r18	; 0x02
 8d0:	08 95       	ret
 8d2:	fc 01       	movw	r30, r24
 8d4:	42 81       	ldd	r20, Z+2	; 0x02
 8d6:	21 e0       	ldi	r18, 0x01	; 1
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <PinWrite+0x32>
 8dc:	22 0f       	add	r18, r18
 8de:	33 1f       	adc	r19, r19
 8e0:	6a 95       	dec	r22
 8e2:	e2 f7       	brpl	.-8      	; 0x8dc <PinWrite+0x2e>
 8e4:	24 2b       	or	r18, r20
 8e6:	22 83       	std	Z+2, r18	; 0x02
 8e8:	08 95       	ret

000008ea <I2C_Init>:
 *  Author: shaher
 */ 
#include "I2C.h"

void I2C_Init( uint8 Address , uint32 F_SCL,INT_Config INT , Prescalar_Bits Bits)
{
 8ea:	0f 93       	push	r16
 8ec:	cf 93       	push	r28
 8ee:	df 93       	push	r29
 8f0:	d8 2f       	mov	r29, r24
 8f2:	c2 2f       	mov	r28, r18
	/*SCL_Freq=(F_CPU)/(16+(2*TWBR*(4^Presscalar_Bits)))*/
	switch(Bits)
 8f4:	01 30       	cpi	r16, 0x01	; 1
 8f6:	09 f1       	breq	.+66     	; 0x93a <I2C_Init+0x50>
 8f8:	30 f0       	brcs	.+12     	; 0x906 <I2C_Init+0x1c>
 8fa:	02 30       	cpi	r16, 0x02	; 2
 8fc:	d1 f1       	breq	.+116    	; 0x972 <I2C_Init+0x88>
 8fe:	03 30       	cpi	r16, 0x03	; 3
 900:	09 f4       	brne	.+2      	; 0x904 <I2C_Init+0x1a>
 902:	53 c0       	rjmp	.+166    	; 0x9aa <I2C_Init+0xc0>
 904:	74 c0       	rjmp	.+232    	; 0x9ee <I2C_Init+0x104>
	{
		case I2C_pre1:
		TWBR=(uint8)(((double)F_CPU/(2.0*F_SCL))-8.0);
 906:	cb 01       	movw	r24, r22
 908:	ba 01       	movw	r22, r20
 90a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__floatunsisf>
 90e:	9b 01       	movw	r18, r22
 910:	ac 01       	movw	r20, r24
 912:	0e 94 92 05 	call	0xb24	; 0xb24 <__addsf3>
 916:	9b 01       	movw	r18, r22
 918:	ac 01       	movw	r20, r24
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	74 e2       	ldi	r23, 0x24	; 36
 91e:	84 e7       	ldi	r24, 0x74	; 116
 920:	9b e4       	ldi	r25, 0x4B	; 75
 922:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__divsf3>
 926:	20 e0       	ldi	r18, 0x00	; 0
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	40 e0       	ldi	r20, 0x00	; 0
 92c:	51 e4       	ldi	r21, 0x41	; 65
 92e:	0e 94 91 05 	call	0xb22	; 0xb22 <__subsf3>
 932:	0e 94 70 06 	call	0xce0	; 0xce0 <__fixunssfsi>
 936:	60 b9       	out	0x00, r22	; 0
		break;
 938:	53 c0       	rjmp	.+166    	; 0x9e0 <I2C_Init+0xf6>
		case I2C_pre4:
		TWBR=(uint8)(((double)F_CPU/(8.0*F_SCL))-2.0);
 93a:	cb 01       	movw	r24, r22
 93c:	ba 01       	movw	r22, r20
 93e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__floatunsisf>
 942:	20 e0       	ldi	r18, 0x00	; 0
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	40 e0       	ldi	r20, 0x00	; 0
 948:	51 e4       	ldi	r21, 0x41	; 65
 94a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__mulsf3>
 94e:	9b 01       	movw	r18, r22
 950:	ac 01       	movw	r20, r24
 952:	60 e0       	ldi	r22, 0x00	; 0
 954:	74 e2       	ldi	r23, 0x24	; 36
 956:	84 e7       	ldi	r24, 0x74	; 116
 958:	9b e4       	ldi	r25, 0x4B	; 75
 95a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__divsf3>
 95e:	20 e0       	ldi	r18, 0x00	; 0
 960:	30 e0       	ldi	r19, 0x00	; 0
 962:	40 e0       	ldi	r20, 0x00	; 0
 964:	50 e4       	ldi	r21, 0x40	; 64
 966:	0e 94 91 05 	call	0xb22	; 0xb22 <__subsf3>
 96a:	0e 94 70 06 	call	0xce0	; 0xce0 <__fixunssfsi>
 96e:	60 b9       	out	0x00, r22	; 0
		break;
 970:	37 c0       	rjmp	.+110    	; 0x9e0 <I2C_Init+0xf6>
		case I2C_pre16:
		TWBR=(uint8)(((double)F_CPU/(32.0*F_SCL))-0.5);
 972:	cb 01       	movw	r24, r22
 974:	ba 01       	movw	r22, r20
 976:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__floatunsisf>
 97a:	20 e0       	ldi	r18, 0x00	; 0
 97c:	30 e0       	ldi	r19, 0x00	; 0
 97e:	40 e0       	ldi	r20, 0x00	; 0
 980:	52 e4       	ldi	r21, 0x42	; 66
 982:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__mulsf3>
 986:	9b 01       	movw	r18, r22
 988:	ac 01       	movw	r20, r24
 98a:	60 e0       	ldi	r22, 0x00	; 0
 98c:	74 e2       	ldi	r23, 0x24	; 36
 98e:	84 e7       	ldi	r24, 0x74	; 116
 990:	9b e4       	ldi	r25, 0x4B	; 75
 992:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__divsf3>
 996:	20 e0       	ldi	r18, 0x00	; 0
 998:	30 e0       	ldi	r19, 0x00	; 0
 99a:	40 e0       	ldi	r20, 0x00	; 0
 99c:	5f e3       	ldi	r21, 0x3F	; 63
 99e:	0e 94 91 05 	call	0xb22	; 0xb22 <__subsf3>
 9a2:	0e 94 70 06 	call	0xce0	; 0xce0 <__fixunssfsi>
 9a6:	60 b9       	out	0x00, r22	; 0
		break;
 9a8:	1b c0       	rjmp	.+54     	; 0x9e0 <I2C_Init+0xf6>
		case I2C_pre64:
		TWBR=(uint8)(((double)F_CPU/(128.0*F_SCL))-0.125);
 9aa:	cb 01       	movw	r24, r22
 9ac:	ba 01       	movw	r22, r20
 9ae:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__floatunsisf>
 9b2:	20 e0       	ldi	r18, 0x00	; 0
 9b4:	30 e0       	ldi	r19, 0x00	; 0
 9b6:	40 e0       	ldi	r20, 0x00	; 0
 9b8:	53 e4       	ldi	r21, 0x43	; 67
 9ba:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__mulsf3>
 9be:	9b 01       	movw	r18, r22
 9c0:	ac 01       	movw	r20, r24
 9c2:	60 e0       	ldi	r22, 0x00	; 0
 9c4:	74 e2       	ldi	r23, 0x24	; 36
 9c6:	84 e7       	ldi	r24, 0x74	; 116
 9c8:	9b e4       	ldi	r25, 0x4B	; 75
 9ca:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__divsf3>
 9ce:	20 e0       	ldi	r18, 0x00	; 0
 9d0:	30 e0       	ldi	r19, 0x00	; 0
 9d2:	40 e0       	ldi	r20, 0x00	; 0
 9d4:	5e e3       	ldi	r21, 0x3E	; 62
 9d6:	0e 94 91 05 	call	0xb22	; 0xb22 <__subsf3>
 9da:	0e 94 70 06 	call	0xce0	; 0xce0 <__fixunssfsi>
 9de:	60 b9       	out	0x00, r22	; 0
		break;
		default:
		return;
	}
	TWAR =(Address<<1)|(General_Call<<TWGCE);
 9e0:	dd 0f       	add	r29, r29
 9e2:	d2 b9       	out	0x02, r29	; 2
	TWSR|=(Bits);
 9e4:	81 b1       	in	r24, 0x01	; 1
 9e6:	08 2b       	or	r16, r24
 9e8:	01 b9       	out	0x01, r16	; 1
	TWCR =(1<<TWEN)|(INT<<TWIE);
 9ea:	c4 60       	ori	r28, 0x04	; 4
 9ec:	c6 bf       	out	0x36, r28	; 54
}
 9ee:	df 91       	pop	r29
 9f0:	cf 91       	pop	r28
 9f2:	0f 91       	pop	r16
 9f4:	08 95       	ret

000009f6 <I2C_Start>:
void I2C_Start(void)
{
	TWCR&=0x07;
 9f6:	86 b7       	in	r24, 0x36	; 54
 9f8:	87 70       	andi	r24, 0x07	; 7
 9fa:	86 bf       	out	0x36, r24	; 54
	TWCR|=(1<<TWINT)|(1<<TWSTA);
 9fc:	86 b7       	in	r24, 0x36	; 54
 9fe:	80 6a       	ori	r24, 0xA0	; 160
 a00:	86 bf       	out	0x36, r24	; 54
	while(Bit_Is_Clear(TWCR,TWINT));
 a02:	06 b6       	in	r0, 0x36	; 54
 a04:	07 fe       	sbrs	r0, 7
 a06:	fd cf       	rjmp	.-6      	; 0xa02 <I2C_Start+0xc>
}
 a08:	08 95       	ret

00000a0a <I2C_Stop>:
void I2C_Stop(void)
{
	TWCR&=0x07;
 a0a:	86 b7       	in	r24, 0x36	; 54
 a0c:	87 70       	andi	r24, 0x07	; 7
 a0e:	86 bf       	out	0x36, r24	; 54
	TWCR|=(1<<TWINT)|(1<<TWSTO);
 a10:	86 b7       	in	r24, 0x36	; 54
 a12:	80 69       	ori	r24, 0x90	; 144
 a14:	86 bf       	out	0x36, r24	; 54
 a16:	08 95       	ret

00000a18 <I2C_Read_Ack>:
}
uint8 I2C_Read_Ack(void)
{
	TWCR&=0x07;
 a18:	86 b7       	in	r24, 0x36	; 54
 a1a:	87 70       	andi	r24, 0x07	; 7
 a1c:	86 bf       	out	0x36, r24	; 54
	TWCR|=(1<<TWINT)|(1<<TWEA);
 a1e:	86 b7       	in	r24, 0x36	; 54
 a20:	80 6c       	ori	r24, 0xC0	; 192
 a22:	86 bf       	out	0x36, r24	; 54
	while(Bit_Is_Clear(TWCR,TWINT));
 a24:	06 b6       	in	r0, 0x36	; 54
 a26:	07 fe       	sbrs	r0, 7
 a28:	fd cf       	rjmp	.-6      	; 0xa24 <I2C_Read_Ack+0xc>
	return TWDR;
 a2a:	83 b1       	in	r24, 0x03	; 3
}
 a2c:	08 95       	ret

00000a2e <I2C_Read_NAck>:
uint8 I2C_Read_NAck(void)
{
	TWCR&=0x07;
 a2e:	86 b7       	in	r24, 0x36	; 54
 a30:	87 70       	andi	r24, 0x07	; 7
 a32:	86 bf       	out	0x36, r24	; 54
	TWCR|=(1<<TWINT);
 a34:	86 b7       	in	r24, 0x36	; 54
 a36:	80 68       	ori	r24, 0x80	; 128
 a38:	86 bf       	out	0x36, r24	; 54
	while(Bit_Is_Clear(TWCR,TWINT));
 a3a:	06 b6       	in	r0, 0x36	; 54
 a3c:	07 fe       	sbrs	r0, 7
 a3e:	fd cf       	rjmp	.-6      	; 0xa3a <I2C_Read_NAck+0xc>
	return TWDR;
 a40:	83 b1       	in	r24, 0x03	; 3
}
 a42:	08 95       	ret

00000a44 <I2C_Write_byte>:
void I2C_Write_byte(uint8 Data)
{
	TWDR=Data;
 a44:	83 b9       	out	0x03, r24	; 3
	TWCR&=0x07;
 a46:	86 b7       	in	r24, 0x36	; 54
 a48:	87 70       	andi	r24, 0x07	; 7
 a4a:	86 bf       	out	0x36, r24	; 54
	TWCR|=(1<<TWINT);
 a4c:	86 b7       	in	r24, 0x36	; 54
 a4e:	80 68       	ori	r24, 0x80	; 128
 a50:	86 bf       	out	0x36, r24	; 54
	while(Bit_Is_Clear(TWCR,TWINT));
 a52:	06 b6       	in	r0, 0x36	; 54
 a54:	07 fe       	sbrs	r0, 7
 a56:	fd cf       	rjmp	.-6      	; 0xa52 <I2C_Write_byte+0xe>
}
 a58:	08 95       	ret

00000a5a <Timer1_Init>:

#include "Timer1.h"

void Timer1_Init( Timer1_Mode T1_Mode ,T1_Compare_OC1A_Mode  CMP_OC1A_Mode , T1_Compare_OC1B_Mode CMP_OC1B_Mode ,  Timer1_Prescaler CLK )
{
		TCCR1  =(FOC1A_EN<<11)|(FOC1B_EN<<10)|(ICNC1_EN<<7)|(ICES1_EN<<6)|(CMP_OC1A_Mode)|(CMP_OC1B_Mode)|(T1_Mode)|(CLK);
 a5a:	82 2b       	or	r24, r18
 a5c:	80 64       	ori	r24, 0x40	; 64
 a5e:	48 2b       	or	r20, r24
 a60:	59 2b       	or	r21, r25
 a62:	64 2b       	or	r22, r20
 a64:	75 2b       	or	r23, r21
 a66:	7f bd       	out	0x2f, r23	; 47
 a68:	6e bd       	out	0x2e, r22	; 46
		TIMSK |=(TICIE1_EN<<TICIE1)|(OCIE1A_EN<<OCIE1A)|(OCIE1B_EN<<OCIE1B)|(TOIE1_EN<<TOIE1);
 a6a:	89 b7       	in	r24, 0x39	; 57
 a6c:	89 bf       	out	0x39, r24	; 57
 a6e:	08 95       	ret

00000a70 <USART_Init>:
 */ 

#include "USART.h"

void  USART_Init(uint16 Baud_Rate, Bits_Set Bit, USART_Mode Mode,USART_INT_Enable INT,Parity_Mode Parity,Stop_Bits Stop)
{
 a70:	ef 92       	push	r14
 a72:	0f 93       	push	r16
 a74:	1f 93       	push	r17
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
 a7a:	c6 2f       	mov	r28, r22
 a7c:	d4 2f       	mov	r29, r20
 a7e:	12 2f       	mov	r17, r18
	uint16 _UBRR;
	if (Mode != USART_Async)
 a80:	44 23       	and	r20, r20
 a82:	d1 f0       	breq	.+52     	; 0xab8 <USART_Init+0x48>
	{
		_UBRR=(uint16)((((double)F_CPU) / (2.0*Baud_Rate))-1.0);
 a84:	bc 01       	movw	r22, r24
 a86:	80 e0       	ldi	r24, 0x00	; 0
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__floatunsisf>
 a8e:	9b 01       	movw	r18, r22
 a90:	ac 01       	movw	r20, r24
 a92:	0e 94 92 05 	call	0xb24	; 0xb24 <__addsf3>
 a96:	9b 01       	movw	r18, r22
 a98:	ac 01       	movw	r20, r24
 a9a:	60 e0       	ldi	r22, 0x00	; 0
 a9c:	74 e2       	ldi	r23, 0x24	; 36
 a9e:	84 e7       	ldi	r24, 0x74	; 116
 aa0:	9b e4       	ldi	r25, 0x4B	; 75
 aa2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__divsf3>
 aa6:	20 e0       	ldi	r18, 0x00	; 0
 aa8:	30 e0       	ldi	r19, 0x00	; 0
 aaa:	40 e8       	ldi	r20, 0x80	; 128
 aac:	5f e3       	ldi	r21, 0x3F	; 63
 aae:	0e 94 91 05 	call	0xb22	; 0xb22 <__subsf3>
 ab2:	0e 94 70 06 	call	0xce0	; 0xce0 <__fixunssfsi>
 ab6:	1b c0       	rjmp	.+54     	; 0xaee <USART_Init+0x7e>
	}
	else
	{
		if(Double_Speed)
			_UBRR=(uint16)((((double)F_CPU) / (8.0*Baud_Rate))-1.0);
 ab8:	bc 01       	movw	r22, r24
 aba:	80 e0       	ldi	r24, 0x00	; 0
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__floatunsisf>
 ac2:	20 e0       	ldi	r18, 0x00	; 0
 ac4:	30 e0       	ldi	r19, 0x00	; 0
 ac6:	40 e0       	ldi	r20, 0x00	; 0
 ac8:	51 e4       	ldi	r21, 0x41	; 65
 aca:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__mulsf3>
 ace:	9b 01       	movw	r18, r22
 ad0:	ac 01       	movw	r20, r24
 ad2:	60 e0       	ldi	r22, 0x00	; 0
 ad4:	74 e2       	ldi	r23, 0x24	; 36
 ad6:	84 e7       	ldi	r24, 0x74	; 116
 ad8:	9b e4       	ldi	r25, 0x4B	; 75
 ada:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__divsf3>
 ade:	20 e0       	ldi	r18, 0x00	; 0
 ae0:	30 e0       	ldi	r19, 0x00	; 0
 ae2:	40 e8       	ldi	r20, 0x80	; 128
 ae4:	5f e3       	ldi	r21, 0x3F	; 63
 ae6:	0e 94 91 05 	call	0xb22	; 0xb22 <__subsf3>
 aea:	0e 94 70 06 	call	0xce0	; 0xce0 <__fixunssfsi>
		else		
			_UBRR=(uint16)((((double)F_CPU) / (16.0*Baud_Rate))-1.0);
	}
	UBRR(_UBRR);
 aee:	69 b9       	out	0x09, r22	; 9
 af0:	73 70       	andi	r23, 0x03	; 3
 af2:	70 bd       	out	0x20, r23	; 32
	
	
	UCSRA =(Double_Speed<<U2X)|(Mulit_processor<<MPCM);
 af4:	82 e0       	ldi	r24, 0x02	; 2
 af6:	8b b9       	out	0x0b, r24	; 11
	UCSRB =INT|(1<<RXEN)|(1<<TXEN)|(_9thBit<<UCSZ2);
 af8:	18 61       	ori	r17, 0x18	; 24
 afa:	1a b9       	out	0x0a, r17	; 10
	UCSRC =(1<<URSEL)|(Mode)|(Bit)|(Parity)|(Stop<<3);
 afc:	00 68       	ori	r16, 0x80	; 128
 afe:	0c 2b       	or	r16, r28
 b00:	ce 2d       	mov	r28, r14
 b02:	cc 0f       	add	r28, r28
 b04:	cc 0f       	add	r28, r28
 b06:	cc 0f       	add	r28, r28
 b08:	c0 2b       	or	r28, r16
 b0a:	cd 2b       	or	r28, r29
 b0c:	c0 bd       	out	0x20, r28	; 32
}
 b0e:	df 91       	pop	r29
 b10:	cf 91       	pop	r28
 b12:	1f 91       	pop	r17
 b14:	0f 91       	pop	r16
 b16:	ef 90       	pop	r14
 b18:	08 95       	ret

00000b1a <USART_SendByte>:
void  USART_SendByte(uint8 Data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
 b1a:	5d 9b       	sbis	0x0b, 5	; 11
 b1c:	fe cf       	rjmp	.-4      	; 0xb1a <USART_SendByte>
	if ( Data & 0x0100 )
	UCSRB |= (1<<TXB8);
       #endif
	
	/* Put data into buffer, sends the data */
	UDR = Data;
 b1e:	8c b9       	out	0x0c, r24	; 12
 b20:	08 95       	ret

00000b22 <__subsf3>:
 b22:	50 58       	subi	r21, 0x80	; 128

00000b24 <__addsf3>:
 b24:	bb 27       	eor	r27, r27
 b26:	aa 27       	eor	r26, r26
 b28:	0e 94 a9 05 	call	0xb52	; 0xb52 <__addsf3x>
 b2c:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_round>
 b30:	0e 94 e5 06 	call	0xdca	; 0xdca <__fp_pscA>
 b34:	38 f0       	brcs	.+14     	; 0xb44 <__addsf3+0x20>
 b36:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fp_pscB>
 b3a:	20 f0       	brcs	.+8      	; 0xb44 <__addsf3+0x20>
 b3c:	39 f4       	brne	.+14     	; 0xb4c <__addsf3+0x28>
 b3e:	9f 3f       	cpi	r25, 0xFF	; 255
 b40:	19 f4       	brne	.+6      	; 0xb48 <__addsf3+0x24>
 b42:	26 f4       	brtc	.+8      	; 0xb4c <__addsf3+0x28>
 b44:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_nan>
 b48:	0e f4       	brtc	.+2      	; 0xb4c <__addsf3+0x28>
 b4a:	e0 95       	com	r30
 b4c:	e7 fb       	bst	r30, 7
 b4e:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_inf>

00000b52 <__addsf3x>:
 b52:	e9 2f       	mov	r30, r25
 b54:	0e 94 04 07 	call	0xe08	; 0xe08 <__fp_split3>
 b58:	58 f3       	brcs	.-42     	; 0xb30 <__addsf3+0xc>
 b5a:	ba 17       	cp	r27, r26
 b5c:	62 07       	cpc	r22, r18
 b5e:	73 07       	cpc	r23, r19
 b60:	84 07       	cpc	r24, r20
 b62:	95 07       	cpc	r25, r21
 b64:	20 f0       	brcs	.+8      	; 0xb6e <__addsf3x+0x1c>
 b66:	79 f4       	brne	.+30     	; 0xb86 <__addsf3x+0x34>
 b68:	a6 f5       	brtc	.+104    	; 0xbd2 <__addsf3x+0x80>
 b6a:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_zero>
 b6e:	0e f4       	brtc	.+2      	; 0xb72 <__addsf3x+0x20>
 b70:	e0 95       	com	r30
 b72:	0b 2e       	mov	r0, r27
 b74:	ba 2f       	mov	r27, r26
 b76:	a0 2d       	mov	r26, r0
 b78:	0b 01       	movw	r0, r22
 b7a:	b9 01       	movw	r22, r18
 b7c:	90 01       	movw	r18, r0
 b7e:	0c 01       	movw	r0, r24
 b80:	ca 01       	movw	r24, r20
 b82:	a0 01       	movw	r20, r0
 b84:	11 24       	eor	r1, r1
 b86:	ff 27       	eor	r31, r31
 b88:	59 1b       	sub	r21, r25
 b8a:	99 f0       	breq	.+38     	; 0xbb2 <__addsf3x+0x60>
 b8c:	59 3f       	cpi	r21, 0xF9	; 249
 b8e:	50 f4       	brcc	.+20     	; 0xba4 <__addsf3x+0x52>
 b90:	50 3e       	cpi	r21, 0xE0	; 224
 b92:	68 f1       	brcs	.+90     	; 0xbee <__addsf3x+0x9c>
 b94:	1a 16       	cp	r1, r26
 b96:	f0 40       	sbci	r31, 0x00	; 0
 b98:	a2 2f       	mov	r26, r18
 b9a:	23 2f       	mov	r18, r19
 b9c:	34 2f       	mov	r19, r20
 b9e:	44 27       	eor	r20, r20
 ba0:	58 5f       	subi	r21, 0xF8	; 248
 ba2:	f3 cf       	rjmp	.-26     	; 0xb8a <__addsf3x+0x38>
 ba4:	46 95       	lsr	r20
 ba6:	37 95       	ror	r19
 ba8:	27 95       	ror	r18
 baa:	a7 95       	ror	r26
 bac:	f0 40       	sbci	r31, 0x00	; 0
 bae:	53 95       	inc	r21
 bb0:	c9 f7       	brne	.-14     	; 0xba4 <__addsf3x+0x52>
 bb2:	7e f4       	brtc	.+30     	; 0xbd2 <__addsf3x+0x80>
 bb4:	1f 16       	cp	r1, r31
 bb6:	ba 0b       	sbc	r27, r26
 bb8:	62 0b       	sbc	r22, r18
 bba:	73 0b       	sbc	r23, r19
 bbc:	84 0b       	sbc	r24, r20
 bbe:	ba f0       	brmi	.+46     	; 0xbee <__addsf3x+0x9c>
 bc0:	91 50       	subi	r25, 0x01	; 1
 bc2:	a1 f0       	breq	.+40     	; 0xbec <__addsf3x+0x9a>
 bc4:	ff 0f       	add	r31, r31
 bc6:	bb 1f       	adc	r27, r27
 bc8:	66 1f       	adc	r22, r22
 bca:	77 1f       	adc	r23, r23
 bcc:	88 1f       	adc	r24, r24
 bce:	c2 f7       	brpl	.-16     	; 0xbc0 <__addsf3x+0x6e>
 bd0:	0e c0       	rjmp	.+28     	; 0xbee <__addsf3x+0x9c>
 bd2:	ba 0f       	add	r27, r26
 bd4:	62 1f       	adc	r22, r18
 bd6:	73 1f       	adc	r23, r19
 bd8:	84 1f       	adc	r24, r20
 bda:	48 f4       	brcc	.+18     	; 0xbee <__addsf3x+0x9c>
 bdc:	87 95       	ror	r24
 bde:	77 95       	ror	r23
 be0:	67 95       	ror	r22
 be2:	b7 95       	ror	r27
 be4:	f7 95       	ror	r31
 be6:	9e 3f       	cpi	r25, 0xFE	; 254
 be8:	08 f0       	brcs	.+2      	; 0xbec <__addsf3x+0x9a>
 bea:	b0 cf       	rjmp	.-160    	; 0xb4c <__addsf3+0x28>
 bec:	93 95       	inc	r25
 bee:	88 0f       	add	r24, r24
 bf0:	08 f0       	brcs	.+2      	; 0xbf4 <__addsf3x+0xa2>
 bf2:	99 27       	eor	r25, r25
 bf4:	ee 0f       	add	r30, r30
 bf6:	97 95       	ror	r25
 bf8:	87 95       	ror	r24
 bfa:	08 95       	ret

00000bfc <__divsf3>:
 bfc:	0e 94 12 06 	call	0xc24	; 0xc24 <__divsf3x>
 c00:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_round>
 c04:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fp_pscB>
 c08:	58 f0       	brcs	.+22     	; 0xc20 <__divsf3+0x24>
 c0a:	0e 94 e5 06 	call	0xdca	; 0xdca <__fp_pscA>
 c0e:	40 f0       	brcs	.+16     	; 0xc20 <__divsf3+0x24>
 c10:	29 f4       	brne	.+10     	; 0xc1c <__divsf3+0x20>
 c12:	5f 3f       	cpi	r21, 0xFF	; 255
 c14:	29 f0       	breq	.+10     	; 0xc20 <__divsf3+0x24>
 c16:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_inf>
 c1a:	51 11       	cpse	r21, r1
 c1c:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_szero>
 c20:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_nan>

00000c24 <__divsf3x>:
 c24:	0e 94 04 07 	call	0xe08	; 0xe08 <__fp_split3>
 c28:	68 f3       	brcs	.-38     	; 0xc04 <__divsf3+0x8>

00000c2a <__divsf3_pse>:
 c2a:	99 23       	and	r25, r25
 c2c:	b1 f3       	breq	.-20     	; 0xc1a <__divsf3+0x1e>
 c2e:	55 23       	and	r21, r21
 c30:	91 f3       	breq	.-28     	; 0xc16 <__divsf3+0x1a>
 c32:	95 1b       	sub	r25, r21
 c34:	55 0b       	sbc	r21, r21
 c36:	bb 27       	eor	r27, r27
 c38:	aa 27       	eor	r26, r26
 c3a:	62 17       	cp	r22, r18
 c3c:	73 07       	cpc	r23, r19
 c3e:	84 07       	cpc	r24, r20
 c40:	38 f0       	brcs	.+14     	; 0xc50 <__divsf3_pse+0x26>
 c42:	9f 5f       	subi	r25, 0xFF	; 255
 c44:	5f 4f       	sbci	r21, 0xFF	; 255
 c46:	22 0f       	add	r18, r18
 c48:	33 1f       	adc	r19, r19
 c4a:	44 1f       	adc	r20, r20
 c4c:	aa 1f       	adc	r26, r26
 c4e:	a9 f3       	breq	.-22     	; 0xc3a <__divsf3_pse+0x10>
 c50:	35 d0       	rcall	.+106    	; 0xcbc <__divsf3_pse+0x92>
 c52:	0e 2e       	mov	r0, r30
 c54:	3a f0       	brmi	.+14     	; 0xc64 <__divsf3_pse+0x3a>
 c56:	e0 e8       	ldi	r30, 0x80	; 128
 c58:	32 d0       	rcall	.+100    	; 0xcbe <__divsf3_pse+0x94>
 c5a:	91 50       	subi	r25, 0x01	; 1
 c5c:	50 40       	sbci	r21, 0x00	; 0
 c5e:	e6 95       	lsr	r30
 c60:	00 1c       	adc	r0, r0
 c62:	ca f7       	brpl	.-14     	; 0xc56 <__divsf3_pse+0x2c>
 c64:	2b d0       	rcall	.+86     	; 0xcbc <__divsf3_pse+0x92>
 c66:	fe 2f       	mov	r31, r30
 c68:	29 d0       	rcall	.+82     	; 0xcbc <__divsf3_pse+0x92>
 c6a:	66 0f       	add	r22, r22
 c6c:	77 1f       	adc	r23, r23
 c6e:	88 1f       	adc	r24, r24
 c70:	bb 1f       	adc	r27, r27
 c72:	26 17       	cp	r18, r22
 c74:	37 07       	cpc	r19, r23
 c76:	48 07       	cpc	r20, r24
 c78:	ab 07       	cpc	r26, r27
 c7a:	b0 e8       	ldi	r27, 0x80	; 128
 c7c:	09 f0       	breq	.+2      	; 0xc80 <__divsf3_pse+0x56>
 c7e:	bb 0b       	sbc	r27, r27
 c80:	80 2d       	mov	r24, r0
 c82:	bf 01       	movw	r22, r30
 c84:	ff 27       	eor	r31, r31
 c86:	93 58       	subi	r25, 0x83	; 131
 c88:	5f 4f       	sbci	r21, 0xFF	; 255
 c8a:	3a f0       	brmi	.+14     	; 0xc9a <__divsf3_pse+0x70>
 c8c:	9e 3f       	cpi	r25, 0xFE	; 254
 c8e:	51 05       	cpc	r21, r1
 c90:	78 f0       	brcs	.+30     	; 0xcb0 <__divsf3_pse+0x86>
 c92:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_inf>
 c96:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_szero>
 c9a:	5f 3f       	cpi	r21, 0xFF	; 255
 c9c:	e4 f3       	brlt	.-8      	; 0xc96 <__divsf3_pse+0x6c>
 c9e:	98 3e       	cpi	r25, 0xE8	; 232
 ca0:	d4 f3       	brlt	.-12     	; 0xc96 <__divsf3_pse+0x6c>
 ca2:	86 95       	lsr	r24
 ca4:	77 95       	ror	r23
 ca6:	67 95       	ror	r22
 ca8:	b7 95       	ror	r27
 caa:	f7 95       	ror	r31
 cac:	9f 5f       	subi	r25, 0xFF	; 255
 cae:	c9 f7       	brne	.-14     	; 0xca2 <__divsf3_pse+0x78>
 cb0:	88 0f       	add	r24, r24
 cb2:	91 1d       	adc	r25, r1
 cb4:	96 95       	lsr	r25
 cb6:	87 95       	ror	r24
 cb8:	97 f9       	bld	r25, 7
 cba:	08 95       	ret
 cbc:	e1 e0       	ldi	r30, 0x01	; 1
 cbe:	66 0f       	add	r22, r22
 cc0:	77 1f       	adc	r23, r23
 cc2:	88 1f       	adc	r24, r24
 cc4:	bb 1f       	adc	r27, r27
 cc6:	62 17       	cp	r22, r18
 cc8:	73 07       	cpc	r23, r19
 cca:	84 07       	cpc	r24, r20
 ccc:	ba 07       	cpc	r27, r26
 cce:	20 f0       	brcs	.+8      	; 0xcd8 <__divsf3_pse+0xae>
 cd0:	62 1b       	sub	r22, r18
 cd2:	73 0b       	sbc	r23, r19
 cd4:	84 0b       	sbc	r24, r20
 cd6:	ba 0b       	sbc	r27, r26
 cd8:	ee 1f       	adc	r30, r30
 cda:	88 f7       	brcc	.-30     	; 0xcbe <__divsf3_pse+0x94>
 cdc:	e0 95       	com	r30
 cde:	08 95       	ret

00000ce0 <__fixunssfsi>:
 ce0:	0e 94 0c 07 	call	0xe18	; 0xe18 <__fp_splitA>
 ce4:	88 f0       	brcs	.+34     	; 0xd08 <__fixunssfsi+0x28>
 ce6:	9f 57       	subi	r25, 0x7F	; 127
 ce8:	98 f0       	brcs	.+38     	; 0xd10 <__fixunssfsi+0x30>
 cea:	b9 2f       	mov	r27, r25
 cec:	99 27       	eor	r25, r25
 cee:	b7 51       	subi	r27, 0x17	; 23
 cf0:	b0 f0       	brcs	.+44     	; 0xd1e <__fixunssfsi+0x3e>
 cf2:	e1 f0       	breq	.+56     	; 0xd2c <__fixunssfsi+0x4c>
 cf4:	66 0f       	add	r22, r22
 cf6:	77 1f       	adc	r23, r23
 cf8:	88 1f       	adc	r24, r24
 cfa:	99 1f       	adc	r25, r25
 cfc:	1a f0       	brmi	.+6      	; 0xd04 <__fixunssfsi+0x24>
 cfe:	ba 95       	dec	r27
 d00:	c9 f7       	brne	.-14     	; 0xcf4 <__fixunssfsi+0x14>
 d02:	14 c0       	rjmp	.+40     	; 0xd2c <__fixunssfsi+0x4c>
 d04:	b1 30       	cpi	r27, 0x01	; 1
 d06:	91 f0       	breq	.+36     	; 0xd2c <__fixunssfsi+0x4c>
 d08:	0e 94 26 07 	call	0xe4c	; 0xe4c <__fp_zero>
 d0c:	b1 e0       	ldi	r27, 0x01	; 1
 d0e:	08 95       	ret
 d10:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__fp_zero>
 d14:	67 2f       	mov	r22, r23
 d16:	78 2f       	mov	r23, r24
 d18:	88 27       	eor	r24, r24
 d1a:	b8 5f       	subi	r27, 0xF8	; 248
 d1c:	39 f0       	breq	.+14     	; 0xd2c <__fixunssfsi+0x4c>
 d1e:	b9 3f       	cpi	r27, 0xF9	; 249
 d20:	cc f3       	brlt	.-14     	; 0xd14 <__fixunssfsi+0x34>
 d22:	86 95       	lsr	r24
 d24:	77 95       	ror	r23
 d26:	67 95       	ror	r22
 d28:	b3 95       	inc	r27
 d2a:	d9 f7       	brne	.-10     	; 0xd22 <__fixunssfsi+0x42>
 d2c:	3e f4       	brtc	.+14     	; 0xd3c <__fixunssfsi+0x5c>
 d2e:	90 95       	com	r25
 d30:	80 95       	com	r24
 d32:	70 95       	com	r23
 d34:	61 95       	neg	r22
 d36:	7f 4f       	sbci	r23, 0xFF	; 255
 d38:	8f 4f       	sbci	r24, 0xFF	; 255
 d3a:	9f 4f       	sbci	r25, 0xFF	; 255
 d3c:	08 95       	ret

00000d3e <__floatunsisf>:
 d3e:	e8 94       	clt
 d40:	09 c0       	rjmp	.+18     	; 0xd54 <__floatsisf+0x12>

00000d42 <__floatsisf>:
 d42:	97 fb       	bst	r25, 7
 d44:	3e f4       	brtc	.+14     	; 0xd54 <__floatsisf+0x12>
 d46:	90 95       	com	r25
 d48:	80 95       	com	r24
 d4a:	70 95       	com	r23
 d4c:	61 95       	neg	r22
 d4e:	7f 4f       	sbci	r23, 0xFF	; 255
 d50:	8f 4f       	sbci	r24, 0xFF	; 255
 d52:	9f 4f       	sbci	r25, 0xFF	; 255
 d54:	99 23       	and	r25, r25
 d56:	a9 f0       	breq	.+42     	; 0xd82 <__floatsisf+0x40>
 d58:	f9 2f       	mov	r31, r25
 d5a:	96 e9       	ldi	r25, 0x96	; 150
 d5c:	bb 27       	eor	r27, r27
 d5e:	93 95       	inc	r25
 d60:	f6 95       	lsr	r31
 d62:	87 95       	ror	r24
 d64:	77 95       	ror	r23
 d66:	67 95       	ror	r22
 d68:	b7 95       	ror	r27
 d6a:	f1 11       	cpse	r31, r1
 d6c:	f8 cf       	rjmp	.-16     	; 0xd5e <__floatsisf+0x1c>
 d6e:	fa f4       	brpl	.+62     	; 0xdae <__floatsisf+0x6c>
 d70:	bb 0f       	add	r27, r27
 d72:	11 f4       	brne	.+4      	; 0xd78 <__floatsisf+0x36>
 d74:	60 ff       	sbrs	r22, 0
 d76:	1b c0       	rjmp	.+54     	; 0xdae <__floatsisf+0x6c>
 d78:	6f 5f       	subi	r22, 0xFF	; 255
 d7a:	7f 4f       	sbci	r23, 0xFF	; 255
 d7c:	8f 4f       	sbci	r24, 0xFF	; 255
 d7e:	9f 4f       	sbci	r25, 0xFF	; 255
 d80:	16 c0       	rjmp	.+44     	; 0xdae <__floatsisf+0x6c>
 d82:	88 23       	and	r24, r24
 d84:	11 f0       	breq	.+4      	; 0xd8a <__floatsisf+0x48>
 d86:	96 e9       	ldi	r25, 0x96	; 150
 d88:	11 c0       	rjmp	.+34     	; 0xdac <__floatsisf+0x6a>
 d8a:	77 23       	and	r23, r23
 d8c:	21 f0       	breq	.+8      	; 0xd96 <__floatsisf+0x54>
 d8e:	9e e8       	ldi	r25, 0x8E	; 142
 d90:	87 2f       	mov	r24, r23
 d92:	76 2f       	mov	r23, r22
 d94:	05 c0       	rjmp	.+10     	; 0xda0 <__floatsisf+0x5e>
 d96:	66 23       	and	r22, r22
 d98:	71 f0       	breq	.+28     	; 0xdb6 <__floatsisf+0x74>
 d9a:	96 e8       	ldi	r25, 0x86	; 134
 d9c:	86 2f       	mov	r24, r22
 d9e:	70 e0       	ldi	r23, 0x00	; 0
 da0:	60 e0       	ldi	r22, 0x00	; 0
 da2:	2a f0       	brmi	.+10     	; 0xdae <__floatsisf+0x6c>
 da4:	9a 95       	dec	r25
 da6:	66 0f       	add	r22, r22
 da8:	77 1f       	adc	r23, r23
 daa:	88 1f       	adc	r24, r24
 dac:	da f7       	brpl	.-10     	; 0xda4 <__floatsisf+0x62>
 dae:	88 0f       	add	r24, r24
 db0:	96 95       	lsr	r25
 db2:	87 95       	ror	r24
 db4:	97 f9       	bld	r25, 7
 db6:	08 95       	ret

00000db8 <__fp_inf>:
 db8:	97 f9       	bld	r25, 7
 dba:	9f 67       	ori	r25, 0x7F	; 127
 dbc:	80 e8       	ldi	r24, 0x80	; 128
 dbe:	70 e0       	ldi	r23, 0x00	; 0
 dc0:	60 e0       	ldi	r22, 0x00	; 0
 dc2:	08 95       	ret

00000dc4 <__fp_nan>:
 dc4:	9f ef       	ldi	r25, 0xFF	; 255
 dc6:	80 ec       	ldi	r24, 0xC0	; 192
 dc8:	08 95       	ret

00000dca <__fp_pscA>:
 dca:	00 24       	eor	r0, r0
 dcc:	0a 94       	dec	r0
 dce:	16 16       	cp	r1, r22
 dd0:	17 06       	cpc	r1, r23
 dd2:	18 06       	cpc	r1, r24
 dd4:	09 06       	cpc	r0, r25
 dd6:	08 95       	ret

00000dd8 <__fp_pscB>:
 dd8:	00 24       	eor	r0, r0
 dda:	0a 94       	dec	r0
 ddc:	12 16       	cp	r1, r18
 dde:	13 06       	cpc	r1, r19
 de0:	14 06       	cpc	r1, r20
 de2:	05 06       	cpc	r0, r21
 de4:	08 95       	ret

00000de6 <__fp_round>:
 de6:	09 2e       	mov	r0, r25
 de8:	03 94       	inc	r0
 dea:	00 0c       	add	r0, r0
 dec:	11 f4       	brne	.+4      	; 0xdf2 <__fp_round+0xc>
 dee:	88 23       	and	r24, r24
 df0:	52 f0       	brmi	.+20     	; 0xe06 <__fp_round+0x20>
 df2:	bb 0f       	add	r27, r27
 df4:	40 f4       	brcc	.+16     	; 0xe06 <__fp_round+0x20>
 df6:	bf 2b       	or	r27, r31
 df8:	11 f4       	brne	.+4      	; 0xdfe <__fp_round+0x18>
 dfa:	60 ff       	sbrs	r22, 0
 dfc:	04 c0       	rjmp	.+8      	; 0xe06 <__fp_round+0x20>
 dfe:	6f 5f       	subi	r22, 0xFF	; 255
 e00:	7f 4f       	sbci	r23, 0xFF	; 255
 e02:	8f 4f       	sbci	r24, 0xFF	; 255
 e04:	9f 4f       	sbci	r25, 0xFF	; 255
 e06:	08 95       	ret

00000e08 <__fp_split3>:
 e08:	57 fd       	sbrc	r21, 7
 e0a:	90 58       	subi	r25, 0x80	; 128
 e0c:	44 0f       	add	r20, r20
 e0e:	55 1f       	adc	r21, r21
 e10:	59 f0       	breq	.+22     	; 0xe28 <__fp_splitA+0x10>
 e12:	5f 3f       	cpi	r21, 0xFF	; 255
 e14:	71 f0       	breq	.+28     	; 0xe32 <__fp_splitA+0x1a>
 e16:	47 95       	ror	r20

00000e18 <__fp_splitA>:
 e18:	88 0f       	add	r24, r24
 e1a:	97 fb       	bst	r25, 7
 e1c:	99 1f       	adc	r25, r25
 e1e:	61 f0       	breq	.+24     	; 0xe38 <__fp_splitA+0x20>
 e20:	9f 3f       	cpi	r25, 0xFF	; 255
 e22:	79 f0       	breq	.+30     	; 0xe42 <__fp_splitA+0x2a>
 e24:	87 95       	ror	r24
 e26:	08 95       	ret
 e28:	12 16       	cp	r1, r18
 e2a:	13 06       	cpc	r1, r19
 e2c:	14 06       	cpc	r1, r20
 e2e:	55 1f       	adc	r21, r21
 e30:	f2 cf       	rjmp	.-28     	; 0xe16 <__fp_split3+0xe>
 e32:	46 95       	lsr	r20
 e34:	f1 df       	rcall	.-30     	; 0xe18 <__fp_splitA>
 e36:	08 c0       	rjmp	.+16     	; 0xe48 <__fp_splitA+0x30>
 e38:	16 16       	cp	r1, r22
 e3a:	17 06       	cpc	r1, r23
 e3c:	18 06       	cpc	r1, r24
 e3e:	99 1f       	adc	r25, r25
 e40:	f1 cf       	rjmp	.-30     	; 0xe24 <__fp_splitA+0xc>
 e42:	86 95       	lsr	r24
 e44:	71 05       	cpc	r23, r1
 e46:	61 05       	cpc	r22, r1
 e48:	08 94       	sec
 e4a:	08 95       	ret

00000e4c <__fp_zero>:
 e4c:	e8 94       	clt

00000e4e <__fp_szero>:
 e4e:	bb 27       	eor	r27, r27
 e50:	66 27       	eor	r22, r22
 e52:	77 27       	eor	r23, r23
 e54:	cb 01       	movw	r24, r22
 e56:	97 f9       	bld	r25, 7
 e58:	08 95       	ret

00000e5a <__mulsf3>:
 e5a:	0e 94 40 07 	call	0xe80	; 0xe80 <__mulsf3x>
 e5e:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_round>
 e62:	0e 94 e5 06 	call	0xdca	; 0xdca <__fp_pscA>
 e66:	38 f0       	brcs	.+14     	; 0xe76 <__mulsf3+0x1c>
 e68:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fp_pscB>
 e6c:	20 f0       	brcs	.+8      	; 0xe76 <__mulsf3+0x1c>
 e6e:	95 23       	and	r25, r21
 e70:	11 f0       	breq	.+4      	; 0xe76 <__mulsf3+0x1c>
 e72:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_inf>
 e76:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_nan>
 e7a:	11 24       	eor	r1, r1
 e7c:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_szero>

00000e80 <__mulsf3x>:
 e80:	0e 94 04 07 	call	0xe08	; 0xe08 <__fp_split3>
 e84:	70 f3       	brcs	.-36     	; 0xe62 <__mulsf3+0x8>

00000e86 <__mulsf3_pse>:
 e86:	95 9f       	mul	r25, r21
 e88:	c1 f3       	breq	.-16     	; 0xe7a <__mulsf3+0x20>
 e8a:	95 0f       	add	r25, r21
 e8c:	50 e0       	ldi	r21, 0x00	; 0
 e8e:	55 1f       	adc	r21, r21
 e90:	62 9f       	mul	r22, r18
 e92:	f0 01       	movw	r30, r0
 e94:	72 9f       	mul	r23, r18
 e96:	bb 27       	eor	r27, r27
 e98:	f0 0d       	add	r31, r0
 e9a:	b1 1d       	adc	r27, r1
 e9c:	63 9f       	mul	r22, r19
 e9e:	aa 27       	eor	r26, r26
 ea0:	f0 0d       	add	r31, r0
 ea2:	b1 1d       	adc	r27, r1
 ea4:	aa 1f       	adc	r26, r26
 ea6:	64 9f       	mul	r22, r20
 ea8:	66 27       	eor	r22, r22
 eaa:	b0 0d       	add	r27, r0
 eac:	a1 1d       	adc	r26, r1
 eae:	66 1f       	adc	r22, r22
 eb0:	82 9f       	mul	r24, r18
 eb2:	22 27       	eor	r18, r18
 eb4:	b0 0d       	add	r27, r0
 eb6:	a1 1d       	adc	r26, r1
 eb8:	62 1f       	adc	r22, r18
 eba:	73 9f       	mul	r23, r19
 ebc:	b0 0d       	add	r27, r0
 ebe:	a1 1d       	adc	r26, r1
 ec0:	62 1f       	adc	r22, r18
 ec2:	83 9f       	mul	r24, r19
 ec4:	a0 0d       	add	r26, r0
 ec6:	61 1d       	adc	r22, r1
 ec8:	22 1f       	adc	r18, r18
 eca:	74 9f       	mul	r23, r20
 ecc:	33 27       	eor	r19, r19
 ece:	a0 0d       	add	r26, r0
 ed0:	61 1d       	adc	r22, r1
 ed2:	23 1f       	adc	r18, r19
 ed4:	84 9f       	mul	r24, r20
 ed6:	60 0d       	add	r22, r0
 ed8:	21 1d       	adc	r18, r1
 eda:	82 2f       	mov	r24, r18
 edc:	76 2f       	mov	r23, r22
 ede:	6a 2f       	mov	r22, r26
 ee0:	11 24       	eor	r1, r1
 ee2:	9f 57       	subi	r25, 0x7F	; 127
 ee4:	50 40       	sbci	r21, 0x00	; 0
 ee6:	9a f0       	brmi	.+38     	; 0xf0e <__mulsf3_pse+0x88>
 ee8:	f1 f0       	breq	.+60     	; 0xf26 <__mulsf3_pse+0xa0>
 eea:	88 23       	and	r24, r24
 eec:	4a f0       	brmi	.+18     	; 0xf00 <__mulsf3_pse+0x7a>
 eee:	ee 0f       	add	r30, r30
 ef0:	ff 1f       	adc	r31, r31
 ef2:	bb 1f       	adc	r27, r27
 ef4:	66 1f       	adc	r22, r22
 ef6:	77 1f       	adc	r23, r23
 ef8:	88 1f       	adc	r24, r24
 efa:	91 50       	subi	r25, 0x01	; 1
 efc:	50 40       	sbci	r21, 0x00	; 0
 efe:	a9 f7       	brne	.-22     	; 0xeea <__mulsf3_pse+0x64>
 f00:	9e 3f       	cpi	r25, 0xFE	; 254
 f02:	51 05       	cpc	r21, r1
 f04:	80 f0       	brcs	.+32     	; 0xf26 <__mulsf3_pse+0xa0>
 f06:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_inf>
 f0a:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_szero>
 f0e:	5f 3f       	cpi	r21, 0xFF	; 255
 f10:	e4 f3       	brlt	.-8      	; 0xf0a <__mulsf3_pse+0x84>
 f12:	98 3e       	cpi	r25, 0xE8	; 232
 f14:	d4 f3       	brlt	.-12     	; 0xf0a <__mulsf3_pse+0x84>
 f16:	86 95       	lsr	r24
 f18:	77 95       	ror	r23
 f1a:	67 95       	ror	r22
 f1c:	b7 95       	ror	r27
 f1e:	f7 95       	ror	r31
 f20:	e7 95       	ror	r30
 f22:	9f 5f       	subi	r25, 0xFF	; 255
 f24:	c1 f7       	brne	.-16     	; 0xf16 <__mulsf3_pse+0x90>
 f26:	fe 2b       	or	r31, r30
 f28:	88 0f       	add	r24, r24
 f2a:	91 1d       	adc	r25, r1
 f2c:	96 95       	lsr	r25
 f2e:	87 95       	ror	r24
 f30:	97 f9       	bld	r25, 7
 f32:	08 95       	ret

00000f34 <strcat>:
 f34:	fb 01       	movw	r30, r22
 f36:	dc 01       	movw	r26, r24
 f38:	0d 90       	ld	r0, X+
 f3a:	00 20       	and	r0, r0
 f3c:	e9 f7       	brne	.-6      	; 0xf38 <strcat+0x4>
 f3e:	11 97       	sbiw	r26, 0x01	; 1
 f40:	01 90       	ld	r0, Z+
 f42:	0d 92       	st	X+, r0
 f44:	00 20       	and	r0, r0
 f46:	e1 f7       	brne	.-8      	; 0xf40 <strcat+0xc>
 f48:	08 95       	ret

00000f4a <__itoa_ncheck>:
 f4a:	bb 27       	eor	r27, r27
 f4c:	4a 30       	cpi	r20, 0x0A	; 10
 f4e:	31 f4       	brne	.+12     	; 0xf5c <__itoa_ncheck+0x12>
 f50:	99 23       	and	r25, r25
 f52:	22 f4       	brpl	.+8      	; 0xf5c <__itoa_ncheck+0x12>
 f54:	bd e2       	ldi	r27, 0x2D	; 45
 f56:	90 95       	com	r25
 f58:	81 95       	neg	r24
 f5a:	9f 4f       	sbci	r25, 0xFF	; 255
 f5c:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__utoa_common>

00000f60 <__utoa_ncheck>:
 f60:	bb 27       	eor	r27, r27

00000f62 <__utoa_common>:
 f62:	fb 01       	movw	r30, r22
 f64:	55 27       	eor	r21, r21
 f66:	aa 27       	eor	r26, r26
 f68:	88 0f       	add	r24, r24
 f6a:	99 1f       	adc	r25, r25
 f6c:	aa 1f       	adc	r26, r26
 f6e:	a4 17       	cp	r26, r20
 f70:	10 f0       	brcs	.+4      	; 0xf76 <__utoa_common+0x14>
 f72:	a4 1b       	sub	r26, r20
 f74:	83 95       	inc	r24
 f76:	50 51       	subi	r21, 0x10	; 16
 f78:	b9 f7       	brne	.-18     	; 0xf68 <__utoa_common+0x6>
 f7a:	a0 5d       	subi	r26, 0xD0	; 208
 f7c:	aa 33       	cpi	r26, 0x3A	; 58
 f7e:	08 f0       	brcs	.+2      	; 0xf82 <__utoa_common+0x20>
 f80:	a9 5d       	subi	r26, 0xD9	; 217
 f82:	a1 93       	st	Z+, r26
 f84:	00 97       	sbiw	r24, 0x00	; 0
 f86:	79 f7       	brne	.-34     	; 0xf66 <__utoa_common+0x4>
 f88:	b1 11       	cpse	r27, r1
 f8a:	b1 93       	st	Z+, r27
 f8c:	11 92       	st	Z+, r1
 f8e:	cb 01       	movw	r24, r22
 f90:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <strrev>

00000f94 <strrev>:
 f94:	dc 01       	movw	r26, r24
 f96:	fc 01       	movw	r30, r24
 f98:	67 2f       	mov	r22, r23
 f9a:	71 91       	ld	r23, Z+
 f9c:	77 23       	and	r23, r23
 f9e:	e1 f7       	brne	.-8      	; 0xf98 <strrev+0x4>
 fa0:	32 97       	sbiw	r30, 0x02	; 2
 fa2:	04 c0       	rjmp	.+8      	; 0xfac <strrev+0x18>
 fa4:	7c 91       	ld	r23, X
 fa6:	6d 93       	st	X+, r22
 fa8:	70 83       	st	Z, r23
 faa:	62 91       	ld	r22, -Z
 fac:	ae 17       	cp	r26, r30
 fae:	bf 07       	cpc	r27, r31
 fb0:	c8 f3       	brcs	.-14     	; 0xfa4 <strrev+0x10>
 fb2:	08 95       	ret

00000fb4 <_exit>:
 fb4:	f8 94       	cli

00000fb6 <__stop_program>:
 fb6:	ff cf       	rjmp	.-2      	; 0xfb6 <__stop_program>
