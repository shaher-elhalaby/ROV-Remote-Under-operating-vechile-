
ROV_MASTER_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001758  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  00001758  000017ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000083  008000cc  008000cc  00001858  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001888  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a9b  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013c1  00000000  00000000  00005607  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c4f  00000000  00000000  000069c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006bc  00000000  00000000  00008618  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fab  00000000  00000000  00008cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c92  00000000  00000000  00009c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000b911  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
       4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      1c:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__vector_7>
      20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      54:	fe 04       	cpc	r15, r14
      56:	21 05       	cpc	r18, r1
      58:	01 05       	cpc	r16, r1
      5a:	21 05       	cpc	r18, r1
      5c:	04 05       	cpc	r16, r4
      5e:	21 05       	cpc	r18, r1
      60:	07 05       	cpc	r16, r7
      62:	21 05       	cpc	r18, r1
      64:	0a 05       	cpc	r16, r10
      66:	21 05       	cpc	r18, r1
      68:	0d 05       	cpc	r16, r13
      6a:	21 05       	cpc	r18, r1
      6c:	10 05       	cpc	r17, r0
      6e:	21 05       	cpc	r18, r1
      70:	13 05       	cpc	r17, r3
      72:	21 05       	cpc	r18, r1
      74:	16 05       	cpc	r17, r6
      76:	21 05       	cpc	r18, r1
      78:	19 05       	cpc	r17, r9
      7a:	21 05       	cpc	r18, r1
      7c:	1c 05       	cpc	r17, r12
      7e:	21 05       	cpc	r18, r1
      80:	1f 05       	cpc	r17, r15

00000082 <__ctors_end>:
      82:	11 24       	eor	r1, r1
      84:	1f be       	out	0x3f, r1	; 63
      86:	cf e5       	ldi	r28, 0x5F	; 95
      88:	d8 e0       	ldi	r29, 0x08	; 8
      8a:	de bf       	out	0x3e, r29	; 62
      8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
      8e:	10 e0       	ldi	r17, 0x00	; 0
      90:	a0 e6       	ldi	r26, 0x60	; 96
      92:	b0 e0       	ldi	r27, 0x00	; 0
      94:	e8 e5       	ldi	r30, 0x58	; 88
      96:	f7 e1       	ldi	r31, 0x17	; 23
      98:	02 c0       	rjmp	.+4      	; 0x9e <__do_copy_data+0x10>
      9a:	05 90       	lpm	r0, Z+
      9c:	0d 92       	st	X+, r0
      9e:	ac 3c       	cpi	r26, 0xCC	; 204
      a0:	b1 07       	cpc	r27, r17
      a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0xc>

000000a4 <__do_clear_bss>:
      a4:	21 e0       	ldi	r18, 0x01	; 1
      a6:	ac ec       	ldi	r26, 0xCC	; 204
      a8:	b0 e0       	ldi	r27, 0x00	; 0
      aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
      ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
      ae:	af 34       	cpi	r26, 0x4F	; 79
      b0:	b2 07       	cpc	r27, r18
      b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
      b4:	0e 94 cf 03 	call	0x79e	; 0x79e <main>
      b8:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <_exit>

000000bc <__bad_interrupt>:
      bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <sysInit>:
SetInfo Set;
static uint8 remoteCount=0;
uint8 Screen,RemoteAccess=0;

void sysInit(void)
{
      c0:	ef 92       	push	r14
      c2:	0f 93       	push	r16
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29
	lcd.E=PA2;
      c8:	e5 ed       	ldi	r30, 0xD5	; 213
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	c2 e0       	ldi	r28, 0x02	; 2
      ce:	c4 83       	std	Z+4, r28	; 0x04
	lcd.RS=PA3;
      d0:	d3 e0       	ldi	r29, 0x03	; 3
      d2:	d2 83       	std	Z+2, r29	; 0x02
	lcd.LCD_Control=GPIOA;
      d4:	89 e3       	ldi	r24, 0x39	; 57
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	91 83       	std	Z+1, r25	; 0x01
      da:	80 83       	st	Z, r24
	lcd.LCD_Data=GPIOA;
      dc:	96 83       	std	Z+6, r25	; 0x06
      de:	85 83       	std	Z+5, r24	; 0x05
	LCD_INIT(&lcd);
      e0:	cf 01       	movw	r24, r30
      e2:	0e 94 d2 05 	call	0xba4	; 0xba4 <LCD_INIT>
	keypad.G_IN=GPIOC;
      e6:	ed ed       	ldi	r30, 0xDD	; 221
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	83 e3       	ldi	r24, 0x33	; 51
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	97 83       	std	Z+7, r25	; 0x07
      f0:	86 83       	std	Z+6, r24	; 0x06
	keypad.G_OUT=GPIOB;
      f2:	86 e3       	ldi	r24, 0x36	; 54
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	91 83       	std	Z+1, r25	; 0x01
      f8:	80 83       	st	Z, r24
	keypad.PINs4=PC2;
      fa:	c0 87       	std	Z+8, r28	; 0x08
	keypad.PINs5=PC3;
      fc:	d1 87       	std	Z+9, r29	; 0x09
	keypad.PINs6=PC4;
      fe:	84 e0       	ldi	r24, 0x04	; 4
     100:	82 87       	std	Z+10, r24	; 0x0a
	keypad.PINs7=PC5;
     102:	85 e0       	ldi	r24, 0x05	; 5
     104:	83 87       	std	Z+11, r24	; 0x0b
	
	keypad.PINs0=PB0;
     106:	12 82       	std	Z+2, r1	; 0x02
	keypad.PINs1=PB1;
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	83 83       	std	Z+3, r24	; 0x03
	keypad.PINs2=PB2;
     10c:	c4 83       	std	Z+4, r28	; 0x04
	
	KeyPad_Init(&keypad);
     10e:	cf 01       	movw	r24, r30
     110:	0e 94 fe 03 	call	0x7fc	; 0x7fc <KeyPad_Init>
	USART_Init(9600,_8Bit_9Bit, USART_Async,USART_INT_Disable, PARITY_Disable, STOP1);
     114:	e1 2c       	mov	r14, r1
     116:	00 e0       	ldi	r16, 0x00	; 0
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	40 e0       	ldi	r20, 0x00	; 0
     11c:	66 e0       	ldi	r22, 0x06	; 6
     11e:	80 e8       	ldi	r24, 0x80	; 128
     120:	95 e2       	ldi	r25, 0x25	; 37
     122:	0e 94 05 08 	call	0x100a	; 0x100a <USART_Init>
	SPI_Init(SPI_NO_INT, SPI_Master, SET_R_SPL_F, SPI_FCPU16, SPI_1X);
     126:	21 e0       	ldi	r18, 0x01	; 1
     128:	44 e0       	ldi	r20, 0x04	; 4
     12a:	60 e1       	ldi	r22, 0x10	; 16
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	0e 94 ca 07 	call	0xf94	; 0xf94 <SPI_Init>
	PinDirection(GPIOD,OUTPUT,7);
     132:	47 e0       	ldi	r20, 0x07	; 7
     134:	60 e0       	ldi	r22, 0x00	; 0
     136:	80 e3       	ldi	r24, 0x30	; 48
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 6f 07 	call	0xede	; 0xede <PinDirection>
	PinDirection(GPIOB,OUTPUT,4);
     13e:	44 e0       	ldi	r20, 0x04	; 4
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	86 e3       	ldi	r24, 0x36	; 54
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 6f 07 	call	0xede	; 0xede <PinDirection>
	InitAuthStruct(&Auth,&lcd,&keypad);
     14a:	4d ed       	ldi	r20, 0xDD	; 221
     14c:	50 e0       	ldi	r21, 0x00	; 0
     14e:	65 ed       	ldi	r22, 0xD5	; 213
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	8b ee       	ldi	r24, 0xEB	; 235
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <InitAuthStruct>
	InitSetStruct(&Set,&lcd,&keypad);
     15a:	4d ed       	ldi	r20, 0xDD	; 221
     15c:	50 e0       	ldi	r21, 0x00	; 0
     15e:	65 ed       	ldi	r22, 0xD5	; 213
     160:	70 e0       	ldi	r23, 0x00	; 0
     162:	88 e2       	ldi	r24, 0x28	; 40
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 81 02 	call	0x502	; 0x502 <InitSetStruct>
}
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	0f 91       	pop	r16
     170:	ef 90       	pop	r14
     172:	08 95       	ret

00000174 <KaypadEnable>:
	}
}

void KaypadEnable(void)
{
	keypad.KeyAv = KeypadPhone(&keypad);
     174:	8d ed       	ldi	r24, 0xDD	; 221
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <KeypadPhone>
     17c:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <keypad+0xd>
     180:	08 95       	ret

00000182 <Remote_Access>:
}

void Remote_Access(void)
{
     182:	cf 93       	push	r28
	if (RemoteAccess == 1)
     184:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <RemoteAccess>
     188:	81 30       	cpi	r24, 0x01	; 1
     18a:	79 f5       	brne	.+94     	; 0x1ea <Remote_Access+0x68>
	{
		uint8 data;
		switch(remoteCount)
     18c:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <remoteCount>
     190:	88 23       	and	r24, r24
     192:	19 f0       	breq	.+6      	; 0x19a <Remote_Access+0x18>
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	b9 f0       	breq	.+46     	; 0x1c6 <Remote_Access+0x44>
     198:	28 c0       	rjmp	.+80     	; 0x1ea <Remote_Access+0x68>
		{
			case 0:
				LCD_Clear(&lcd);
     19a:	85 ed       	ldi	r24, 0xD5	; 213
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 cc 06 	call	0xd98	; 0xd98 <LCD_Clear>
				LCD_RowCol(&lcd,1,2);
     1a2:	42 e0       	ldi	r20, 0x02	; 2
     1a4:	61 e0       	ldi	r22, 0x01	; 1
     1a6:	85 ed       	ldi	r24, 0xD5	; 213
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_RowCol>
				LCD_Send_String(&lcd,(uint8*)"Remote Access");
     1ae:	67 e8       	ldi	r22, 0x87	; 135
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	85 ed       	ldi	r24, 0xD5	; 213
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_Send_String>
				remoteCount++;
     1ba:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <remoteCount>
     1be:	8f 5f       	subi	r24, 0xFF	; 255
     1c0:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <remoteCount>
				break;
     1c4:	12 c0       	rjmp	.+36     	; 0x1ea <Remote_Access+0x68>
			case 1:
				data=USART_RecByte();
     1c6:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <USART_RecByte>
     1ca:	c8 2f       	mov	r28, r24
				PinWrite(GPIOB,4,LOW);
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	64 e0       	ldi	r22, 0x04	; 4
     1d0:	86 e3       	ldi	r24, 0x36	; 54
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 a1 07 	call	0xf42	; 0xf42 <PinWrite>
				SPI_Write(data);
     1d8:	8c 2f       	mov	r24, r28
     1da:	0e 94 f5 07 	call	0xfea	; 0xfea <SPI_Write>
				PinWrite(GPIOB,4,HIGH);
     1de:	41 e0       	ldi	r20, 0x01	; 1
     1e0:	64 e0       	ldi	r22, 0x04	; 4
     1e2:	86 e3       	ldi	r24, 0x36	; 54
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 a1 07 	call	0xf42	; 0xf42 <PinWrite>
				break;
		}
	}
}
     1ea:	cf 91       	pop	r28
     1ec:	08 95       	ret

000001ee <Boot>:

void Boot(void)
{
	LCD_RowCol(&lcd,1,1);
     1ee:	41 e0       	ldi	r20, 0x01	; 1
     1f0:	61 e0       	ldi	r22, 0x01	; 1
     1f2:	85 ed       	ldi	r24, 0xD5	; 213
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_RowCol>
	LCD_Send_String(&lcd,(uint8*)"Welcome To ROV");
     1fa:	60 e6       	ldi	r22, 0x60	; 96
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	85 ed       	ldi	r24, 0xD5	; 213
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_Send_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     206:	2f e9       	ldi	r18, 0x9F	; 159
     208:	86 e8       	ldi	r24, 0x86	; 134
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	21 50       	subi	r18, 0x01	; 1
     20e:	80 40       	sbci	r24, 0x00	; 0
     210:	90 40       	sbci	r25, 0x00	; 0
     212:	e1 f7       	brne	.-8      	; 0x20c <Boot+0x1e>
     214:	00 c0       	rjmp	.+0      	; 0x216 <Boot+0x28>
     216:	00 00       	nop
	_delay_ms(500);
	LCD_Clear(&lcd);
     218:	85 ed       	ldi	r24, 0xD5	; 213
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 cc 06 	call	0xd98	; 0xd98 <LCD_Clear>
	if(EEPROM_Read(firsttimeAddress)==55)
     220:	88 e0       	ldi	r24, 0x08	; 8
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 10 07 	call	0xe20	; 0xe20 <EEPROM_Read>
     228:	87 33       	cpi	r24, 0x37	; 55
     22a:	21 f4       	brne	.+8      	; 0x234 <Boot+0x46>
	{
		Screen =First;
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <Screen>
     232:	08 95       	ret
	}
	else
	{
		Screen =SetUp;
     234:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <Screen>
     238:	08 95       	ret

0000023a <FirstScreen>:
	}
}
void FirstScreen(void)
{
	static uint8 FirstCount=0;
	switch(FirstCount)
     23a:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <FirstCount.2472>
     23e:	88 23       	and	r24, r24
     240:	19 f0       	breq	.+6      	; 0x248 <FirstScreen+0xe>
     242:	81 30       	cpi	r24, 0x01	; 1
     244:	19 f1       	breq	.+70     	; 0x28c <FirstScreen+0x52>
     246:	08 95       	ret
	{
		case 0 :
			LCD_Clear(&lcd);
     248:	85 ed       	ldi	r24, 0xD5	; 213
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 cc 06 	call	0xd98	; 0xd98 <LCD_Clear>
			LCD_RowCol(&lcd,0,6);
     250:	46 e0       	ldi	r20, 0x06	; 6
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	85 ed       	ldi	r24, 0xD5	; 213
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_RowCol>
			LCD_Send_String(&lcd,(uint8*)" ROV ");
     25c:	6f e6       	ldi	r22, 0x6F	; 111
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	85 ed       	ldi	r24, 0xD5	; 213
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_Send_String>
			LCD_RowCol(&lcd,1,0);
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	85 ed       	ldi	r24, 0xD5	; 213
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_RowCol>
			LCD_Send_String(&lcd,(uint8*)"   Enter Pass  ");
     274:	65 e7       	ldi	r22, 0x75	; 117
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	85 ed       	ldi	r24, 0xD5	; 213
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_Send_String>
			FirstCount++;
     280:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <FirstCount.2472>
     284:	8f 5f       	subi	r24, 0xFF	; 255
     286:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <FirstCount.2472>
			break;
     28a:	08 95       	ret
		case 1:
			if (Authenticate(&Auth))
     28c:	8b ee       	ldi	r24, 0xEB	; 235
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 fd 01 	call	0x3fa	; 0x3fa <Authenticate>
     294:	88 23       	and	r24, r24
     296:	29 f0       	breq	.+10     	; 0x2a2 <FirstScreen+0x68>
			{
				Screen = Second;
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <Screen>
				FirstCount =0;
     29e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <FirstCount.2472>
     2a2:	08 95       	ret

000002a4 <SecondScreen>:
	}
}
void SecondScreen(void)
{
	static uint8 SecondCount=0;
	switch(SecondCount)
     2a4:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
     2a8:	88 23       	and	r24, r24
     2aa:	19 f0       	breq	.+6      	; 0x2b2 <SecondScreen+0xe>
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	79 f1       	breq	.+94     	; 0x30e <SecondScreen+0x6a>
     2b0:	08 95       	ret
	{
		case 0:
			LCD_Clear(&lcd);
     2b2:	85 ed       	ldi	r24, 0xD5	; 213
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 cc 06 	call	0xd98	; 0xd98 <LCD_Clear>
			LCD_RowCol(&lcd,0,0);
     2ba:	40 e0       	ldi	r20, 0x00	; 0
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	85 ed       	ldi	r24, 0xD5	; 213
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_RowCol>
			LCD_Send_String(&lcd,(uint8*)"1.Remote Access");
     2c6:	65 e8       	ldi	r22, 0x85	; 133
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	85 ed       	ldi	r24, 0xD5	; 213
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_Send_String>
			LCD_RowCol(&lcd,1,0);
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	61 e0       	ldi	r22, 0x01	; 1
     2d6:	85 ed       	ldi	r24, 0xD5	; 213
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_RowCol>
			LCD_Send_String(&lcd,(uint8*)"2.change Pass");
     2de:	65 e9       	ldi	r22, 0x95	; 149
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	85 ed       	ldi	r24, 0xD5	; 213
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_Send_String>
			LCD_RowCol(&lcd,2,0);
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	62 e0       	ldi	r22, 0x02	; 2
     2ee:	85 ed       	ldi	r24, 0xD5	; 213
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_RowCol>
			LCD_Send_String(&lcd,(uint8*)"3.log out");
     2f6:	63 ea       	ldi	r22, 0xA3	; 163
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	85 ed       	ldi	r24, 0xD5	; 213
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_Send_String>
			SecondCount++;
     302:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
     306:	8f 5f       	subi	r24, 0xFF	; 255
     308:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__data_end>
			break;
     30c:	08 95       	ret
		case 1:
		if (keypad.KeyAv)
     30e:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <keypad+0xd>
     312:	88 23       	and	r24, r24
     314:	c1 f0       	breq	.+48     	; 0x346 <SecondScreen+0xa2>
		{
			switch(keypad.KeyOut)
     316:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <keypad+0xc>
     31a:	82 33       	cpi	r24, 0x32	; 50
     31c:	51 f0       	breq	.+20     	; 0x332 <SecondScreen+0x8e>
     31e:	83 33       	cpi	r24, 0x33	; 51
     320:	69 f0       	breq	.+26     	; 0x33c <SecondScreen+0x98>
     322:	81 33       	cpi	r24, 0x31	; 49
     324:	81 f4       	brne	.+32     	; 0x346 <SecondScreen+0xa2>
			{
				case '1':
					Screen =Remote;
     326:	84 e0       	ldi	r24, 0x04	; 4
     328:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <Screen>
					SecondCount=0;
     32c:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end>
					break;
     330:	08 95       	ret
				case '2':
					Screen=SetUp;
     332:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <Screen>
					SecondCount=0;
     336:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end>
					break;
     33a:	08 95       	ret
				case '3':
					Screen =First;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <Screen>
					SecondCount=0;
     342:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end>
     346:	08 95       	ret

00000348 <sysUpdate>:
	InitAuthStruct(&Auth,&lcd,&keypad);
	InitSetStruct(&Set,&lcd,&keypad);
}
void sysUpdate(void)
{
	switch(Screen)
     348:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <Screen>
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	a9 f0       	breq	.+42     	; 0x37a <sysUpdate+0x32>
     350:	28 f0       	brcs	.+10     	; 0x35c <sysUpdate+0x14>
     352:	82 30       	cpi	r24, 0x02	; 2
     354:	a9 f0       	breq	.+42     	; 0x380 <sysUpdate+0x38>
     356:	84 30       	cpi	r24, 0x04	; 4
     358:	b1 f0       	breq	.+44     	; 0x386 <sysUpdate+0x3e>
     35a:	08 95       	ret
	{
		case SetUp:
			if(SetupMode(&Set))
     35c:	88 e2       	ldi	r24, 0x28	; 40
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <SetupMode>
     364:	88 23       	and	r24, r24
     366:	e9 f0       	breq	.+58     	; 0x3a2 <sysUpdate+0x5a>
			{
				Screen =First;
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <Screen>
				EEPROM_Write(firsttimeAddress,55);
     36e:	67 e3       	ldi	r22, 0x37	; 55
     370:	88 e0       	ldi	r24, 0x08	; 8
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 08 07 	call	0xe10	; 0xe10 <EEPROM_Write>
     378:	08 95       	ret
			}
			break;
		case First:
			FirstScreen();
     37a:	0e 94 1d 01 	call	0x23a	; 0x23a <FirstScreen>
			break;
     37e:	08 95       	ret
		case Second:
			SecondScreen();
     380:	0e 94 52 01 	call	0x2a4	; 0x2a4 <SecondScreen>
			break;
     384:	08 95       	ret
		case Remote:
			RemoteAccess=1;
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <RemoteAccess>
			if (keypad.KeyOut=='*')
     38c:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <keypad+0xc>
     390:	8a 32       	cpi	r24, 0x2A	; 42
     392:	39 f4       	brne	.+14     	; 0x3a2 <sysUpdate+0x5a>
			{
				Screen =Second;
     394:	82 e0       	ldi	r24, 0x02	; 2
     396:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <Screen>
				RemoteAccess=0;
     39a:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <RemoteAccess>
				remoteCount=0;
     39e:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <remoteCount>
     3a2:	08 95       	ret

000003a4 <InitAuthStruct>:
#include <string.h>

uint8 OneTimeAuth=0;

void InitAuthStruct(AuthInfo *Auth,LCD_CONFIG *lcd,KeypadInfo *Key)
{
     3a4:	fc 01       	movw	r30, r24
	Auth->CountScreen=0;
     3a6:	10 a2       	std	Z+32, r1	; 0x20
	Auth->Key=Key;
     3a8:	52 a3       	std	Z+34, r21	; 0x22
     3aa:	41 a3       	std	Z+33, r20	; 0x21
	Auth->lcd=lcd;
     3ac:	74 a3       	std	Z+36, r23	; 0x24
     3ae:	63 a3       	std	Z+35, r22	; 0x23
     3b0:	08 95       	ret

000003b2 <Wrong>:
	}
	return 0;
}

void Wrong(LCD_CONFIG *lcd)
{
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	ec 01       	movw	r28, r24
	static uint8 WrongCount = 0;

		LCD_Clear(lcd);
     3b8:	0e 94 cc 06 	call	0xd98	; 0xd98 <LCD_Clear>
		LCD_RowCol(lcd,1,5);
     3bc:	45 e0       	ldi	r20, 0x05	; 5
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	ce 01       	movw	r24, r28
     3c2:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_RowCol>
		LCD_Send_String(lcd,(uint8*)"Wrong");
     3c6:	6d ea       	ldi	r22, 0xAD	; 173
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	ce 01       	movw	r24, r28
     3cc:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_Send_String>
		WrongCount++;
     3d0:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <WrongCount.2583>
     3d4:	8f 5f       	subi	r24, 0xFF	; 255
     3d6:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <WrongCount.2583>
		LCD_RowCol(lcd,1,12);
     3da:	4c e0       	ldi	r20, 0x0C	; 12
     3dc:	61 e0       	ldi	r22, 0x01	; 1
     3de:	ce 01       	movw	r24, r28
     3e0:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_RowCol>
		LCD_DisplayInt(lcd,WrongCount);
     3e4:	40 91 d0 00 	lds	r20, 0x00D0	; 0x8000d0 <WrongCount.2583>
     3e8:	50 e0       	ldi	r21, 0x00	; 0
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	ce 01       	movw	r24, r28
     3f0:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_DisplayInt>
}
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <Authenticate>:
	Auth->CountScreen=0;
	Auth->Key=Key;
	Auth->lcd=lcd;
}
uint8 Authenticate(AuthInfo *Auth)
{
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	8c 01       	movw	r16, r24
	uint8 show;
	if (OneTimeAuth==0)
     402:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <OneTimeAuth>
     406:	81 11       	cpse	r24, r1
     408:	0c c0       	rjmp	.+24     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	{
		EEPROM_Read_Word(PassAddress,Auth->passStored);
     40a:	b8 01       	movw	r22, r16
     40c:	60 5f       	subi	r22, 0xF0	; 240
     40e:	7f 4f       	sbci	r23, 0xFF	; 255
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 17 07 	call	0xe2e	; 0xe2e <EEPROM_Read_Word>
		OneTimeAuth++;
     418:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <OneTimeAuth>
     41c:	8f 5f       	subi	r24, 0xFF	; 255
     41e:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <OneTimeAuth>
	}
	if (Auth->Key->KeyAv== 1)
     422:	d8 01       	movw	r26, r16
     424:	91 96       	adiw	r26, 0x21	; 33
     426:	ed 91       	ld	r30, X+
     428:	fc 91       	ld	r31, X
     42a:	92 97       	sbiw	r26, 0x22	; 34
     42c:	c5 85       	ldd	r28, Z+13	; 0x0d
     42e:	c1 30       	cpi	r28, 0x01	; 1
     430:	09 f0       	breq	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     432:	61 c0       	rjmp	.+194    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
	{
		if (Auth->Key->KeyOut == '*')
     434:	84 85       	ldd	r24, Z+12	; 0x0c
     436:	8a 32       	cpi	r24, 0x2A	; 42
     438:	f1 f4       	brne	.+60     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
		{
			Auth->CountScreen --;
     43a:	90 96       	adiw	r26, 0x20	; 32
     43c:	8c 91       	ld	r24, X
     43e:	90 97       	sbiw	r26, 0x20	; 32
     440:	81 50       	subi	r24, 0x01	; 1
			if (Auth->CountScreen <=0)
     442:	18 16       	cp	r1, r24
     444:	1c f4       	brge	.+6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	}
	if (Auth->Key->KeyAv== 1)
	{
		if (Auth->Key->KeyOut == '*')
		{
			Auth->CountScreen --;
     446:	90 96       	adiw	r26, 0x20	; 32
     448:	8c 93       	st	X, r24
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			if (Auth->CountScreen <=0)
			{
				Auth->CountScreen =0;
     44c:	f8 01       	movw	r30, r16
     44e:	10 a2       	std	Z+32, r1	; 0x20
			}
			show = ' ';
			LCD_RowCol(Auth->lcd,2,Auth->CountScreen);
     450:	d8 01       	movw	r26, r16
     452:	90 96       	adiw	r26, 0x20	; 32
     454:	4c 91       	ld	r20, X
     456:	90 97       	sbiw	r26, 0x20	; 32
     458:	62 e0       	ldi	r22, 0x02	; 2
     45a:	93 96       	adiw	r26, 0x23	; 35
     45c:	8d 91       	ld	r24, X+
     45e:	9c 91       	ld	r25, X
     460:	94 97       	sbiw	r26, 0x24	; 36
     462:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_RowCol>
			LCD_Send_Char(Auth->lcd,show);
     466:	60 e2       	ldi	r22, 0x20	; 32
     468:	f8 01       	movw	r30, r16
     46a:	83 a1       	ldd	r24, Z+35	; 0x23
     46c:	94 a1       	ldd	r25, Z+36	; 0x24
     46e:	0e 94 0b 06 	call	0xc16	; 0xc16 <LCD_Send_Char>
			LCD_RowCol(Auth->lcd,2,Auth->CountScreen);
			LCD_Send_Char(Auth->lcd,show);
			Auth->CountScreen++;
		}
	}
	return 0;
     472:	c0 e0       	ldi	r28, 0x00	; 0
     474:	41 c0       	rjmp	.+130    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			}
			show = ' ';
			LCD_RowCol(Auth->lcd,2,Auth->CountScreen);
			LCD_Send_Char(Auth->lcd,show);
		}
		else if (Auth->Key->KeyOut == '#')
     476:	83 32       	cpi	r24, 0x23	; 35
     478:	01 f5       	brne	.+64     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		{
			Auth->passEntered[Auth->CountScreen]='\0';
     47a:	d8 01       	movw	r26, r16
     47c:	90 96       	adiw	r26, 0x20	; 32
     47e:	8c 91       	ld	r24, X
     480:	f8 01       	movw	r30, r16
     482:	e8 0f       	add	r30, r24
     484:	f1 1d       	adc	r31, r1
     486:	87 fd       	sbrc	r24, 7
     488:	fa 95       	dec	r31
     48a:	10 82       	st	Z, r1
			if (strcmp((char*)Auth->passEntered,(char*)Auth->passStored)==0)
     48c:	b8 01       	movw	r22, r16
     48e:	60 5f       	subi	r22, 0xF0	; 240
     490:	7f 4f       	sbci	r23, 0xFF	; 255
     492:	c8 01       	movw	r24, r16
     494:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <strcmp>
     498:	89 2b       	or	r24, r25
     49a:	19 f4       	brne	.+6      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
			{
				Auth->CountScreen =0;
     49c:	f8 01       	movw	r30, r16
     49e:	10 a2       	std	Z+32, r1	; 0x20
				return 1;
     4a0:	2b c0       	rjmp	.+86     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			}
			else
			{
				Auth->CountScreen =0;
     4a2:	d8 01       	movw	r26, r16
     4a4:	90 96       	adiw	r26, 0x20	; 32
     4a6:	1c 92       	st	X, r1
     4a8:	90 97       	sbiw	r26, 0x20	; 32
				Wrong(Auth->lcd);
     4aa:	93 96       	adiw	r26, 0x23	; 35
     4ac:	8d 91       	ld	r24, X+
     4ae:	9c 91       	ld	r25, X
     4b0:	94 97       	sbiw	r26, 0x24	; 36
     4b2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <Wrong>
				return 0;
     4b6:	c0 e0       	ldi	r28, 0x00	; 0
     4b8:	1f c0       	rjmp	.+62     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			}
		}
		else if (Auth->Key->KeyOut != '*' && Auth->Key->KeyOut !='#')
		{
			show = '*';
			Auth->passEntered[Auth->CountScreen]=Auth->Key->KeyOut;
     4ba:	f8 01       	movw	r30, r16
     4bc:	40 a1       	ldd	r20, Z+32	; 0x20
     4be:	e4 0f       	add	r30, r20
     4c0:	f1 1d       	adc	r31, r1
     4c2:	47 fd       	sbrc	r20, 7
     4c4:	fa 95       	dec	r31
     4c6:	80 83       	st	Z, r24
			LCD_RowCol(Auth->lcd,2,Auth->CountScreen);
     4c8:	62 e0       	ldi	r22, 0x02	; 2
     4ca:	d8 01       	movw	r26, r16
     4cc:	93 96       	adiw	r26, 0x23	; 35
     4ce:	8d 91       	ld	r24, X+
     4d0:	9c 91       	ld	r25, X
     4d2:	94 97       	sbiw	r26, 0x24	; 36
     4d4:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_RowCol>
			LCD_Send_Char(Auth->lcd,show);
     4d8:	6a e2       	ldi	r22, 0x2A	; 42
     4da:	f8 01       	movw	r30, r16
     4dc:	83 a1       	ldd	r24, Z+35	; 0x23
     4de:	94 a1       	ldd	r25, Z+36	; 0x24
     4e0:	0e 94 0b 06 	call	0xc16	; 0xc16 <LCD_Send_Char>
			Auth->CountScreen++;
     4e4:	d8 01       	movw	r26, r16
     4e6:	90 96       	adiw	r26, 0x20	; 32
     4e8:	8c 91       	ld	r24, X
     4ea:	90 97       	sbiw	r26, 0x20	; 32
     4ec:	8f 5f       	subi	r24, 0xFF	; 255
     4ee:	90 96       	adiw	r26, 0x20	; 32
     4f0:	8c 93       	st	X, r24
		}
	}
	return 0;
     4f2:	c0 e0       	ldi	r28, 0x00	; 0
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4f6:	c0 e0       	ldi	r28, 0x00	; 0
}
     4f8:	8c 2f       	mov	r24, r28
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	08 95       	ret

00000502 <InitSetStruct>:
		LCD_RowCol(lcd,1,12);
		LCD_DisplayInt(lcd,WrongCount);
}

void InitSetStruct(SetInfo *Set,LCD_CONFIG *lcd,KeypadInfo *Key)
{
     502:	fc 01       	movw	r30, r24
	Set->PassCfmCount=0;
     504:	12 a2       	std	Z+34, r1	; 0x22
	Set->PassSetCount=0;
     506:	11 a2       	std	Z+33, r1	; 0x21
	Set->SetCount=0;
     508:	10 a2       	std	Z+32, r1	; 0x20
	Set->Key=Key;
     50a:	54 a3       	std	Z+36, r21	; 0x24
     50c:	43 a3       	std	Z+35, r20	; 0x23
	Set->lcd=lcd;
     50e:	76 a3       	std	Z+38, r23	; 0x26
     510:	65 a3       	std	Z+37, r22	; 0x25
     512:	08 95       	ret

00000514 <SetPass>:
	}
	return 0;
}

uint8 SetPass(SetInfo *Set)
{
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
		uint8 show;
		if (Set->Key->KeyAv == 1)
     51a:	dc 01       	movw	r26, r24
     51c:	93 96       	adiw	r26, 0x23	; 35
     51e:	ed 91       	ld	r30, X+
     520:	fc 91       	ld	r31, X
     522:	94 97       	sbiw	r26, 0x24	; 36
     524:	c5 85       	ldd	r28, Z+13	; 0x0d
     526:	c1 30       	cpi	r28, 0x01	; 1
     528:	09 f0       	breq	.+2      	; 0x52c <SetPass+0x18>
     52a:	51 c0       	rjmp	.+162    	; 0x5ce <SetPass+0xba>
     52c:	8c 01       	movw	r16, r24
		{
			if (Set->Key->KeyOut == '*')
     52e:	84 85       	ldd	r24, Z+12	; 0x0c
     530:	8a 32       	cpi	r24, 0x2A	; 42
     532:	09 f0       	breq	.+2      	; 0x536 <SetPass+0x22>
     534:	50 c0       	rjmp	.+160    	; 0x5d6 <SetPass+0xc2>
			{
				Set->PassSetCount --;
     536:	fd 01       	movw	r30, r26
     538:	81 a1       	ldd	r24, Z+33	; 0x21
     53a:	81 50       	subi	r24, 0x01	; 1
				if (Set->PassSetCount <=0)
     53c:	18 16       	cp	r1, r24
     53e:	14 f4       	brge	.+4      	; 0x544 <SetPass+0x30>
		uint8 show;
		if (Set->Key->KeyAv == 1)
		{
			if (Set->Key->KeyOut == '*')
			{
				Set->PassSetCount --;
     540:	81 a3       	std	Z+33, r24	; 0x21
     542:	02 c0       	rjmp	.+4      	; 0x548 <SetPass+0x34>
				if (Set->PassSetCount <=0)
				{
					Set->PassSetCount =0;
     544:	91 96       	adiw	r26, 0x21	; 33
     546:	1c 92       	st	X, r1
				}
				show = ' ';
				LCD_RowCol(Set->lcd,1,Set->PassSetCount);
     548:	f8 01       	movw	r30, r16
     54a:	41 a1       	ldd	r20, Z+33	; 0x21
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	85 a1       	ldd	r24, Z+37	; 0x25
     550:	96 a1       	ldd	r25, Z+38	; 0x26
     552:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_RowCol>
				LCD_Send_Char(Set->lcd,show);
     556:	60 e2       	ldi	r22, 0x20	; 32
     558:	d8 01       	movw	r26, r16
     55a:	95 96       	adiw	r26, 0x25	; 37
     55c:	8d 91       	ld	r24, X+
     55e:	9c 91       	ld	r25, X
     560:	96 97       	sbiw	r26, 0x26	; 38
     562:	0e 94 0b 06 	call	0xc16	; 0xc16 <LCD_Send_Char>
			}
			if (Set->Key->KeyOut == '#')
     566:	d8 01       	movw	r26, r16
     568:	93 96       	adiw	r26, 0x23	; 35
     56a:	ed 91       	ld	r30, X+
     56c:	fc 91       	ld	r31, X
     56e:	94 97       	sbiw	r26, 0x24	; 36
     570:	84 85       	ldd	r24, Z+12	; 0x0c
     572:	83 32       	cpi	r24, 0x23	; 35
     574:	61 f4       	brne	.+24     	; 0x58e <SetPass+0x7a>
			{
				Set->PassSetCount ++;
				Set->passSetted[Set->PassSetCount]='\0';
     576:	f8 01       	movw	r30, r16
     578:	81 a1       	ldd	r24, Z+33	; 0x21
     57a:	8f 5f       	subi	r24, 0xFF	; 255
     57c:	e8 0f       	add	r30, r24
     57e:	f1 1d       	adc	r31, r1
     580:	87 fd       	sbrc	r24, 7
     582:	fa 95       	dec	r31
     584:	10 82       	st	Z, r1
				Set->PassSetCount=0;
     586:	d8 01       	movw	r26, r16
     588:	91 96       	adiw	r26, 0x21	; 33
     58a:	1c 92       	st	X, r1
					return 1;
     58c:	27 c0       	rjmp	.+78     	; 0x5dc <SetPass+0xc8>
			}
			if (Set->Key->KeyOut != '*' && Set->Key->KeyOut !='#')
     58e:	8a 32       	cpi	r24, 0x2A	; 42
     590:	01 f1       	breq	.+64     	; 0x5d2 <SetPass+0xbe>
			{
				show = '*';
				Set->passSetted[Set->PassSetCount]=Set->Key->KeyOut;
     592:	f8 01       	movw	r30, r16
     594:	41 a1       	ldd	r20, Z+33	; 0x21
     596:	e4 0f       	add	r30, r20
     598:	f1 1d       	adc	r31, r1
     59a:	47 fd       	sbrc	r20, 7
     59c:	fa 95       	dec	r31
     59e:	80 83       	st	Z, r24
				LCD_RowCol(Set->lcd,1,Set->PassSetCount);
     5a0:	61 e0       	ldi	r22, 0x01	; 1
     5a2:	d8 01       	movw	r26, r16
     5a4:	95 96       	adiw	r26, 0x25	; 37
     5a6:	8d 91       	ld	r24, X+
     5a8:	9c 91       	ld	r25, X
     5aa:	96 97       	sbiw	r26, 0x26	; 38
     5ac:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_RowCol>
				LCD_Send_Char(Set->lcd,show);
     5b0:	6a e2       	ldi	r22, 0x2A	; 42
     5b2:	f8 01       	movw	r30, r16
     5b4:	85 a1       	ldd	r24, Z+37	; 0x25
     5b6:	96 a1       	ldd	r25, Z+38	; 0x26
     5b8:	0e 94 0b 06 	call	0xc16	; 0xc16 <LCD_Send_Char>
				Set->PassSetCount++;
     5bc:	d8 01       	movw	r26, r16
     5be:	91 96       	adiw	r26, 0x21	; 33
     5c0:	8c 91       	ld	r24, X
     5c2:	91 97       	sbiw	r26, 0x21	; 33
     5c4:	8f 5f       	subi	r24, 0xFF	; 255
     5c6:	91 96       	adiw	r26, 0x21	; 33
     5c8:	8c 93       	st	X, r24
			}
		}
		return 0;
     5ca:	c0 e0       	ldi	r28, 0x00	; 0
     5cc:	07 c0       	rjmp	.+14     	; 0x5dc <SetPass+0xc8>
     5ce:	c0 e0       	ldi	r28, 0x00	; 0
     5d0:	05 c0       	rjmp	.+10     	; 0x5dc <SetPass+0xc8>
     5d2:	c0 e0       	ldi	r28, 0x00	; 0
     5d4:	03 c0       	rjmp	.+6      	; 0x5dc <SetPass+0xc8>
				}
				show = ' ';
				LCD_RowCol(Set->lcd,1,Set->PassSetCount);
				LCD_Send_Char(Set->lcd,show);
			}
			if (Set->Key->KeyOut == '#')
     5d6:	83 32       	cpi	r24, 0x23	; 35
     5d8:	e1 f6       	brne	.-72     	; 0x592 <SetPass+0x7e>
     5da:	cd cf       	rjmp	.-102    	; 0x576 <SetPass+0x62>
				LCD_Send_Char(Set->lcd,show);
				Set->PassSetCount++;
			}
		}
		return 0;
}
     5dc:	8c 2f       	mov	r24, r28
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	08 95       	ret

000005e6 <cfmPass>:
uint8 cfmPass(SetInfo *Set)
{
     5e6:	0f 93       	push	r16
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
	uint8 show;
	if (Set->Key->KeyAv == 1)
     5ec:	dc 01       	movw	r26, r24
     5ee:	93 96       	adiw	r26, 0x23	; 35
     5f0:	ed 91       	ld	r30, X+
     5f2:	fc 91       	ld	r31, X
     5f4:	94 97       	sbiw	r26, 0x24	; 36
     5f6:	c5 85       	ldd	r28, Z+13	; 0x0d
     5f8:	c1 30       	cpi	r28, 0x01	; 1
     5fa:	09 f0       	breq	.+2      	; 0x5fe <cfmPass+0x18>
     5fc:	51 c0       	rjmp	.+162    	; 0x6a0 <cfmPass+0xba>
     5fe:	8c 01       	movw	r16, r24
	{
		if (Set->Key->KeyOut == '*')
     600:	84 85       	ldd	r24, Z+12	; 0x0c
     602:	8a 32       	cpi	r24, 0x2A	; 42
     604:	09 f0       	breq	.+2      	; 0x608 <cfmPass+0x22>
     606:	50 c0       	rjmp	.+160    	; 0x6a8 <cfmPass+0xc2>
		{
			Set->PassCfmCount --;
     608:	fd 01       	movw	r30, r26
     60a:	82 a1       	ldd	r24, Z+34	; 0x22
     60c:	81 50       	subi	r24, 0x01	; 1
			if (Set->PassCfmCount <=0)
     60e:	18 16       	cp	r1, r24
     610:	14 f4       	brge	.+4      	; 0x616 <cfmPass+0x30>
	uint8 show;
	if (Set->Key->KeyAv == 1)
	{
		if (Set->Key->KeyOut == '*')
		{
			Set->PassCfmCount --;
     612:	82 a3       	std	Z+34, r24	; 0x22
     614:	02 c0       	rjmp	.+4      	; 0x61a <cfmPass+0x34>
			if (Set->PassCfmCount <=0)
			{
				Set->PassCfmCount =0;
     616:	92 96       	adiw	r26, 0x22	; 34
     618:	1c 92       	st	X, r1
			}
			show = ' ';
			LCD_RowCol(Set->lcd,3,Set->PassCfmCount);
     61a:	f8 01       	movw	r30, r16
     61c:	42 a1       	ldd	r20, Z+34	; 0x22
     61e:	63 e0       	ldi	r22, 0x03	; 3
     620:	85 a1       	ldd	r24, Z+37	; 0x25
     622:	96 a1       	ldd	r25, Z+38	; 0x26
     624:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_RowCol>
			LCD_Send_Char(Set->lcd,show);
     628:	60 e2       	ldi	r22, 0x20	; 32
     62a:	d8 01       	movw	r26, r16
     62c:	95 96       	adiw	r26, 0x25	; 37
     62e:	8d 91       	ld	r24, X+
     630:	9c 91       	ld	r25, X
     632:	96 97       	sbiw	r26, 0x26	; 38
     634:	0e 94 0b 06 	call	0xc16	; 0xc16 <LCD_Send_Char>
		}
		if (Set->Key->KeyOut == '#')
     638:	d8 01       	movw	r26, r16
     63a:	93 96       	adiw	r26, 0x23	; 35
     63c:	ed 91       	ld	r30, X+
     63e:	fc 91       	ld	r31, X
     640:	94 97       	sbiw	r26, 0x24	; 36
     642:	84 85       	ldd	r24, Z+12	; 0x0c
     644:	83 32       	cpi	r24, 0x23	; 35
     646:	61 f4       	brne	.+24     	; 0x660 <cfmPass+0x7a>
		{
			Set->PassCfmCount ++;
			Set->passCfmed[Set->PassCfmCount]='\0';
     648:	f8 01       	movw	r30, r16
     64a:	82 a1       	ldd	r24, Z+34	; 0x22
     64c:	8f 5f       	subi	r24, 0xFF	; 255
     64e:	e8 0f       	add	r30, r24
     650:	f1 1d       	adc	r31, r1
     652:	87 fd       	sbrc	r24, 7
     654:	fa 95       	dec	r31
     656:	10 8a       	std	Z+16, r1	; 0x10
			Set->PassCfmCount=0;
     658:	d8 01       	movw	r26, r16
     65a:	92 96       	adiw	r26, 0x22	; 34
     65c:	1c 92       	st	X, r1
			return 1;
     65e:	27 c0       	rjmp	.+78     	; 0x6ae <cfmPass+0xc8>
		}
		if (Set->Key->KeyOut != '*' && Set->Key->KeyOut !='#')
     660:	8a 32       	cpi	r24, 0x2A	; 42
     662:	01 f1       	breq	.+64     	; 0x6a4 <cfmPass+0xbe>
		{
			show = '*';
			Set->passCfmed[Set->PassCfmCount]=Set->Key->KeyOut;
     664:	f8 01       	movw	r30, r16
     666:	42 a1       	ldd	r20, Z+34	; 0x22
     668:	e4 0f       	add	r30, r20
     66a:	f1 1d       	adc	r31, r1
     66c:	47 fd       	sbrc	r20, 7
     66e:	fa 95       	dec	r31
     670:	80 8b       	std	Z+16, r24	; 0x10
			LCD_RowCol(Set->lcd,3,Set->PassCfmCount);
     672:	63 e0       	ldi	r22, 0x03	; 3
     674:	d8 01       	movw	r26, r16
     676:	95 96       	adiw	r26, 0x25	; 37
     678:	8d 91       	ld	r24, X+
     67a:	9c 91       	ld	r25, X
     67c:	96 97       	sbiw	r26, 0x26	; 38
     67e:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_RowCol>
			LCD_Send_Char(Set->lcd,show);
     682:	6a e2       	ldi	r22, 0x2A	; 42
     684:	f8 01       	movw	r30, r16
     686:	85 a1       	ldd	r24, Z+37	; 0x25
     688:	96 a1       	ldd	r25, Z+38	; 0x26
     68a:	0e 94 0b 06 	call	0xc16	; 0xc16 <LCD_Send_Char>
			Set->PassCfmCount++;
     68e:	d8 01       	movw	r26, r16
     690:	92 96       	adiw	r26, 0x22	; 34
     692:	8c 91       	ld	r24, X
     694:	92 97       	sbiw	r26, 0x22	; 34
     696:	8f 5f       	subi	r24, 0xFF	; 255
     698:	92 96       	adiw	r26, 0x22	; 34
     69a:	8c 93       	st	X, r24
		}
	}
	return 0;
     69c:	c0 e0       	ldi	r28, 0x00	; 0
     69e:	07 c0       	rjmp	.+14     	; 0x6ae <cfmPass+0xc8>
     6a0:	c0 e0       	ldi	r28, 0x00	; 0
     6a2:	05 c0       	rjmp	.+10     	; 0x6ae <cfmPass+0xc8>
     6a4:	c0 e0       	ldi	r28, 0x00	; 0
     6a6:	03 c0       	rjmp	.+6      	; 0x6ae <cfmPass+0xc8>
			}
			show = ' ';
			LCD_RowCol(Set->lcd,3,Set->PassCfmCount);
			LCD_Send_Char(Set->lcd,show);
		}
		if (Set->Key->KeyOut == '#')
     6a8:	83 32       	cpi	r24, 0x23	; 35
     6aa:	e1 f6       	brne	.-72     	; 0x664 <cfmPass+0x7e>
     6ac:	cd cf       	rjmp	.-102    	; 0x648 <cfmPass+0x62>
			LCD_Send_Char(Set->lcd,show);
			Set->PassCfmCount++;
		}
	}
	return 0;
}
     6ae:	8c 2f       	mov	r24, r28
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	08 95       	ret

000006b8 <SetupMode>:
	Set->SetCount=0;
	Set->Key=Key;
	Set->lcd=lcd;
}
uint8 SetupMode(SetInfo *Set)
{
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	8c 01       	movw	r16, r24
	switch(Set->SetCount)
     6c2:	fc 01       	movw	r30, r24
     6c4:	c0 a1       	ldd	r28, Z+32	; 0x20
     6c6:	c1 30       	cpi	r28, 0x01	; 1
     6c8:	59 f1       	breq	.+86     	; 0x720 <SetupMode+0x68>
     6ca:	28 f0       	brcs	.+10     	; 0x6d6 <SetupMode+0x1e>
     6cc:	c2 30       	cpi	r28, 0x02	; 2
     6ce:	91 f1       	breq	.+100    	; 0x734 <SetupMode+0x7c>
     6d0:	c3 30       	cpi	r28, 0x03	; 3
     6d2:	d1 f1       	breq	.+116    	; 0x748 <SetupMode+0x90>
     6d4:	5d c0       	rjmp	.+186    	; 0x790 <SetupMode+0xd8>
	{
		case 0:
			LCD_Clear(Set->lcd);
     6d6:	fc 01       	movw	r30, r24
     6d8:	85 a1       	ldd	r24, Z+37	; 0x25
     6da:	96 a1       	ldd	r25, Z+38	; 0x26
     6dc:	0e 94 cc 06 	call	0xd98	; 0xd98 <LCD_Clear>
			LCD_RowCol(Set->lcd,0,3);
     6e0:	43 e0       	ldi	r20, 0x03	; 3
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	f8 01       	movw	r30, r16
     6e6:	85 a1       	ldd	r24, Z+37	; 0x25
     6e8:	96 a1       	ldd	r25, Z+38	; 0x26
     6ea:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_RowCol>
			LCD_Send_String(Set->lcd,(uint8*)"Enter Pass");
     6ee:	63 eb       	ldi	r22, 0xB3	; 179
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	f8 01       	movw	r30, r16
     6f4:	85 a1       	ldd	r24, Z+37	; 0x25
     6f6:	96 a1       	ldd	r25, Z+38	; 0x26
     6f8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_Send_String>
			LCD_RowCol(Set->lcd,2,3);
     6fc:	43 e0       	ldi	r20, 0x03	; 3
     6fe:	62 e0       	ldi	r22, 0x02	; 2
     700:	f8 01       	movw	r30, r16
     702:	85 a1       	ldd	r24, Z+37	; 0x25
     704:	96 a1       	ldd	r25, Z+38	; 0x26
     706:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_RowCol>
			LCD_Send_String(Set->lcd,(uint8*)"Confirm Pass");
     70a:	6e eb       	ldi	r22, 0xBE	; 190
     70c:	70 e0       	ldi	r23, 0x00	; 0
     70e:	f8 01       	movw	r30, r16
     710:	85 a1       	ldd	r24, Z+37	; 0x25
     712:	96 a1       	ldd	r25, Z+38	; 0x26
     714:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_Send_String>
			Set->SetCount=1;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	f8 01       	movw	r30, r16
     71c:	80 a3       	std	Z+32, r24	; 0x20
			break;
     71e:	39 c0       	rjmp	.+114    	; 0x792 <SetupMode+0xda>
		case 1:
			if (SetPass(Set))
     720:	0e 94 8a 02 	call	0x514	; 0x514 <SetPass>
     724:	c8 2f       	mov	r28, r24
     726:	88 23       	and	r24, r24
     728:	a1 f1       	breq	.+104    	; 0x792 <SetupMode+0xda>
			{
				Set->SetCount =2;
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	f8 01       	movw	r30, r16
     72e:	80 a3       	std	Z+32, r24	; 0x20
				Wrong(Set->lcd);
				_delay_ms(500);
			}	
			break;	
	}
	return 0;
     730:	c0 e0       	ldi	r28, 0x00	; 0
     732:	2f c0       	rjmp	.+94     	; 0x792 <SetupMode+0xda>
			{
				Set->SetCount =2;
			}
			break;
		case 2:
			if(cfmPass(Set))
     734:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <cfmPass>
     738:	c8 2f       	mov	r28, r24
     73a:	88 23       	and	r24, r24
     73c:	51 f1       	breq	.+84     	; 0x792 <SetupMode+0xda>
			{
				Set->SetCount =3;
     73e:	83 e0       	ldi	r24, 0x03	; 3
     740:	f8 01       	movw	r30, r16
     742:	80 a3       	std	Z+32, r24	; 0x20
				Wrong(Set->lcd);
				_delay_ms(500);
			}	
			break;	
	}
	return 0;
     744:	c0 e0       	ldi	r28, 0x00	; 0
     746:	25 c0       	rjmp	.+74     	; 0x792 <SetupMode+0xda>
			{
				Set->SetCount =3;
			}
			break;
		case 3:
			if (strcmp((char*)Set->passCfmed,(char*)Set->passSetted)==0)
     748:	ec 01       	movw	r28, r24
     74a:	60 96       	adiw	r28, 0x10	; 16
     74c:	bc 01       	movw	r22, r24
     74e:	ce 01       	movw	r24, r28
     750:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <strcmp>
     754:	89 2b       	or	r24, r25
     756:	59 f4       	brne	.+22     	; 0x76e <SetupMode+0xb6>
			{
				EEPROM_Write_Word(PassAddress,Set->passCfmed);
     758:	be 01       	movw	r22, r28
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 44 07 	call	0xe88	; 0xe88 <EEPROM_Write_Word>
				OneTimeAuth=0;
     762:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <OneTimeAuth>
				Set->SetCount=0;
     766:	f8 01       	movw	r30, r16
     768:	10 a2       	std	Z+32, r1	; 0x20
				return 1;
     76a:	c1 e0       	ldi	r28, 0x01	; 1
     76c:	12 c0       	rjmp	.+36     	; 0x792 <SetupMode+0xda>
			}
			else
			{
				Set->SetCount=0;
     76e:	f8 01       	movw	r30, r16
     770:	10 a2       	std	Z+32, r1	; 0x20
				Wrong(Set->lcd);
     772:	85 a1       	ldd	r24, Z+37	; 0x25
     774:	96 a1       	ldd	r25, Z+38	; 0x26
     776:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <Wrong>
     77a:	ff e9       	ldi	r31, 0x9F	; 159
     77c:	26 e8       	ldi	r18, 0x86	; 134
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	f1 50       	subi	r31, 0x01	; 1
     782:	20 40       	sbci	r18, 0x00	; 0
     784:	80 40       	sbci	r24, 0x00	; 0
     786:	e1 f7       	brne	.-8      	; 0x780 <SetupMode+0xc8>
     788:	00 c0       	rjmp	.+0      	; 0x78a <SetupMode+0xd2>
     78a:	00 00       	nop
				_delay_ms(500);
			}	
			break;	
	}
	return 0;
     78c:	c0 e0       	ldi	r28, 0x00	; 0
     78e:	01 c0       	rjmp	.+2      	; 0x792 <SetupMode+0xda>
     790:	c0 e0       	ldi	r28, 0x00	; 0
}
     792:	8c 2f       	mov	r24, r28
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	08 95       	ret

0000079e <main>:

#include "MAIN.h"

int main(void)
{
    sysInit();
     79e:	0e 94 60 00 	call	0xc0	; 0xc0 <sysInit>
	SchedulerIntit();
     7a2:	0e 94 ef 08 	call	0x11de	; 0x11de <SchedulerIntit>
	createTask(sysUpdate,0,1,1);
     7a6:	ee 24       	eor	r14, r14
     7a8:	e3 94       	inc	r14
     7aa:	01 e0       	ldi	r16, 0x01	; 1
     7ac:	10 e0       	ldi	r17, 0x00	; 0
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	ba 01       	movw	r22, r20
     7b8:	84 ea       	ldi	r24, 0xA4	; 164
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	0e 94 9e 08 	call	0x113c	; 0x113c <createTask>
	createTask(Remote_Access,0,50,1);
     7c0:	02 e3       	ldi	r16, 0x32	; 50
     7c2:	10 e0       	ldi	r17, 0x00	; 0
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	40 e0       	ldi	r20, 0x00	; 0
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	ba 01       	movw	r22, r20
     7ce:	81 ec       	ldi	r24, 0xC1	; 193
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 9e 08 	call	0x113c	; 0x113c <createTask>
	createTask(KaypadEnable,0,1,0);
     7d6:	e1 2c       	mov	r14, r1
     7d8:	01 e0       	ldi	r16, 0x01	; 1
     7da:	10 e0       	ldi	r17, 0x00	; 0
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e0       	ldi	r20, 0x00	; 0
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	ba 01       	movw	r22, r20
     7e6:	8a eb       	ldi	r24, 0xBA	; 186
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 9e 08 	call	0x113c	; 0x113c <createTask>
	Boot();
     7ee:	0e 94 f7 00 	call	0x1ee	; 0x1ee <Boot>
	SchedulerStart();
     7f2:	0e 94 35 09 	call	0x126a	; 0x126a <SchedulerStart>
    while (1) 
    {
		Dispatcher();
     7f6:	0e 94 0b 09 	call	0x1216	; 0x1216 <Dispatcher>
     7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <main+0x58>

000007fc <KeyPad_Init>:
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	ec 01       	movw	r28, r24
     802:	4a 81       	ldd	r20, Y+2	; 0x02
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	88 81       	ld	r24, Y
     808:	99 81       	ldd	r25, Y+1	; 0x01
     80a:	0e 94 6f 07 	call	0xede	; 0xede <PinDirection>
     80e:	4b 81       	ldd	r20, Y+3	; 0x03
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	88 81       	ld	r24, Y
     814:	99 81       	ldd	r25, Y+1	; 0x01
     816:	0e 94 6f 07 	call	0xede	; 0xede <PinDirection>
     81a:	4c 81       	ldd	r20, Y+4	; 0x04
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	88 81       	ld	r24, Y
     820:	99 81       	ldd	r25, Y+1	; 0x01
     822:	0e 94 6f 07 	call	0xede	; 0xede <PinDirection>
     826:	48 85       	ldd	r20, Y+8	; 0x08
     828:	62 e0       	ldi	r22, 0x02	; 2
     82a:	8e 81       	ldd	r24, Y+6	; 0x06
     82c:	9f 81       	ldd	r25, Y+7	; 0x07
     82e:	0e 94 6f 07 	call	0xede	; 0xede <PinDirection>
     832:	49 85       	ldd	r20, Y+9	; 0x09
     834:	62 e0       	ldi	r22, 0x02	; 2
     836:	8e 81       	ldd	r24, Y+6	; 0x06
     838:	9f 81       	ldd	r25, Y+7	; 0x07
     83a:	0e 94 6f 07 	call	0xede	; 0xede <PinDirection>
     83e:	4a 85       	ldd	r20, Y+10	; 0x0a
     840:	62 e0       	ldi	r22, 0x02	; 2
     842:	8e 81       	ldd	r24, Y+6	; 0x06
     844:	9f 81       	ldd	r25, Y+7	; 0x07
     846:	0e 94 6f 07 	call	0xede	; 0xede <PinDirection>
     84a:	4b 85       	ldd	r20, Y+11	; 0x0b
     84c:	62 e0       	ldi	r22, 0x02	; 2
     84e:	8e 81       	ldd	r24, Y+6	; 0x06
     850:	9f 81       	ldd	r25, Y+7	; 0x07
     852:	0e 94 6f 07 	call	0xede	; 0xede <PinDirection>
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	08 95       	ret

0000085c <Keypad_Read>:
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	ec 01       	movw	r28, r24
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	6a 81       	ldd	r22, Y+2	; 0x02
     868:	88 81       	ld	r24, Y
     86a:	99 81       	ldd	r25, Y+1	; 0x01
     86c:	0e 94 a1 07 	call	0xf42	; 0xf42 <PinWrite>
     870:	68 85       	ldd	r22, Y+8	; 0x08
     872:	8e 81       	ldd	r24, Y+6	; 0x06
     874:	9f 81       	ldd	r25, Y+7	; 0x07
     876:	0e 94 bf 07 	call	0xf7e	; 0xf7e <PinRead>
     87a:	81 11       	cpse	r24, r1
     87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
     87e:	12 e3       	ldi	r17, 0x32	; 50
     880:	01 c0       	rjmp	.+2      	; 0x884 <__stack+0x25>
     882:	1a e2       	ldi	r17, 0x2A	; 42
     884:	69 85       	ldd	r22, Y+9	; 0x09
     886:	8e 81       	ldd	r24, Y+6	; 0x06
     888:	9f 81       	ldd	r25, Y+7	; 0x07
     88a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <PinRead>
     88e:	81 11       	cpse	r24, r1
     890:	01 c0       	rjmp	.+2      	; 0x894 <__stack+0x35>
     892:	14 e3       	ldi	r17, 0x34	; 52
     894:	6a 85       	ldd	r22, Y+10	; 0x0a
     896:	8e 81       	ldd	r24, Y+6	; 0x06
     898:	9f 81       	ldd	r25, Y+7	; 0x07
     89a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <PinRead>
     89e:	81 11       	cpse	r24, r1
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <__stack+0x45>
     8a2:	16 e3       	ldi	r17, 0x36	; 54
     8a4:	6b 85       	ldd	r22, Y+11	; 0x0b
     8a6:	8e 81       	ldd	r24, Y+6	; 0x06
     8a8:	9f 81       	ldd	r25, Y+7	; 0x07
     8aa:	0e 94 bf 07 	call	0xf7e	; 0xf7e <PinRead>
     8ae:	81 11       	cpse	r24, r1
     8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <__stack+0x55>
     8b2:	18 e3       	ldi	r17, 0x38	; 56
     8b4:	41 e0       	ldi	r20, 0x01	; 1
     8b6:	6a 81       	ldd	r22, Y+2	; 0x02
     8b8:	88 81       	ld	r24, Y
     8ba:	99 81       	ldd	r25, Y+1	; 0x01
     8bc:	0e 94 a1 07 	call	0xf42	; 0xf42 <PinWrite>
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	6b 81       	ldd	r22, Y+3	; 0x03
     8c4:	88 81       	ld	r24, Y
     8c6:	99 81       	ldd	r25, Y+1	; 0x01
     8c8:	0e 94 a1 07 	call	0xf42	; 0xf42 <PinWrite>
     8cc:	68 85       	ldd	r22, Y+8	; 0x08
     8ce:	8e 81       	ldd	r24, Y+6	; 0x06
     8d0:	9f 81       	ldd	r25, Y+7	; 0x07
     8d2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <PinRead>
     8d6:	81 11       	cpse	r24, r1
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__stack+0x7d>
     8da:	1a e3       	ldi	r17, 0x3A	; 58
     8dc:	69 85       	ldd	r22, Y+9	; 0x09
     8de:	8e 81       	ldd	r24, Y+6	; 0x06
     8e0:	9f 81       	ldd	r25, Y+7	; 0x07
     8e2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <PinRead>
     8e6:	81 11       	cpse	r24, r1
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <__stack+0x8d>
     8ea:	1c e3       	ldi	r17, 0x3C	; 60
     8ec:	6a 85       	ldd	r22, Y+10	; 0x0a
     8ee:	8e 81       	ldd	r24, Y+6	; 0x06
     8f0:	9f 81       	ldd	r25, Y+7	; 0x07
     8f2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <PinRead>
     8f6:	81 11       	cpse	r24, r1
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <__stack+0x9d>
     8fa:	1e e3       	ldi	r17, 0x3E	; 62
     8fc:	6b 85       	ldd	r22, Y+11	; 0x0b
     8fe:	8e 81       	ldd	r24, Y+6	; 0x06
     900:	9f 81       	ldd	r25, Y+7	; 0x07
     902:	0e 94 bf 07 	call	0xf7e	; 0xf7e <PinRead>
     906:	81 11       	cpse	r24, r1
     908:	01 c0       	rjmp	.+2      	; 0x90c <__stack+0xad>
     90a:	10 e4       	ldi	r17, 0x40	; 64
     90c:	41 e0       	ldi	r20, 0x01	; 1
     90e:	6b 81       	ldd	r22, Y+3	; 0x03
     910:	88 81       	ld	r24, Y
     912:	99 81       	ldd	r25, Y+1	; 0x01
     914:	0e 94 a1 07 	call	0xf42	; 0xf42 <PinWrite>
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	6c 81       	ldd	r22, Y+4	; 0x04
     91c:	88 81       	ld	r24, Y
     91e:	99 81       	ldd	r25, Y+1	; 0x01
     920:	0e 94 a1 07 	call	0xf42	; 0xf42 <PinWrite>
     924:	68 85       	ldd	r22, Y+8	; 0x08
     926:	8e 81       	ldd	r24, Y+6	; 0x06
     928:	9f 81       	ldd	r25, Y+7	; 0x07
     92a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <PinRead>
     92e:	81 11       	cpse	r24, r1
     930:	01 c0       	rjmp	.+2      	; 0x934 <__stack+0xd5>
     932:	12 e4       	ldi	r17, 0x42	; 66
     934:	69 85       	ldd	r22, Y+9	; 0x09
     936:	8e 81       	ldd	r24, Y+6	; 0x06
     938:	9f 81       	ldd	r25, Y+7	; 0x07
     93a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <PinRead>
     93e:	81 11       	cpse	r24, r1
     940:	01 c0       	rjmp	.+2      	; 0x944 <__stack+0xe5>
     942:	14 e4       	ldi	r17, 0x44	; 68
     944:	6a 85       	ldd	r22, Y+10	; 0x0a
     946:	8e 81       	ldd	r24, Y+6	; 0x06
     948:	9f 81       	ldd	r25, Y+7	; 0x07
     94a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <PinRead>
     94e:	88 23       	and	r24, r24
     950:	b9 f1       	breq	.+110    	; 0x9c0 <__stack+0x161>
     952:	6b 85       	ldd	r22, Y+11	; 0x0b
     954:	8e 81       	ldd	r24, Y+6	; 0x06
     956:	9f 81       	ldd	r25, Y+7	; 0x07
     958:	0e 94 bf 07 	call	0xf7e	; 0xf7e <PinRead>
     95c:	88 23       	and	r24, r24
     95e:	01 f1       	breq	.+64     	; 0x9a0 <__stack+0x141>
     960:	41 e0       	ldi	r20, 0x01	; 1
     962:	6c 81       	ldd	r22, Y+4	; 0x04
     964:	88 81       	ld	r24, Y
     966:	99 81       	ldd	r25, Y+1	; 0x01
     968:	0e 94 a1 07 	call	0xf42	; 0xf42 <PinWrite>
     96c:	1a 32       	cpi	r17, 0x2A	; 42
     96e:	39 f4       	brne	.+14     	; 0x97e <__stack+0x11f>
     970:	8a e2       	ldi	r24, 0x2A	; 42
     972:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <oldKey.1665>
     976:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <Last_valid_key_G.1667>
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	29 c0       	rjmp	.+82     	; 0x9d0 <__stack+0x171>
     97e:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <oldKey.1665>
     982:	81 13       	cpse	r24, r17
     984:	09 c0       	rjmp	.+18     	; 0x998 <__stack+0x139>
     986:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <Last_valid_key_G.1667>
     98a:	89 17       	cp	r24, r25
     98c:	29 f0       	breq	.+10     	; 0x998 <__stack+0x139>
     98e:	8c 87       	std	Y+12, r24	; 0x0c
     990:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <Last_valid_key_G.1667>
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	1c c0       	rjmp	.+56     	; 0x9d0 <__stack+0x171>
     998:	10 93 d3 00 	sts	0x00D3, r17	; 0x8000d3 <oldKey.1665>
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 c0       	rjmp	.+48     	; 0x9d0 <__stack+0x171>
     9a0:	41 e0       	ldi	r20, 0x01	; 1
     9a2:	6c 81       	ldd	r22, Y+4	; 0x04
     9a4:	88 81       	ld	r24, Y
     9a6:	99 81       	ldd	r25, Y+1	; 0x01
     9a8:	0e 94 a1 07 	call	0xf42	; 0xf42 <PinWrite>
     9ac:	18 e4       	ldi	r17, 0x48	; 72
     9ae:	e7 cf       	rjmp	.-50     	; 0x97e <__stack+0x11f>
     9b0:	41 e0       	ldi	r20, 0x01	; 1
     9b2:	6c 81       	ldd	r22, Y+4	; 0x04
     9b4:	88 81       	ld	r24, Y
     9b6:	99 81       	ldd	r25, Y+1	; 0x01
     9b8:	0e 94 a1 07 	call	0xf42	; 0xf42 <PinWrite>
     9bc:	16 e4       	ldi	r17, 0x46	; 70
     9be:	df cf       	rjmp	.-66     	; 0x97e <__stack+0x11f>
     9c0:	6b 85       	ldd	r22, Y+11	; 0x0b
     9c2:	8e 81       	ldd	r24, Y+6	; 0x06
     9c4:	9f 81       	ldd	r25, Y+7	; 0x07
     9c6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <PinRead>
     9ca:	88 23       	and	r24, r24
     9cc:	49 f3       	breq	.-46     	; 0x9a0 <__stack+0x141>
     9ce:	f0 cf       	rjmp	.-32     	; 0x9b0 <__stack+0x151>
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	08 95       	ret

000009d8 <KeypadPhone>:
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	ec 01       	movw	r28, r24
     9de:	0e 94 2e 04 	call	0x85c	; 0x85c <Keypad_Read>
     9e2:	8d 87       	std	Y+13, r24	; 0x0d
     9e4:	ec 85       	ldd	r30, Y+12	; 0x0c
     9e6:	4e 2f       	mov	r20, r30
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	fa 01       	movw	r30, r20
     9ec:	f2 97       	sbiw	r30, 0x32	; 50
     9ee:	e7 31       	cpi	r30, 0x17	; 23
     9f0:	f1 05       	cpc	r31, r1
     9f2:	38 f5       	brcc	.+78     	; 0xa42 <KeypadPhone+0x6a>
     9f4:	e6 5d       	subi	r30, 0xD6	; 214
     9f6:	ff 4f       	sbci	r31, 0xFF	; 255
     9f8:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__tablejump2__>
     9fc:	91 e3       	ldi	r25, 0x31	; 49
     9fe:	9c 87       	std	Y+12, r25	; 0x0c
     a00:	20 c0       	rjmp	.+64     	; 0xa42 <KeypadPhone+0x6a>
     a02:	94 e3       	ldi	r25, 0x34	; 52
     a04:	9c 87       	std	Y+12, r25	; 0x0c
     a06:	1d c0       	rjmp	.+58     	; 0xa42 <KeypadPhone+0x6a>
     a08:	97 e3       	ldi	r25, 0x37	; 55
     a0a:	9c 87       	std	Y+12, r25	; 0x0c
     a0c:	1a c0       	rjmp	.+52     	; 0xa42 <KeypadPhone+0x6a>
     a0e:	9a e2       	ldi	r25, 0x2A	; 42
     a10:	9c 87       	std	Y+12, r25	; 0x0c
     a12:	17 c0       	rjmp	.+46     	; 0xa42 <KeypadPhone+0x6a>
     a14:	92 e3       	ldi	r25, 0x32	; 50
     a16:	9c 87       	std	Y+12, r25	; 0x0c
     a18:	14 c0       	rjmp	.+40     	; 0xa42 <KeypadPhone+0x6a>
     a1a:	95 e3       	ldi	r25, 0x35	; 53
     a1c:	9c 87       	std	Y+12, r25	; 0x0c
     a1e:	11 c0       	rjmp	.+34     	; 0xa42 <KeypadPhone+0x6a>
     a20:	98 e3       	ldi	r25, 0x38	; 56
     a22:	9c 87       	std	Y+12, r25	; 0x0c
     a24:	0e c0       	rjmp	.+28     	; 0xa42 <KeypadPhone+0x6a>
     a26:	90 e3       	ldi	r25, 0x30	; 48
     a28:	9c 87       	std	Y+12, r25	; 0x0c
     a2a:	0b c0       	rjmp	.+22     	; 0xa42 <KeypadPhone+0x6a>
     a2c:	93 e3       	ldi	r25, 0x33	; 51
     a2e:	9c 87       	std	Y+12, r25	; 0x0c
     a30:	08 c0       	rjmp	.+16     	; 0xa42 <KeypadPhone+0x6a>
     a32:	96 e3       	ldi	r25, 0x36	; 54
     a34:	9c 87       	std	Y+12, r25	; 0x0c
     a36:	05 c0       	rjmp	.+10     	; 0xa42 <KeypadPhone+0x6a>
     a38:	99 e3       	ldi	r25, 0x39	; 57
     a3a:	9c 87       	std	Y+12, r25	; 0x0c
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <KeypadPhone+0x6a>
     a3e:	93 e2       	ldi	r25, 0x23	; 35
     a40:	9c 87       	std	Y+12, r25	; 0x0c
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <Send_Instruction>:
	Send_Instruction(ports,Display_Clear);
	
}

void Send_Instruction(LCD_CONFIG * ports,uint8 Instruction)
{
     a48:	fc 01       	movw	r30, r24
	Clear_Bit(ports->LCD_Control->port,ports->RS);
     a4a:	a0 81       	ld	r26, Z
     a4c:	b1 81       	ldd	r27, Z+1	; 0x01
     a4e:	12 96       	adiw	r26, 0x02	; 2
     a50:	3c 91       	ld	r19, X
     a52:	12 97       	sbiw	r26, 0x02	; 2
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	ac 01       	movw	r20, r24
     a5a:	02 80       	ldd	r0, Z+2	; 0x02
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <Send_Instruction+0x1a>
     a5e:	44 0f       	add	r20, r20
     a60:	55 1f       	adc	r21, r21
     a62:	0a 94       	dec	r0
     a64:	e2 f7       	brpl	.-8      	; 0xa5e <Send_Instruction+0x16>
     a66:	24 2f       	mov	r18, r20
     a68:	20 95       	com	r18
     a6a:	23 23       	and	r18, r19
     a6c:	12 96       	adiw	r26, 0x02	; 2
     a6e:	2c 93       	st	X, r18
	Clear_Bit(ports->LCD_Control->port,ports->RW);
     a70:	a0 81       	ld	r26, Z
     a72:	b1 81       	ldd	r27, Z+1	; 0x01
     a74:	12 96       	adiw	r26, 0x02	; 2
     a76:	3c 91       	ld	r19, X
     a78:	12 97       	sbiw	r26, 0x02	; 2
     a7a:	ac 01       	movw	r20, r24
     a7c:	03 80       	ldd	r0, Z+3	; 0x03
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <Send_Instruction+0x3c>
     a80:	44 0f       	add	r20, r20
     a82:	55 1f       	adc	r21, r21
     a84:	0a 94       	dec	r0
     a86:	e2 f7       	brpl	.-8      	; 0xa80 <Send_Instruction+0x38>
     a88:	24 2f       	mov	r18, r20
     a8a:	20 95       	com	r18
     a8c:	23 23       	and	r18, r19
     a8e:	12 96       	adiw	r26, 0x02	; 2
     a90:	2c 93       	st	X, r18
	
	Set_Bit(ports->LCD_Control->port,ports->E);
     a92:	a0 81       	ld	r26, Z
     a94:	b1 81       	ldd	r27, Z+1	; 0x01
     a96:	12 96       	adiw	r26, 0x02	; 2
     a98:	4c 91       	ld	r20, X
     a9a:	12 97       	sbiw	r26, 0x02	; 2
     a9c:	9c 01       	movw	r18, r24
     a9e:	04 80       	ldd	r0, Z+4	; 0x04
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <Send_Instruction+0x5e>
     aa2:	22 0f       	add	r18, r18
     aa4:	33 1f       	adc	r19, r19
     aa6:	0a 94       	dec	r0
     aa8:	e2 f7       	brpl	.-8      	; 0xaa2 <Send_Instruction+0x5a>
     aaa:	24 2b       	or	r18, r20
     aac:	12 96       	adiw	r26, 0x02	; 2
     aae:	2c 93       	st	X, r18
     ab0:	a9 ef       	ldi	r26, 0xF9	; 249
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	11 97       	sbiw	r26, 0x01	; 1
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <Send_Instruction+0x6c>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <Send_Instruction+0x72>
     aba:	00 00       	nop
	   _delay_ms(1);
	   Clear_Bit(ports->LCD_Control->port,ports->E);
	   _delay_ms(1);
	#else
	   #if Upper_Data_Port
	      ports->LCD_Data->port &=(0x0F); 
     abc:	a5 81       	ldd	r26, Z+5	; 0x05
     abe:	b6 81       	ldd	r27, Z+6	; 0x06
     ac0:	12 96       	adiw	r26, 0x02	; 2
     ac2:	2c 91       	ld	r18, X
     ac4:	12 97       	sbiw	r26, 0x02	; 2
     ac6:	2f 70       	andi	r18, 0x0F	; 15
     ac8:	12 96       	adiw	r26, 0x02	; 2
     aca:	2c 93       	st	X, r18
		  ports->LCD_Data->port|=(Instruction &(0xF0));
     acc:	a5 81       	ldd	r26, Z+5	; 0x05
     ace:	b6 81       	ldd	r27, Z+6	; 0x06
     ad0:	12 96       	adiw	r26, 0x02	; 2
     ad2:	2c 91       	ld	r18, X
     ad4:	12 97       	sbiw	r26, 0x02	; 2
     ad6:	36 2f       	mov	r19, r22
     ad8:	30 7f       	andi	r19, 0xF0	; 240
     ada:	23 2b       	or	r18, r19
     adc:	12 96       	adiw	r26, 0x02	; 2
     ade:	2c 93       	st	X, r18
     ae0:	a9 ef       	ldi	r26, 0xF9	; 249
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	11 97       	sbiw	r26, 0x01	; 1
     ae6:	f1 f7       	brne	.-4      	; 0xae4 <Send_Instruction+0x9c>
     ae8:	00 c0       	rjmp	.+0      	; 0xaea <Send_Instruction+0xa2>
     aea:	00 00       	nop
		  _delay_ms(1);
		  
		  Clear_Bit(ports->LCD_Control->port,ports->E);
     aec:	a0 81       	ld	r26, Z
     aee:	b1 81       	ldd	r27, Z+1	; 0x01
     af0:	12 96       	adiw	r26, 0x02	; 2
     af2:	3c 91       	ld	r19, X
     af4:	12 97       	sbiw	r26, 0x02	; 2
     af6:	ac 01       	movw	r20, r24
     af8:	04 80       	ldd	r0, Z+4	; 0x04
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <Send_Instruction+0xb8>
     afc:	44 0f       	add	r20, r20
     afe:	55 1f       	adc	r21, r21
     b00:	0a 94       	dec	r0
     b02:	e2 f7       	brpl	.-8      	; 0xafc <Send_Instruction+0xb4>
     b04:	24 2f       	mov	r18, r20
     b06:	20 95       	com	r18
     b08:	23 23       	and	r18, r19
     b0a:	12 96       	adiw	r26, 0x02	; 2
     b0c:	2c 93       	st	X, r18
     b0e:	a9 ef       	ldi	r26, 0xF9	; 249
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	11 97       	sbiw	r26, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <Send_Instruction+0xca>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <Send_Instruction+0xd0>
     b18:	00 00       	nop
		  _delay_ms(1);
		  
		  Set_Bit(ports->LCD_Control->port,ports->E);
     b1a:	a0 81       	ld	r26, Z
     b1c:	b1 81       	ldd	r27, Z+1	; 0x01
     b1e:	12 96       	adiw	r26, 0x02	; 2
     b20:	4c 91       	ld	r20, X
     b22:	12 97       	sbiw	r26, 0x02	; 2
     b24:	9c 01       	movw	r18, r24
     b26:	04 80       	ldd	r0, Z+4	; 0x04
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <Send_Instruction+0xe6>
     b2a:	22 0f       	add	r18, r18
     b2c:	33 1f       	adc	r19, r19
     b2e:	0a 94       	dec	r0
     b30:	e2 f7       	brpl	.-8      	; 0xb2a <Send_Instruction+0xe2>
     b32:	24 2b       	or	r18, r20
     b34:	12 96       	adiw	r26, 0x02	; 2
     b36:	2c 93       	st	X, r18
     b38:	a9 ef       	ldi	r26, 0xF9	; 249
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	11 97       	sbiw	r26, 0x01	; 1
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <Send_Instruction+0xf4>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <Send_Instruction+0xfa>
     b42:	00 00       	nop
		  _delay_ms(1);
		  
		  ports->LCD_Data->port &= (0x0F);
     b44:	a5 81       	ldd	r26, Z+5	; 0x05
     b46:	b6 81       	ldd	r27, Z+6	; 0x06
     b48:	12 96       	adiw	r26, 0x02	; 2
     b4a:	2c 91       	ld	r18, X
     b4c:	12 97       	sbiw	r26, 0x02	; 2
     b4e:	2f 70       	andi	r18, 0x0F	; 15
     b50:	12 96       	adiw	r26, 0x02	; 2
     b52:	2c 93       	st	X, r18
		  ports->LCD_Data->port|=((Instruction )<<4);
     b54:	a5 81       	ldd	r26, Z+5	; 0x05
     b56:	b6 81       	ldd	r27, Z+6	; 0x06
     b58:	12 96       	adiw	r26, 0x02	; 2
     b5a:	2c 91       	ld	r18, X
     b5c:	12 97       	sbiw	r26, 0x02	; 2
     b5e:	30 e1       	ldi	r19, 0x10	; 16
     b60:	63 9f       	mul	r22, r19
     b62:	b0 01       	movw	r22, r0
     b64:	11 24       	eor	r1, r1
     b66:	62 2b       	or	r22, r18
     b68:	12 96       	adiw	r26, 0x02	; 2
     b6a:	6c 93       	st	X, r22
     b6c:	a9 ef       	ldi	r26, 0xF9	; 249
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	11 97       	sbiw	r26, 0x01	; 1
     b72:	f1 f7       	brne	.-4      	; 0xb70 <Send_Instruction+0x128>
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <Send_Instruction+0x12e>
     b76:	00 00       	nop
		  _delay_ms(1);
		  
		  Clear_Bit(ports->LCD_Control->port,ports->E);
     b78:	a0 81       	ld	r26, Z
     b7a:	b1 81       	ldd	r27, Z+1	; 0x01
     b7c:	12 96       	adiw	r26, 0x02	; 2
     b7e:	2c 91       	ld	r18, X
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	04 80       	ldd	r0, Z+4	; 0x04
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <Send_Instruction+0x142>
     b86:	88 0f       	add	r24, r24
     b88:	99 1f       	adc	r25, r25
     b8a:	0a 94       	dec	r0
     b8c:	e2 f7       	brpl	.-8      	; 0xb86 <Send_Instruction+0x13e>
     b8e:	80 95       	com	r24
     b90:	82 23       	and	r24, r18
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8c 93       	st	X, r24
     b96:	89 ef       	ldi	r24, 0xF9	; 249
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	f1 f7       	brne	.-4      	; 0xb9a <Send_Instruction+0x152>
     b9e:	00 c0       	rjmp	.+0      	; 0xba0 <Send_Instruction+0x158>
     ba0:	00 00       	nop
     ba2:	08 95       	ret

00000ba4 <LCD_INIT>:
 */ 

#include "LCD.h"

void LCD_INIT(LCD_CONFIG * ports)
{
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	ec 01       	movw	r28, r24
	ports->LCD_Control->ddr |=(1<<ports->RW) |(1<<ports->RS) |(1<<ports->E);
     baa:	e8 81       	ld	r30, Y
     bac:	f9 81       	ldd	r31, Y+1	; 0x01
     bae:	31 81       	ldd	r19, Z+1	; 0x01
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	bc 01       	movw	r22, r24
     bb6:	0b 80       	ldd	r0, Y+3	; 0x03
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <LCD_INIT+0x1a>
     bba:	66 0f       	add	r22, r22
     bbc:	77 1f       	adc	r23, r23
     bbe:	0a 94       	dec	r0
     bc0:	e2 f7       	brpl	.-8      	; 0xbba <LCD_INIT+0x16>
     bc2:	ac 01       	movw	r20, r24
     bc4:	0a 80       	ldd	r0, Y+2	; 0x02
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <LCD_INIT+0x28>
     bc8:	44 0f       	add	r20, r20
     bca:	55 1f       	adc	r21, r21
     bcc:	0a 94       	dec	r0
     bce:	e2 f7       	brpl	.-8      	; 0xbc8 <LCD_INIT+0x24>
     bd0:	26 2f       	mov	r18, r22
     bd2:	24 2b       	or	r18, r20
     bd4:	23 2b       	or	r18, r19
     bd6:	0c 80       	ldd	r0, Y+4	; 0x04
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <LCD_INIT+0x3a>
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	0a 94       	dec	r0
     be0:	e2 f7       	brpl	.-8      	; 0xbda <LCD_INIT+0x36>
     be2:	82 2b       	or	r24, r18
     be4:	81 83       	std	Z+1, r24	; 0x01
	   ports->LCD_Data->ddr =0xFF;
	   
	#else
	   #if Upper_Data_Port
	   
	   ports->LCD_Data->ddr  |=(0xF0);
     be6:	ed 81       	ldd	r30, Y+5	; 0x05
     be8:	fe 81       	ldd	r31, Y+6	; 0x06
     bea:	81 81       	ldd	r24, Z+1	; 0x01
     bec:	80 6f       	ori	r24, 0xF0	; 240
     bee:	81 83       	std	Z+1, r24	; 0x01
	   ports->LCD_Data->ddr  |=(0x0F);

       #endif
	  
	#endif
	Send_Instruction(ports,Return_Home); /*what the heal is that?*/
     bf0:	62 e0       	ldi	r22, 0x02	; 2
     bf2:	ce 01       	movw	r24, r28
     bf4:	0e 94 24 05 	call	0xa48	; 0xa48 <Send_Instruction>
	Send_Instruction(ports,Function_Set);
     bf8:	68 e2       	ldi	r22, 0x28	; 40
     bfa:	ce 01       	movw	r24, r28
     bfc:	0e 94 24 05 	call	0xa48	; 0xa48 <Send_Instruction>
	Send_Instruction(ports,Display_ON);
     c00:	6c e0       	ldi	r22, 0x0C	; 12
     c02:	ce 01       	movw	r24, r28
     c04:	0e 94 24 05 	call	0xa48	; 0xa48 <Send_Instruction>
	Send_Instruction(ports,Display_Clear);
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	ce 01       	movw	r24, r28
     c0c:	0e 94 24 05 	call	0xa48	; 0xa48 <Send_Instruction>
	
}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <LCD_Send_Char>:

    #endif
}

void LCD_Send_Char(LCD_CONFIG * ports,uint8 Data)
{
     c16:	fc 01       	movw	r30, r24
	Set_Bit(ports->LCD_Control->port,ports->RS);
     c18:	a0 81       	ld	r26, Z
     c1a:	b1 81       	ldd	r27, Z+1	; 0x01
     c1c:	12 96       	adiw	r26, 0x02	; 2
     c1e:	4c 91       	ld	r20, X
     c20:	12 97       	sbiw	r26, 0x02	; 2
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	9c 01       	movw	r18, r24
     c28:	02 80       	ldd	r0, Z+2	; 0x02
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <LCD_Send_Char+0x1a>
     c2c:	22 0f       	add	r18, r18
     c2e:	33 1f       	adc	r19, r19
     c30:	0a 94       	dec	r0
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <LCD_Send_Char+0x16>
     c34:	24 2b       	or	r18, r20
     c36:	12 96       	adiw	r26, 0x02	; 2
     c38:	2c 93       	st	X, r18
	Clear_Bit(ports->LCD_Control->port,ports->RW);
     c3a:	a0 81       	ld	r26, Z
     c3c:	b1 81       	ldd	r27, Z+1	; 0x01
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	3c 91       	ld	r19, X
     c42:	12 97       	sbiw	r26, 0x02	; 2
     c44:	ac 01       	movw	r20, r24
     c46:	03 80       	ldd	r0, Z+3	; 0x03
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <LCD_Send_Char+0x38>
     c4a:	44 0f       	add	r20, r20
     c4c:	55 1f       	adc	r21, r21
     c4e:	0a 94       	dec	r0
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <LCD_Send_Char+0x34>
     c52:	24 2f       	mov	r18, r20
     c54:	20 95       	com	r18
     c56:	23 23       	and	r18, r19
     c58:	12 96       	adiw	r26, 0x02	; 2
     c5a:	2c 93       	st	X, r18
	
	Set_Bit(ports->LCD_Control->port,ports->E);
     c5c:	a0 81       	ld	r26, Z
     c5e:	b1 81       	ldd	r27, Z+1	; 0x01
     c60:	12 96       	adiw	r26, 0x02	; 2
     c62:	4c 91       	ld	r20, X
     c64:	12 97       	sbiw	r26, 0x02	; 2
     c66:	9c 01       	movw	r18, r24
     c68:	04 80       	ldd	r0, Z+4	; 0x04
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <LCD_Send_Char+0x5a>
     c6c:	22 0f       	add	r18, r18
     c6e:	33 1f       	adc	r19, r19
     c70:	0a 94       	dec	r0
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <LCD_Send_Char+0x56>
     c74:	24 2b       	or	r18, r20
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2c 93       	st	X, r18
     c7a:	a9 ef       	ldi	r26, 0xF9	; 249
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	11 97       	sbiw	r26, 0x01	; 1
     c80:	f1 f7       	brne	.-4      	; 0xc7e <LCD_Send_Char+0x68>
     c82:	00 c0       	rjmp	.+0      	; 0xc84 <LCD_Send_Char+0x6e>
     c84:	00 00       	nop
	      _delay_ms(1);
	      Clear_Bit(ports->LCD_Control->port,ports->E);
	      _delay_ms(1);
	 #else
	    #if Upper_Data_Port
	    ports->LCD_Data->port &= (0x0F) ;
     c86:	a5 81       	ldd	r26, Z+5	; 0x05
     c88:	b6 81       	ldd	r27, Z+6	; 0x06
     c8a:	12 96       	adiw	r26, 0x02	; 2
     c8c:	2c 91       	ld	r18, X
     c8e:	12 97       	sbiw	r26, 0x02	; 2
     c90:	2f 70       	andi	r18, 0x0F	; 15
     c92:	12 96       	adiw	r26, 0x02	; 2
     c94:	2c 93       	st	X, r18
		ports->LCD_Data->port|=(Data &(0xF0));
     c96:	a5 81       	ldd	r26, Z+5	; 0x05
     c98:	b6 81       	ldd	r27, Z+6	; 0x06
     c9a:	12 96       	adiw	r26, 0x02	; 2
     c9c:	2c 91       	ld	r18, X
     c9e:	12 97       	sbiw	r26, 0x02	; 2
     ca0:	36 2f       	mov	r19, r22
     ca2:	30 7f       	andi	r19, 0xF0	; 240
     ca4:	23 2b       	or	r18, r19
     ca6:	12 96       	adiw	r26, 0x02	; 2
     ca8:	2c 93       	st	X, r18
     caa:	a9 ef       	ldi	r26, 0xF9	; 249
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	11 97       	sbiw	r26, 0x01	; 1
     cb0:	f1 f7       	brne	.-4      	; 0xcae <LCD_Send_Char+0x98>
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <LCD_Send_Char+0x9e>
     cb4:	00 00       	nop
	    _delay_ms(1);
	
	    Clear_Bit(ports->LCD_Control->port,ports->E);
     cb6:	a0 81       	ld	r26, Z
     cb8:	b1 81       	ldd	r27, Z+1	; 0x01
     cba:	12 96       	adiw	r26, 0x02	; 2
     cbc:	3c 91       	ld	r19, X
     cbe:	12 97       	sbiw	r26, 0x02	; 2
     cc0:	ac 01       	movw	r20, r24
     cc2:	04 80       	ldd	r0, Z+4	; 0x04
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <LCD_Send_Char+0xb4>
     cc6:	44 0f       	add	r20, r20
     cc8:	55 1f       	adc	r21, r21
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <LCD_Send_Char+0xb0>
     cce:	24 2f       	mov	r18, r20
     cd0:	20 95       	com	r18
     cd2:	23 23       	and	r18, r19
     cd4:	12 96       	adiw	r26, 0x02	; 2
     cd6:	2c 93       	st	X, r18
     cd8:	a9 ef       	ldi	r26, 0xF9	; 249
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	11 97       	sbiw	r26, 0x01	; 1
     cde:	f1 f7       	brne	.-4      	; 0xcdc <LCD_Send_Char+0xc6>
     ce0:	00 c0       	rjmp	.+0      	; 0xce2 <LCD_Send_Char+0xcc>
     ce2:	00 00       	nop
	    _delay_ms(1);
	
	    Set_Bit(ports->LCD_Control->port,ports->E);
     ce4:	a0 81       	ld	r26, Z
     ce6:	b1 81       	ldd	r27, Z+1	; 0x01
     ce8:	12 96       	adiw	r26, 0x02	; 2
     cea:	4c 91       	ld	r20, X
     cec:	12 97       	sbiw	r26, 0x02	; 2
     cee:	9c 01       	movw	r18, r24
     cf0:	04 80       	ldd	r0, Z+4	; 0x04
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <LCD_Send_Char+0xe2>
     cf4:	22 0f       	add	r18, r18
     cf6:	33 1f       	adc	r19, r19
     cf8:	0a 94       	dec	r0
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <LCD_Send_Char+0xde>
     cfc:	24 2b       	or	r18, r20
     cfe:	12 96       	adiw	r26, 0x02	; 2
     d00:	2c 93       	st	X, r18
     d02:	a9 ef       	ldi	r26, 0xF9	; 249
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	11 97       	sbiw	r26, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <LCD_Send_Char+0xf0>
     d0a:	00 c0       	rjmp	.+0      	; 0xd0c <LCD_Send_Char+0xf6>
     d0c:	00 00       	nop
	    _delay_ms(1);
	
	    ports->LCD_Data->port &=(0x0F);
     d0e:	a5 81       	ldd	r26, Z+5	; 0x05
     d10:	b6 81       	ldd	r27, Z+6	; 0x06
     d12:	12 96       	adiw	r26, 0x02	; 2
     d14:	2c 91       	ld	r18, X
     d16:	12 97       	sbiw	r26, 0x02	; 2
     d18:	2f 70       	andi	r18, 0x0F	; 15
     d1a:	12 96       	adiw	r26, 0x02	; 2
     d1c:	2c 93       	st	X, r18
		ports->LCD_Data->port |=((Data )<<4);
     d1e:	a5 81       	ldd	r26, Z+5	; 0x05
     d20:	b6 81       	ldd	r27, Z+6	; 0x06
     d22:	12 96       	adiw	r26, 0x02	; 2
     d24:	2c 91       	ld	r18, X
     d26:	12 97       	sbiw	r26, 0x02	; 2
     d28:	30 e1       	ldi	r19, 0x10	; 16
     d2a:	63 9f       	mul	r22, r19
     d2c:	b0 01       	movw	r22, r0
     d2e:	11 24       	eor	r1, r1
     d30:	62 2b       	or	r22, r18
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	6c 93       	st	X, r22
     d36:	a9 ef       	ldi	r26, 0xF9	; 249
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	11 97       	sbiw	r26, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <LCD_Send_Char+0x124>
     d3e:	00 c0       	rjmp	.+0      	; 0xd40 <LCD_Send_Char+0x12a>
     d40:	00 00       	nop
	    _delay_ms(1);
	
	    Clear_Bit(ports->LCD_Control->port,ports->E);
     d42:	a0 81       	ld	r26, Z
     d44:	b1 81       	ldd	r27, Z+1	; 0x01
     d46:	12 96       	adiw	r26, 0x02	; 2
     d48:	2c 91       	ld	r18, X
     d4a:	12 97       	sbiw	r26, 0x02	; 2
     d4c:	04 80       	ldd	r0, Z+4	; 0x04
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <LCD_Send_Char+0x13e>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <LCD_Send_Char+0x13a>
     d58:	80 95       	com	r24
     d5a:	82 23       	and	r24, r18
     d5c:	12 96       	adiw	r26, 0x02	; 2
     d5e:	8c 93       	st	X, r24
     d60:	89 ef       	ldi	r24, 0xF9	; 249
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <LCD_Send_Char+0x14e>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <LCD_Send_Char+0x154>
     d6a:	00 00       	nop
     d6c:	08 95       	ret

00000d6e <LCD_Send_String>:

    #endif
}

void LCD_Send_String(LCD_CONFIG * ports,uint8 * ptr)
{
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	eb 01       	movw	r28, r22
	while (* ptr !='\0')
     d78:	68 81       	ld	r22, Y
     d7a:	66 23       	and	r22, r22
     d7c:	41 f0       	breq	.+16     	; 0xd8e <LCD_Send_String+0x20>
     d7e:	8c 01       	movw	r16, r24
     d80:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Send_Char(ports,*ptr);
     d82:	c8 01       	movw	r24, r16
     d84:	0e 94 0b 06 	call	0xc16	; 0xc16 <LCD_Send_Char>
    #endif
}

void LCD_Send_String(LCD_CONFIG * ports,uint8 * ptr)
{
	while (* ptr !='\0')
     d88:	69 91       	ld	r22, Y+
     d8a:	61 11       	cpse	r22, r1
     d8c:	fa cf       	rjmp	.-12     	; 0xd82 <LCD_Send_String+0x14>
	{
		LCD_Send_Char(ports,*ptr);
		ptr++;
	}
}
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	08 95       	ret

00000d98 <LCD_Clear>:

void LCD_Clear(LCD_CONFIG * ports)
{
	Send_Instruction(ports,Display_Clear);
     d98:	61 e0       	ldi	r22, 0x01	; 1
     d9a:	0e 94 24 05 	call	0xa48	; 0xa48 <Send_Instruction>
     d9e:	08 95       	ret

00000da0 <LCD_RowCol>:

void LCD_RowCol(LCD_CONFIG * ports,uint8 Row ,uint8 Col)
{
	uint8 Address=0;
	
	switch (Row)
     da0:	61 30       	cpi	r22, 0x01	; 1
     da2:	31 f0       	breq	.+12     	; 0xdb0 <LCD_RowCol+0x10>
     da4:	50 f0       	brcs	.+20     	; 0xdba <LCD_RowCol+0x1a>
     da6:	62 30       	cpi	r22, 0x02	; 2
     da8:	29 f0       	breq	.+10     	; 0xdb4 <LCD_RowCol+0x14>
     daa:	63 30       	cpi	r22, 0x03	; 3
     dac:	29 f0       	breq	.+10     	; 0xdb8 <LCD_RowCol+0x18>
     dae:	08 95       	ret
	{
		case 0:
		   Address=Col+LCD_1ST_Base;
		   break;
		case 1:
		   Address=Col+LCD_2ND_Base;
     db0:	40 5c       	subi	r20, 0xC0	; 192
		   break;
     db2:	03 c0       	rjmp	.+6      	; 0xdba <LCD_RowCol+0x1a>
		case 2:
		   Address=Col+LCD_3RD_Base;
     db4:	40 5f       	subi	r20, 0xF0	; 240
		   break;
     db6:	01 c0       	rjmp	.+2      	; 0xdba <LCD_RowCol+0x1a>
		case 3:
		   Address=Col+LCD_4TH_Base;
     db8:	40 5b       	subi	r20, 0xB0	; 176
		   break;
		default:
		   return;         
	}
	Send_Instruction(ports,DDRAM|Address);
     dba:	64 2f       	mov	r22, r20
     dbc:	60 68       	ori	r22, 0x80	; 128
     dbe:	0e 94 24 05 	call	0xa48	; 0xa48 <Send_Instruction>
     dc2:	08 95       	ret

00000dc4 <LCD_DisplayInt>:
}
void LCD_DisplayInt(LCD_CONFIG * ports,sint32 data)
{
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	61 97       	sbiw	r28, 0x11	; 17
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61
     ddc:	8c 01       	movw	r16, r24
     dde:	db 01       	movw	r26, r22
     de0:	ca 01       	movw	r24, r20
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     de2:	4a e0       	ldi	r20, 0x0A	; 10
     de4:	be 01       	movw	r22, r28
     de6:	6f 5f       	subi	r22, 0xFF	; 255
     de8:	7f 4f       	sbci	r23, 0xFF	; 255
     dea:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__itoa_ncheck>
	/* String to hold the ascii result */
	char Result[17];
	/* 10 for decimal */
	itoa(data,Result,10);
	/* Display The Result */
	LCD_Send_String(ports,(uint8*)Result);
     dee:	be 01       	movw	r22, r28
     df0:	6f 5f       	subi	r22, 0xFF	; 255
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	c8 01       	movw	r24, r16
     df6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_Send_String>
     dfa:	61 96       	adiw	r28, 0x11	; 17
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	08 95       	ret

00000e10 <EEPROM_Write>:
     e10:	e1 99       	sbic	0x1c, 1	; 28
     e12:	fe cf       	rjmp	.-4      	; 0xe10 <EEPROM_Write>
     e14:	9f bb       	out	0x1f, r25	; 31
     e16:	8e bb       	out	0x1e, r24	; 30
     e18:	6d bb       	out	0x1d, r22	; 29
     e1a:	e2 9a       	sbi	0x1c, 2	; 28
     e1c:	e1 9a       	sbi	0x1c, 1	; 28
     e1e:	08 95       	ret

00000e20 <EEPROM_Read>:
     e20:	e1 99       	sbic	0x1c, 1	; 28
     e22:	fe cf       	rjmp	.-4      	; 0xe20 <EEPROM_Read>
     e24:	9f bb       	out	0x1f, r25	; 31
     e26:	8e bb       	out	0x1e, r24	; 30
     e28:	e0 9a       	sbi	0x1c, 0	; 28
     e2a:	8d b3       	in	r24, 0x1d	; 29
     e2c:	08 95       	ret

00000e2e <EEPROM_Read_Word>:
     e2e:	af 92       	push	r10
     e30:	bf 92       	push	r11
     e32:	cf 92       	push	r12
     e34:	df 92       	push	r13
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	6c 01       	movw	r12, r24
     e44:	5b 01       	movw	r10, r22
     e46:	7b 01       	movw	r14, r22
     e48:	c0 e0       	ldi	r28, 0x00	; 0
     e4a:	d0 e0       	ldi	r29, 0x00	; 0
     e4c:	07 c0       	rjmp	.+14     	; 0xe5c <EEPROM_Read_Word+0x2e>
     e4e:	c8 01       	movw	r24, r16
     e50:	0e 94 10 07 	call	0xe20	; 0xe20 <EEPROM_Read>
     e54:	f7 01       	movw	r30, r14
     e56:	81 93       	st	Z+, r24
     e58:	7f 01       	movw	r14, r30
     e5a:	21 96       	adiw	r28, 0x01	; 1
     e5c:	8e 01       	movw	r16, r28
     e5e:	0c 0d       	add	r16, r12
     e60:	1d 1d       	adc	r17, r13
     e62:	c8 01       	movw	r24, r16
     e64:	0e 94 10 07 	call	0xe20	; 0xe20 <EEPROM_Read>
     e68:	81 11       	cpse	r24, r1
     e6a:	f1 cf       	rjmp	.-30     	; 0xe4e <EEPROM_Read_Word+0x20>
     e6c:	ca 0d       	add	r28, r10
     e6e:	db 1d       	adc	r29, r11
     e70:	18 82       	st	Y, r1
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	ff 90       	pop	r15
     e7c:	ef 90       	pop	r14
     e7e:	df 90       	pop	r13
     e80:	cf 90       	pop	r12
     e82:	bf 90       	pop	r11
     e84:	af 90       	pop	r10
     e86:	08 95       	ret

00000e88 <EEPROM_Write_Word>:
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	7c 01       	movw	r14, r24
     e96:	fb 01       	movw	r30, r22
     e98:	60 81       	ld	r22, Z
     e9a:	66 23       	and	r22, r22
     e9c:	89 f0       	breq	.+34     	; 0xec0 <EEPROM_Write_Word+0x38>
     e9e:	8f 01       	movw	r16, r30
     ea0:	0f 5f       	subi	r16, 0xFF	; 255
     ea2:	1f 4f       	sbci	r17, 0xFF	; 255
     ea4:	c0 e0       	ldi	r28, 0x00	; 0
     ea6:	d0 e0       	ldi	r29, 0x00	; 0
     ea8:	c7 01       	movw	r24, r14
     eaa:	8c 0f       	add	r24, r28
     eac:	9d 1f       	adc	r25, r29
     eae:	0e 94 08 07 	call	0xe10	; 0xe10 <EEPROM_Write>
     eb2:	21 96       	adiw	r28, 0x01	; 1
     eb4:	f8 01       	movw	r30, r16
     eb6:	61 91       	ld	r22, Z+
     eb8:	8f 01       	movw	r16, r30
     eba:	61 11       	cpse	r22, r1
     ebc:	f5 cf       	rjmp	.-22     	; 0xea8 <EEPROM_Write_Word+0x20>
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <EEPROM_Write_Word+0x3c>
     ec0:	c0 e0       	ldi	r28, 0x00	; 0
     ec2:	d0 e0       	ldi	r29, 0x00	; 0
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	c7 01       	movw	r24, r14
     ec8:	8c 0f       	add	r24, r28
     eca:	9d 1f       	adc	r25, r29
     ecc:	0e 94 08 07 	call	0xe10	; 0xe10 <EEPROM_Write>
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	ff 90       	pop	r15
     eda:	ef 90       	pop	r14
     edc:	08 95       	ret

00000ede <PinDirection>:
     ede:	fc 01       	movw	r30, r24
     ee0:	61 30       	cpi	r22, 0x01	; 1
     ee2:	79 f0       	breq	.+30     	; 0xf02 <PinDirection+0x24>
     ee4:	18 f0       	brcs	.+6      	; 0xeec <PinDirection+0xe>
     ee6:	62 30       	cpi	r22, 0x02	; 2
     ee8:	e1 f0       	breq	.+56     	; 0xf22 <PinDirection+0x44>
     eea:	08 95       	ret
     eec:	21 81       	ldd	r18, Z+1	; 0x01
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <PinDirection+0x1a>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	4a 95       	dec	r20
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <PinDirection+0x16>
     efc:	82 2b       	or	r24, r18
     efe:	81 83       	std	Z+1, r24	; 0x01
     f00:	08 95       	ret
     f02:	21 81       	ldd	r18, Z+1	; 0x01
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <PinDirection+0x30>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	4a 95       	dec	r20
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <PinDirection+0x2c>
     f12:	80 95       	com	r24
     f14:	92 2f       	mov	r25, r18
     f16:	98 23       	and	r25, r24
     f18:	91 83       	std	Z+1, r25	; 0x01
     f1a:	92 81       	ldd	r25, Z+2	; 0x02
     f1c:	89 23       	and	r24, r25
     f1e:	82 83       	std	Z+2, r24	; 0x02
     f20:	08 95       	ret
     f22:	21 81       	ldd	r18, Z+1	; 0x01
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <PinDirection+0x50>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	4a 95       	dec	r20
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <PinDirection+0x4c>
     f32:	98 2f       	mov	r25, r24
     f34:	90 95       	com	r25
     f36:	92 23       	and	r25, r18
     f38:	91 83       	std	Z+1, r25	; 0x01
     f3a:	92 81       	ldd	r25, Z+2	; 0x02
     f3c:	89 2b       	or	r24, r25
     f3e:	82 83       	std	Z+2, r24	; 0x02
     f40:	08 95       	ret

00000f42 <PinWrite>:
     f42:	44 23       	and	r20, r20
     f44:	19 f0       	breq	.+6      	; 0xf4c <PinWrite+0xa>
     f46:	41 30       	cpi	r20, 0x01	; 1
     f48:	71 f0       	breq	.+28     	; 0xf66 <PinWrite+0x24>
     f4a:	08 95       	ret
     f4c:	fc 01       	movw	r30, r24
     f4e:	42 81       	ldd	r20, Z+2	; 0x02
     f50:	21 e0       	ldi	r18, 0x01	; 1
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <PinWrite+0x18>
     f56:	22 0f       	add	r18, r18
     f58:	33 1f       	adc	r19, r19
     f5a:	6a 95       	dec	r22
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <PinWrite+0x14>
     f5e:	20 95       	com	r18
     f60:	24 23       	and	r18, r20
     f62:	22 83       	std	Z+2, r18	; 0x02
     f64:	08 95       	ret
     f66:	fc 01       	movw	r30, r24
     f68:	42 81       	ldd	r20, Z+2	; 0x02
     f6a:	21 e0       	ldi	r18, 0x01	; 1
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <PinWrite+0x32>
     f70:	22 0f       	add	r18, r18
     f72:	33 1f       	adc	r19, r19
     f74:	6a 95       	dec	r22
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <PinWrite+0x2e>
     f78:	24 2b       	or	r18, r20
     f7a:	22 83       	std	Z+2, r18	; 0x02
     f7c:	08 95       	ret

00000f7e <PinRead>:
     f7e:	fc 01       	movw	r30, r24
     f80:	20 81       	ld	r18, Z
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <PinRead+0xe>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	6a 95       	dec	r22
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <PinRead+0xa>
     f90:	82 23       	and	r24, r18
     f92:	08 95       	ret

00000f94 <SPI_Init>:
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	d8 2f       	mov	r29, r24
     fa0:	c6 2f       	mov	r28, r22
     fa2:	14 2f       	mov	r17, r20
     fa4:	f2 2e       	mov	r15, r18
     fa6:	60 31       	cpi	r22, 0x10	; 16
     fa8:	69 f4       	brne	.+26     	; 0xfc4 <SPI_Init+0x30>
     faa:	45 e0       	ldi	r20, 0x05	; 5
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	86 e3       	ldi	r24, 0x36	; 54
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 6f 07 	call	0xede	; 0xede <PinDirection>
     fb6:	47 e0       	ldi	r20, 0x07	; 7
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	86 e3       	ldi	r24, 0x36	; 54
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 6f 07 	call	0xede	; 0xede <PinDirection>
     fc2:	06 c0       	rjmp	.+12     	; 0xfd0 <SPI_Init+0x3c>
     fc4:	46 e0       	ldi	r20, 0x06	; 6
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	86 e3       	ldi	r24, 0x36	; 54
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 6f 07 	call	0xede	; 0xede <PinDirection>
     fd0:	8f 2d       	mov	r24, r15
     fd2:	80 64       	ori	r24, 0x40	; 64
     fd4:	18 2b       	or	r17, r24
     fd6:	d1 2b       	or	r29, r17
     fd8:	cd 2b       	or	r28, r29
     fda:	cd b9       	out	0x0d, r28	; 13
     fdc:	0e b9       	out	0x0e, r16	; 14
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	ff 90       	pop	r15
     fe8:	08 95       	ret

00000fea <SPI_Write>:
     fea:	8f b9       	out	0x0f, r24	; 15
     fec:	77 9b       	sbis	0x0e, 7	; 14
     fee:	fe cf       	rjmp	.-4      	; 0xfec <SPI_Write+0x2>
     ff0:	08 95       	ret

00000ff2 <Timer1_Init>:

#include "Timer1.h"

void Timer1_Init( Timer1_Mode T1_Mode ,T1_Compare_OC1A_Mode  CMP_OC1A_Mode , T1_Compare_OC1B_Mode CMP_OC1B_Mode ,  Timer1_Prescaler CLK )
{
		TCCR1  =(FOC1A_EN<<11)|(FOC1B_EN<<10)|(ICNC1_EN<<7)|(ICES1_EN<<6)|(CMP_OC1A_Mode)|(CMP_OC1B_Mode)|(T1_Mode)|(CLK);
     ff2:	82 2b       	or	r24, r18
     ff4:	80 64       	ori	r24, 0x40	; 64
     ff6:	48 2b       	or	r20, r24
     ff8:	59 2b       	or	r21, r25
     ffa:	64 2b       	or	r22, r20
     ffc:	75 2b       	or	r23, r21
     ffe:	7f bd       	out	0x2f, r23	; 47
    1000:	6e bd       	out	0x2e, r22	; 46
		TIMSK |=(TICIE1_EN<<TICIE1)|(OCIE1A_EN<<OCIE1A)|(OCIE1B_EN<<OCIE1B)|(TOIE1_EN<<TOIE1);
    1002:	89 b7       	in	r24, 0x39	; 57
    1004:	80 61       	ori	r24, 0x10	; 16
    1006:	89 bf       	out	0x39, r24	; 57
    1008:	08 95       	ret

0000100a <USART_Init>:
	if ( Data & 0x0100 )
	UCSRB |= (1<<TXB8);
       #endif
	
	/* Put data into buffer, sends the data */
	UDR = Data;
    100a:	ef 92       	push	r14
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	c6 2f       	mov	r28, r22
    1016:	d4 2f       	mov	r29, r20
    1018:	12 2f       	mov	r17, r18
    101a:	44 23       	and	r20, r20
    101c:	d1 f0       	breq	.+52     	; 0x1052 <USART_Init+0x48>
    101e:	bc 01       	movw	r22, r24
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__floatunsisf>
    1028:	9b 01       	movw	r18, r22
    102a:	ac 01       	movw	r20, r24
    102c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__addsf3>
    1030:	9b 01       	movw	r18, r22
    1032:	ac 01       	movw	r20, r24
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	74 e2       	ldi	r23, 0x24	; 36
    1038:	84 e7       	ldi	r24, 0x74	; 116
    103a:	99 e4       	ldi	r25, 0x49	; 73
    103c:	0e 94 ca 09 	call	0x1394	; 0x1394 <__divsf3>
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e8       	ldi	r20, 0x80	; 128
    1046:	5f e3       	ldi	r21, 0x3F	; 63
    1048:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__subsf3>
    104c:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__fixunssfsi>
    1050:	1b c0       	rjmp	.+54     	; 0x1088 <USART_Init+0x7e>
    1052:	bc 01       	movw	r22, r24
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__floatunsisf>
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e0       	ldi	r20, 0x00	; 0
    1062:	51 e4       	ldi	r21, 0x41	; 65
    1064:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__mulsf3>
    1068:	9b 01       	movw	r18, r22
    106a:	ac 01       	movw	r20, r24
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	74 e2       	ldi	r23, 0x24	; 36
    1070:	84 e7       	ldi	r24, 0x74	; 116
    1072:	99 e4       	ldi	r25, 0x49	; 73
    1074:	0e 94 ca 09 	call	0x1394	; 0x1394 <__divsf3>
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	40 e8       	ldi	r20, 0x80	; 128
    107e:	5f e3       	ldi	r21, 0x3F	; 63
    1080:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__subsf3>
    1084:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__fixunssfsi>
    1088:	69 b9       	out	0x09, r22	; 9
    108a:	73 70       	andi	r23, 0x03	; 3
    108c:	70 bd       	out	0x20, r23	; 32
    108e:	82 e0       	ldi	r24, 0x02	; 2
    1090:	8b b9       	out	0x0b, r24	; 11
    1092:	18 61       	ori	r17, 0x18	; 24
    1094:	1a b9       	out	0x0a, r17	; 10
    1096:	00 68       	ori	r16, 0x80	; 128
    1098:	0c 2b       	or	r16, r28
    109a:	ce 2d       	mov	r28, r14
    109c:	cc 0f       	add	r28, r28
    109e:	cc 0f       	add	r28, r28
    10a0:	cc 0f       	add	r28, r28
    10a2:	c0 2b       	or	r28, r16
    10a4:	cd 2b       	or	r28, r29
    10a6:	c0 bd       	out	0x20, r28	; 32
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ef 90       	pop	r14
    10b2:	08 95       	ret

000010b4 <USART_RecByte>:
    return ((resh << 8) | resl);
    #else
	/* Wait for data to be received */
	//while ( !(UCSRA & (1<<RXC)) );
	/* Get and return received data from buffer */
	if (UCSRA & (1<<RXC))
    10b4:	5f 9b       	sbis	0x0b, 7	; 11
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <USART_RecByte+0x8>
		return UDR;
    10b8:	8c b1       	in	r24, 0x0c	; 12
    10ba:	08 95       	ret
	#endif
    10bc:	08 95       	ret

000010be <SchedulerUpdate>:
	
	return status;
}

void Task_Report(void)
{
    10be:	ef 92       	push	r14
    10c0:	ff 92       	push	r15
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	c0 e1       	ldi	r28, 0x10	; 16
    10cc:	d1 e0       	ldi	r29, 0x01	; 1
    10ce:	0f 2e       	mov	r0, r31
    10d0:	f8 e2       	ldi	r31, 0x28	; 40
    10d2:	ef 2e       	mov	r14, r31
    10d4:	f1 e0       	ldi	r31, 0x01	; 1
    10d6:	ff 2e       	mov	r15, r31
    10d8:	f0 2d       	mov	r31, r0
    10da:	8e 01       	movw	r16, r28
    10dc:	e8 81       	ld	r30, Y
    10de:	f9 81       	ldd	r31, Y+1	; 0x01
    10e0:	30 97       	sbiw	r30, 0x00	; 0
    10e2:	09 f1       	breq	.+66     	; 0x1126 <SchedulerUpdate+0x68>
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	9b 81       	ldd	r25, Y+3	; 0x03
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	d1 f4       	brne	.+52     	; 0x1120 <SchedulerUpdate+0x62>
    10ec:	8f 81       	ldd	r24, Y+7	; 0x07
    10ee:	88 23       	and	r24, r24
    10f0:	41 f0       	breq	.+16     	; 0x1102 <SchedulerUpdate+0x44>
    10f2:	8e 81       	ldd	r24, Y+6	; 0x06
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
    10f6:	8e 83       	std	Y+6, r24	; 0x06
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	9d 81       	ldd	r25, Y+5	; 0x05
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	61 f4       	brne	.+24     	; 0x1118 <SchedulerUpdate+0x5a>
    1100:	12 c0       	rjmp	.+36     	; 0x1126 <SchedulerUpdate+0x68>
    1102:	09 95       	icall
    1104:	8e 81       	ldd	r24, Y+6	; 0x06
    1106:	81 50       	subi	r24, 0x01	; 1
    1108:	8e 83       	std	Y+6, r24	; 0x06
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
    110c:	9d 81       	ldd	r25, Y+5	; 0x05
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	19 f4       	brne	.+6      	; 0x1118 <SchedulerUpdate+0x5a>
    1112:	19 82       	std	Y+1, r1	; 0x01
    1114:	18 82       	st	Y, r1
    1116:	07 c0       	rjmp	.+14     	; 0x1126 <SchedulerUpdate+0x68>
    1118:	f8 01       	movw	r30, r16
    111a:	93 83       	std	Z+3, r25	; 0x03
    111c:	82 83       	std	Z+2, r24	; 0x02
    111e:	03 c0       	rjmp	.+6      	; 0x1126 <SchedulerUpdate+0x68>
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	9b 83       	std	Y+3, r25	; 0x03
    1124:	8a 83       	std	Y+2, r24	; 0x02
    1126:	28 96       	adiw	r28, 0x08	; 8
    1128:	ce 15       	cp	r28, r14
    112a:	df 05       	cpc	r29, r15
    112c:	b1 f6       	brne	.-84     	; 0x10da <SchedulerUpdate+0x1c>
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	ff 90       	pop	r15
    1138:	ef 90       	pop	r14
    113a:	08 95       	ret

0000113c <createTask>:
    113c:	ef 92       	push	r14
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	dc 01       	movw	r26, r24
    1144:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Task_Array>
    1148:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <Task_Array+0x1>
    114c:	89 2b       	or	r24, r25
    114e:	49 f0       	breq	.+18     	; 0x1162 <createTask+0x26>
    1150:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Task_Array+0x8>
    1154:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Task_Array+0x9>
    1158:	89 2b       	or	r24, r25
    115a:	b9 f0       	breq	.+46     	; 0x118a <createTask+0x4e>
    115c:	82 e0       	ldi	r24, 0x02	; 2
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <createTask+0x2a>
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	fc 01       	movw	r30, r24
    1168:	ee 0f       	add	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	ee 0f       	add	r30, r30
    116e:	ff 1f       	adc	r31, r31
    1170:	ee 0f       	add	r30, r30
    1172:	ff 1f       	adc	r31, r31
    1174:	e0 5f       	subi	r30, 0xF0	; 240
    1176:	fe 4f       	sbci	r31, 0xFE	; 254
    1178:	b1 83       	std	Z+1, r27	; 0x01
    117a:	a0 83       	st	Z, r26
    117c:	53 83       	std	Z+3, r21	; 0x03
    117e:	42 83       	std	Z+2, r20	; 0x02
    1180:	15 83       	std	Z+5, r17	; 0x05
    1182:	04 83       	std	Z+4, r16	; 0x04
    1184:	16 82       	std	Z+6, r1	; 0x06
    1186:	e7 82       	std	Z+7, r14	; 0x07
    1188:	03 c0       	rjmp	.+6      	; 0x1190 <createTask+0x54>
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	eb cf       	rjmp	.-42     	; 0x1166 <createTask+0x2a>
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	ef 90       	pop	r14
    1196:	08 95       	ret

00001198 <Task_Delete>:
    1198:	fc 01       	movw	r30, r24
    119a:	ee 0f       	add	r30, r30
    119c:	ff 1f       	adc	r31, r31
    119e:	ee 0f       	add	r30, r30
    11a0:	ff 1f       	adc	r31, r31
    11a2:	ee 0f       	add	r30, r30
    11a4:	ff 1f       	adc	r31, r31
    11a6:	e0 5f       	subi	r30, 0xF0	; 240
    11a8:	fe 4f       	sbci	r31, 0xFE	; 254
    11aa:	20 81       	ld	r18, Z
    11ac:	31 81       	ldd	r19, Z+1	; 0x01
    11ae:	23 2b       	or	r18, r19
    11b0:	21 f4       	brne	.+8      	; 0x11ba <Task_Delete+0x22>
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <ErrorFlag>
    11b8:	08 95       	ret
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	fc 01       	movw	r30, r24
    11c8:	e0 5f       	subi	r30, 0xF0	; 240
    11ca:	fe 4f       	sbci	r31, 0xFE	; 254
    11cc:	11 82       	std	Z+1, r1	; 0x01
    11ce:	10 82       	st	Z, r1
    11d0:	13 82       	std	Z+3, r1	; 0x03
    11d2:	12 82       	std	Z+2, r1	; 0x02
    11d4:	15 82       	std	Z+5, r1	; 0x05
    11d6:	14 82       	std	Z+4, r1	; 0x04
    11d8:	16 82       	std	Z+6, r1	; 0x06
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	08 95       	ret

000011de <SchedulerIntit>:
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 cc 08 	call	0x1198	; 0x1198 <Task_Delete>
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 cc 08 	call	0x1198	; 0x1198 <Task_Delete>
    11ee:	82 e0       	ldi	r24, 0x02	; 2
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	0e 94 cc 08 	call	0x1198	; 0x1198 <Task_Delete>
    11f6:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <ErrorFlag>
    11fa:	21 e0       	ldi	r18, 0x01	; 1
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	88 e0       	ldi	r24, 0x08	; 8
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 f9 07 	call	0xff2	; 0xff2 <Timer1_Init>
    120c:	88 ee       	ldi	r24, 0xE8	; 232
    120e:	93 e0       	ldi	r25, 0x03	; 3
    1210:	9b bd       	out	0x2b, r25	; 43
    1212:	8a bd       	out	0x2a, r24	; 42
    1214:	08 95       	ret

00001216 <Dispatcher>:
    1216:	ef 92       	push	r14
    1218:	ff 92       	push	r15
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	c0 e1       	ldi	r28, 0x10	; 16
    1224:	d1 e0       	ldi	r29, 0x01	; 1
    1226:	00 e0       	ldi	r16, 0x00	; 0
    1228:	10 e0       	ldi	r17, 0x00	; 0
    122a:	8f 81       	ldd	r24, Y+7	; 0x07
    122c:	88 23       	and	r24, r24
    122e:	81 f0       	breq	.+32     	; 0x1250 <Dispatcher+0x3a>
    1230:	8e 81       	ldd	r24, Y+6	; 0x06
    1232:	88 23       	and	r24, r24
    1234:	69 f0       	breq	.+26     	; 0x1250 <Dispatcher+0x3a>
    1236:	e8 81       	ld	r30, Y
    1238:	f9 81       	ldd	r31, Y+1	; 0x01
    123a:	09 95       	icall
    123c:	8e 81       	ldd	r24, Y+6	; 0x06
    123e:	81 50       	subi	r24, 0x01	; 1
    1240:	8e 83       	std	Y+6, r24	; 0x06
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
    1246:	89 2b       	or	r24, r25
    1248:	19 f4       	brne	.+6      	; 0x1250 <Dispatcher+0x3a>
    124a:	c8 01       	movw	r24, r16
    124c:	0e 94 cc 08 	call	0x1198	; 0x1198 <Task_Delete>
    1250:	0f 5f       	subi	r16, 0xFF	; 255
    1252:	1f 4f       	sbci	r17, 0xFF	; 255
    1254:	28 96       	adiw	r28, 0x08	; 8
    1256:	03 30       	cpi	r16, 0x03	; 3
    1258:	11 05       	cpc	r17, r1
    125a:	39 f7       	brne	.-50     	; 0x122a <Dispatcher+0x14>
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	ff 90       	pop	r15
    1266:	ef 90       	pop	r14
    1268:	08 95       	ret

0000126a <SchedulerStart>:
	#endif
}

void SchedulerStart(void)
{
	INT_Enable();
    126a:	8f b7       	in	r24, 0x3f	; 63
    126c:	80 68       	ori	r24, 0x80	; 128
    126e:	8f bf       	out	0x3f, r24	; 63
    1270:	08 95       	ret

00001272 <__vector_7>:
}

ISR(TIMER1_COMPA_vect)
{
    1272:	1f 92       	push	r1
    1274:	0f 92       	push	r0
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	0f 92       	push	r0
    127a:	11 24       	eor	r1, r1
    127c:	2f 93       	push	r18
    127e:	3f 93       	push	r19
    1280:	4f 93       	push	r20
    1282:	5f 93       	push	r21
    1284:	6f 93       	push	r22
    1286:	7f 93       	push	r23
    1288:	8f 93       	push	r24
    128a:	9f 93       	push	r25
    128c:	af 93       	push	r26
    128e:	bf 93       	push	r27
    1290:	ef 93       	push	r30
    1292:	ff 93       	push	r31
	SchedulerUpdate();
    1294:	0e 94 5f 08 	call	0x10be	; 0x10be <SchedulerUpdate>
    1298:	ff 91       	pop	r31
    129a:	ef 91       	pop	r30
    129c:	bf 91       	pop	r27
    129e:	af 91       	pop	r26
    12a0:	9f 91       	pop	r25
    12a2:	8f 91       	pop	r24
    12a4:	7f 91       	pop	r23
    12a6:	6f 91       	pop	r22
    12a8:	5f 91       	pop	r21
    12aa:	4f 91       	pop	r20
    12ac:	3f 91       	pop	r19
    12ae:	2f 91       	pop	r18
    12b0:	0f 90       	pop	r0
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	0f 90       	pop	r0
    12b6:	1f 90       	pop	r1
    12b8:	18 95       	reti

000012ba <__subsf3>:
    12ba:	50 58       	subi	r21, 0x80	; 128

000012bc <__addsf3>:
    12bc:	bb 27       	eor	r27, r27
    12be:	aa 27       	eor	r26, r26
    12c0:	0e 94 75 09 	call	0x12ea	; 0x12ea <__addsf3x>
    12c4:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__fp_round>
    12c8:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__fp_pscA>
    12cc:	38 f0       	brcs	.+14     	; 0x12dc <__addsf3+0x20>
    12ce:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__fp_pscB>
    12d2:	20 f0       	brcs	.+8      	; 0x12dc <__addsf3+0x20>
    12d4:	39 f4       	brne	.+14     	; 0x12e4 <__addsf3+0x28>
    12d6:	9f 3f       	cpi	r25, 0xFF	; 255
    12d8:	19 f4       	brne	.+6      	; 0x12e0 <__addsf3+0x24>
    12da:	26 f4       	brtc	.+8      	; 0x12e4 <__addsf3+0x28>
    12dc:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__fp_nan>
    12e0:	0e f4       	brtc	.+2      	; 0x12e4 <__addsf3+0x28>
    12e2:	e0 95       	com	r30
    12e4:	e7 fb       	bst	r30, 7
    12e6:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__fp_inf>

000012ea <__addsf3x>:
    12ea:	e9 2f       	mov	r30, r25
    12ec:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__fp_split3>
    12f0:	58 f3       	brcs	.-42     	; 0x12c8 <__addsf3+0xc>
    12f2:	ba 17       	cp	r27, r26
    12f4:	62 07       	cpc	r22, r18
    12f6:	73 07       	cpc	r23, r19
    12f8:	84 07       	cpc	r24, r20
    12fa:	95 07       	cpc	r25, r21
    12fc:	20 f0       	brcs	.+8      	; 0x1306 <__addsf3x+0x1c>
    12fe:	79 f4       	brne	.+30     	; 0x131e <__addsf3x+0x34>
    1300:	a6 f5       	brtc	.+104    	; 0x136a <__addsf3x+0x80>
    1302:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__fp_zero>
    1306:	0e f4       	brtc	.+2      	; 0x130a <__addsf3x+0x20>
    1308:	e0 95       	com	r30
    130a:	0b 2e       	mov	r0, r27
    130c:	ba 2f       	mov	r27, r26
    130e:	a0 2d       	mov	r26, r0
    1310:	0b 01       	movw	r0, r22
    1312:	b9 01       	movw	r22, r18
    1314:	90 01       	movw	r18, r0
    1316:	0c 01       	movw	r0, r24
    1318:	ca 01       	movw	r24, r20
    131a:	a0 01       	movw	r20, r0
    131c:	11 24       	eor	r1, r1
    131e:	ff 27       	eor	r31, r31
    1320:	59 1b       	sub	r21, r25
    1322:	99 f0       	breq	.+38     	; 0x134a <__addsf3x+0x60>
    1324:	59 3f       	cpi	r21, 0xF9	; 249
    1326:	50 f4       	brcc	.+20     	; 0x133c <__addsf3x+0x52>
    1328:	50 3e       	cpi	r21, 0xE0	; 224
    132a:	68 f1       	brcs	.+90     	; 0x1386 <__addsf3x+0x9c>
    132c:	1a 16       	cp	r1, r26
    132e:	f0 40       	sbci	r31, 0x00	; 0
    1330:	a2 2f       	mov	r26, r18
    1332:	23 2f       	mov	r18, r19
    1334:	34 2f       	mov	r19, r20
    1336:	44 27       	eor	r20, r20
    1338:	58 5f       	subi	r21, 0xF8	; 248
    133a:	f3 cf       	rjmp	.-26     	; 0x1322 <__addsf3x+0x38>
    133c:	46 95       	lsr	r20
    133e:	37 95       	ror	r19
    1340:	27 95       	ror	r18
    1342:	a7 95       	ror	r26
    1344:	f0 40       	sbci	r31, 0x00	; 0
    1346:	53 95       	inc	r21
    1348:	c9 f7       	brne	.-14     	; 0x133c <__addsf3x+0x52>
    134a:	7e f4       	brtc	.+30     	; 0x136a <__addsf3x+0x80>
    134c:	1f 16       	cp	r1, r31
    134e:	ba 0b       	sbc	r27, r26
    1350:	62 0b       	sbc	r22, r18
    1352:	73 0b       	sbc	r23, r19
    1354:	84 0b       	sbc	r24, r20
    1356:	ba f0       	brmi	.+46     	; 0x1386 <__addsf3x+0x9c>
    1358:	91 50       	subi	r25, 0x01	; 1
    135a:	a1 f0       	breq	.+40     	; 0x1384 <__addsf3x+0x9a>
    135c:	ff 0f       	add	r31, r31
    135e:	bb 1f       	adc	r27, r27
    1360:	66 1f       	adc	r22, r22
    1362:	77 1f       	adc	r23, r23
    1364:	88 1f       	adc	r24, r24
    1366:	c2 f7       	brpl	.-16     	; 0x1358 <__addsf3x+0x6e>
    1368:	0e c0       	rjmp	.+28     	; 0x1386 <__addsf3x+0x9c>
    136a:	ba 0f       	add	r27, r26
    136c:	62 1f       	adc	r22, r18
    136e:	73 1f       	adc	r23, r19
    1370:	84 1f       	adc	r24, r20
    1372:	48 f4       	brcc	.+18     	; 0x1386 <__addsf3x+0x9c>
    1374:	87 95       	ror	r24
    1376:	77 95       	ror	r23
    1378:	67 95       	ror	r22
    137a:	b7 95       	ror	r27
    137c:	f7 95       	ror	r31
    137e:	9e 3f       	cpi	r25, 0xFE	; 254
    1380:	08 f0       	brcs	.+2      	; 0x1384 <__addsf3x+0x9a>
    1382:	b0 cf       	rjmp	.-160    	; 0x12e4 <__addsf3+0x28>
    1384:	93 95       	inc	r25
    1386:	88 0f       	add	r24, r24
    1388:	08 f0       	brcs	.+2      	; 0x138c <__addsf3x+0xa2>
    138a:	99 27       	eor	r25, r25
    138c:	ee 0f       	add	r30, r30
    138e:	97 95       	ror	r25
    1390:	87 95       	ror	r24
    1392:	08 95       	ret

00001394 <__divsf3>:
    1394:	0e 94 de 09 	call	0x13bc	; 0x13bc <__divsf3x>
    1398:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__fp_round>
    139c:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__fp_pscB>
    13a0:	58 f0       	brcs	.+22     	; 0x13b8 <__divsf3+0x24>
    13a2:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__fp_pscA>
    13a6:	40 f0       	brcs	.+16     	; 0x13b8 <__divsf3+0x24>
    13a8:	29 f4       	brne	.+10     	; 0x13b4 <__divsf3+0x20>
    13aa:	5f 3f       	cpi	r21, 0xFF	; 255
    13ac:	29 f0       	breq	.+10     	; 0x13b8 <__divsf3+0x24>
    13ae:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__fp_inf>
    13b2:	51 11       	cpse	r21, r1
    13b4:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__fp_szero>
    13b8:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__fp_nan>

000013bc <__divsf3x>:
    13bc:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__fp_split3>
    13c0:	68 f3       	brcs	.-38     	; 0x139c <__divsf3+0x8>

000013c2 <__divsf3_pse>:
    13c2:	99 23       	and	r25, r25
    13c4:	b1 f3       	breq	.-20     	; 0x13b2 <__divsf3+0x1e>
    13c6:	55 23       	and	r21, r21
    13c8:	91 f3       	breq	.-28     	; 0x13ae <__divsf3+0x1a>
    13ca:	95 1b       	sub	r25, r21
    13cc:	55 0b       	sbc	r21, r21
    13ce:	bb 27       	eor	r27, r27
    13d0:	aa 27       	eor	r26, r26
    13d2:	62 17       	cp	r22, r18
    13d4:	73 07       	cpc	r23, r19
    13d6:	84 07       	cpc	r24, r20
    13d8:	38 f0       	brcs	.+14     	; 0x13e8 <__divsf3_pse+0x26>
    13da:	9f 5f       	subi	r25, 0xFF	; 255
    13dc:	5f 4f       	sbci	r21, 0xFF	; 255
    13de:	22 0f       	add	r18, r18
    13e0:	33 1f       	adc	r19, r19
    13e2:	44 1f       	adc	r20, r20
    13e4:	aa 1f       	adc	r26, r26
    13e6:	a9 f3       	breq	.-22     	; 0x13d2 <__divsf3_pse+0x10>
    13e8:	35 d0       	rcall	.+106    	; 0x1454 <__divsf3_pse+0x92>
    13ea:	0e 2e       	mov	r0, r30
    13ec:	3a f0       	brmi	.+14     	; 0x13fc <__divsf3_pse+0x3a>
    13ee:	e0 e8       	ldi	r30, 0x80	; 128
    13f0:	32 d0       	rcall	.+100    	; 0x1456 <__divsf3_pse+0x94>
    13f2:	91 50       	subi	r25, 0x01	; 1
    13f4:	50 40       	sbci	r21, 0x00	; 0
    13f6:	e6 95       	lsr	r30
    13f8:	00 1c       	adc	r0, r0
    13fa:	ca f7       	brpl	.-14     	; 0x13ee <__divsf3_pse+0x2c>
    13fc:	2b d0       	rcall	.+86     	; 0x1454 <__divsf3_pse+0x92>
    13fe:	fe 2f       	mov	r31, r30
    1400:	29 d0       	rcall	.+82     	; 0x1454 <__divsf3_pse+0x92>
    1402:	66 0f       	add	r22, r22
    1404:	77 1f       	adc	r23, r23
    1406:	88 1f       	adc	r24, r24
    1408:	bb 1f       	adc	r27, r27
    140a:	26 17       	cp	r18, r22
    140c:	37 07       	cpc	r19, r23
    140e:	48 07       	cpc	r20, r24
    1410:	ab 07       	cpc	r26, r27
    1412:	b0 e8       	ldi	r27, 0x80	; 128
    1414:	09 f0       	breq	.+2      	; 0x1418 <__divsf3_pse+0x56>
    1416:	bb 0b       	sbc	r27, r27
    1418:	80 2d       	mov	r24, r0
    141a:	bf 01       	movw	r22, r30
    141c:	ff 27       	eor	r31, r31
    141e:	93 58       	subi	r25, 0x83	; 131
    1420:	5f 4f       	sbci	r21, 0xFF	; 255
    1422:	3a f0       	brmi	.+14     	; 0x1432 <__divsf3_pse+0x70>
    1424:	9e 3f       	cpi	r25, 0xFE	; 254
    1426:	51 05       	cpc	r21, r1
    1428:	78 f0       	brcs	.+30     	; 0x1448 <__divsf3_pse+0x86>
    142a:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__fp_inf>
    142e:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__fp_szero>
    1432:	5f 3f       	cpi	r21, 0xFF	; 255
    1434:	e4 f3       	brlt	.-8      	; 0x142e <__divsf3_pse+0x6c>
    1436:	98 3e       	cpi	r25, 0xE8	; 232
    1438:	d4 f3       	brlt	.-12     	; 0x142e <__divsf3_pse+0x6c>
    143a:	86 95       	lsr	r24
    143c:	77 95       	ror	r23
    143e:	67 95       	ror	r22
    1440:	b7 95       	ror	r27
    1442:	f7 95       	ror	r31
    1444:	9f 5f       	subi	r25, 0xFF	; 255
    1446:	c9 f7       	brne	.-14     	; 0x143a <__divsf3_pse+0x78>
    1448:	88 0f       	add	r24, r24
    144a:	91 1d       	adc	r25, r1
    144c:	96 95       	lsr	r25
    144e:	87 95       	ror	r24
    1450:	97 f9       	bld	r25, 7
    1452:	08 95       	ret
    1454:	e1 e0       	ldi	r30, 0x01	; 1
    1456:	66 0f       	add	r22, r22
    1458:	77 1f       	adc	r23, r23
    145a:	88 1f       	adc	r24, r24
    145c:	bb 1f       	adc	r27, r27
    145e:	62 17       	cp	r22, r18
    1460:	73 07       	cpc	r23, r19
    1462:	84 07       	cpc	r24, r20
    1464:	ba 07       	cpc	r27, r26
    1466:	20 f0       	brcs	.+8      	; 0x1470 <__divsf3_pse+0xae>
    1468:	62 1b       	sub	r22, r18
    146a:	73 0b       	sbc	r23, r19
    146c:	84 0b       	sbc	r24, r20
    146e:	ba 0b       	sbc	r27, r26
    1470:	ee 1f       	adc	r30, r30
    1472:	88 f7       	brcc	.-30     	; 0x1456 <__divsf3_pse+0x94>
    1474:	e0 95       	com	r30
    1476:	08 95       	ret

00001478 <__fixunssfsi>:
    1478:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__fp_splitA>
    147c:	88 f0       	brcs	.+34     	; 0x14a0 <__fixunssfsi+0x28>
    147e:	9f 57       	subi	r25, 0x7F	; 127
    1480:	98 f0       	brcs	.+38     	; 0x14a8 <__fixunssfsi+0x30>
    1482:	b9 2f       	mov	r27, r25
    1484:	99 27       	eor	r25, r25
    1486:	b7 51       	subi	r27, 0x17	; 23
    1488:	b0 f0       	brcs	.+44     	; 0x14b6 <__fixunssfsi+0x3e>
    148a:	e1 f0       	breq	.+56     	; 0x14c4 <__fixunssfsi+0x4c>
    148c:	66 0f       	add	r22, r22
    148e:	77 1f       	adc	r23, r23
    1490:	88 1f       	adc	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	1a f0       	brmi	.+6      	; 0x149c <__fixunssfsi+0x24>
    1496:	ba 95       	dec	r27
    1498:	c9 f7       	brne	.-14     	; 0x148c <__fixunssfsi+0x14>
    149a:	14 c0       	rjmp	.+40     	; 0x14c4 <__fixunssfsi+0x4c>
    149c:	b1 30       	cpi	r27, 0x01	; 1
    149e:	91 f0       	breq	.+36     	; 0x14c4 <__fixunssfsi+0x4c>
    14a0:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fp_zero>
    14a4:	b1 e0       	ldi	r27, 0x01	; 1
    14a6:	08 95       	ret
    14a8:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__fp_zero>
    14ac:	67 2f       	mov	r22, r23
    14ae:	78 2f       	mov	r23, r24
    14b0:	88 27       	eor	r24, r24
    14b2:	b8 5f       	subi	r27, 0xF8	; 248
    14b4:	39 f0       	breq	.+14     	; 0x14c4 <__fixunssfsi+0x4c>
    14b6:	b9 3f       	cpi	r27, 0xF9	; 249
    14b8:	cc f3       	brlt	.-14     	; 0x14ac <__fixunssfsi+0x34>
    14ba:	86 95       	lsr	r24
    14bc:	77 95       	ror	r23
    14be:	67 95       	ror	r22
    14c0:	b3 95       	inc	r27
    14c2:	d9 f7       	brne	.-10     	; 0x14ba <__fixunssfsi+0x42>
    14c4:	3e f4       	brtc	.+14     	; 0x14d4 <__fixunssfsi+0x5c>
    14c6:	90 95       	com	r25
    14c8:	80 95       	com	r24
    14ca:	70 95       	com	r23
    14cc:	61 95       	neg	r22
    14ce:	7f 4f       	sbci	r23, 0xFF	; 255
    14d0:	8f 4f       	sbci	r24, 0xFF	; 255
    14d2:	9f 4f       	sbci	r25, 0xFF	; 255
    14d4:	08 95       	ret

000014d6 <__floatunsisf>:
    14d6:	e8 94       	clt
    14d8:	09 c0       	rjmp	.+18     	; 0x14ec <__floatsisf+0x12>

000014da <__floatsisf>:
    14da:	97 fb       	bst	r25, 7
    14dc:	3e f4       	brtc	.+14     	; 0x14ec <__floatsisf+0x12>
    14de:	90 95       	com	r25
    14e0:	80 95       	com	r24
    14e2:	70 95       	com	r23
    14e4:	61 95       	neg	r22
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255
    14e8:	8f 4f       	sbci	r24, 0xFF	; 255
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	99 23       	and	r25, r25
    14ee:	a9 f0       	breq	.+42     	; 0x151a <__floatsisf+0x40>
    14f0:	f9 2f       	mov	r31, r25
    14f2:	96 e9       	ldi	r25, 0x96	; 150
    14f4:	bb 27       	eor	r27, r27
    14f6:	93 95       	inc	r25
    14f8:	f6 95       	lsr	r31
    14fa:	87 95       	ror	r24
    14fc:	77 95       	ror	r23
    14fe:	67 95       	ror	r22
    1500:	b7 95       	ror	r27
    1502:	f1 11       	cpse	r31, r1
    1504:	f8 cf       	rjmp	.-16     	; 0x14f6 <__floatsisf+0x1c>
    1506:	fa f4       	brpl	.+62     	; 0x1546 <__floatsisf+0x6c>
    1508:	bb 0f       	add	r27, r27
    150a:	11 f4       	brne	.+4      	; 0x1510 <__floatsisf+0x36>
    150c:	60 ff       	sbrs	r22, 0
    150e:	1b c0       	rjmp	.+54     	; 0x1546 <__floatsisf+0x6c>
    1510:	6f 5f       	subi	r22, 0xFF	; 255
    1512:	7f 4f       	sbci	r23, 0xFF	; 255
    1514:	8f 4f       	sbci	r24, 0xFF	; 255
    1516:	9f 4f       	sbci	r25, 0xFF	; 255
    1518:	16 c0       	rjmp	.+44     	; 0x1546 <__floatsisf+0x6c>
    151a:	88 23       	and	r24, r24
    151c:	11 f0       	breq	.+4      	; 0x1522 <__floatsisf+0x48>
    151e:	96 e9       	ldi	r25, 0x96	; 150
    1520:	11 c0       	rjmp	.+34     	; 0x1544 <__floatsisf+0x6a>
    1522:	77 23       	and	r23, r23
    1524:	21 f0       	breq	.+8      	; 0x152e <__floatsisf+0x54>
    1526:	9e e8       	ldi	r25, 0x8E	; 142
    1528:	87 2f       	mov	r24, r23
    152a:	76 2f       	mov	r23, r22
    152c:	05 c0       	rjmp	.+10     	; 0x1538 <__floatsisf+0x5e>
    152e:	66 23       	and	r22, r22
    1530:	71 f0       	breq	.+28     	; 0x154e <__floatsisf+0x74>
    1532:	96 e8       	ldi	r25, 0x86	; 134
    1534:	86 2f       	mov	r24, r22
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	2a f0       	brmi	.+10     	; 0x1546 <__floatsisf+0x6c>
    153c:	9a 95       	dec	r25
    153e:	66 0f       	add	r22, r22
    1540:	77 1f       	adc	r23, r23
    1542:	88 1f       	adc	r24, r24
    1544:	da f7       	brpl	.-10     	; 0x153c <__floatsisf+0x62>
    1546:	88 0f       	add	r24, r24
    1548:	96 95       	lsr	r25
    154a:	87 95       	ror	r24
    154c:	97 f9       	bld	r25, 7
    154e:	08 95       	ret

00001550 <__fp_inf>:
    1550:	97 f9       	bld	r25, 7
    1552:	9f 67       	ori	r25, 0x7F	; 127
    1554:	80 e8       	ldi	r24, 0x80	; 128
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	08 95       	ret

0000155c <__fp_nan>:
    155c:	9f ef       	ldi	r25, 0xFF	; 255
    155e:	80 ec       	ldi	r24, 0xC0	; 192
    1560:	08 95       	ret

00001562 <__fp_pscA>:
    1562:	00 24       	eor	r0, r0
    1564:	0a 94       	dec	r0
    1566:	16 16       	cp	r1, r22
    1568:	17 06       	cpc	r1, r23
    156a:	18 06       	cpc	r1, r24
    156c:	09 06       	cpc	r0, r25
    156e:	08 95       	ret

00001570 <__fp_pscB>:
    1570:	00 24       	eor	r0, r0
    1572:	0a 94       	dec	r0
    1574:	12 16       	cp	r1, r18
    1576:	13 06       	cpc	r1, r19
    1578:	14 06       	cpc	r1, r20
    157a:	05 06       	cpc	r0, r21
    157c:	08 95       	ret

0000157e <__fp_round>:
    157e:	09 2e       	mov	r0, r25
    1580:	03 94       	inc	r0
    1582:	00 0c       	add	r0, r0
    1584:	11 f4       	brne	.+4      	; 0x158a <__fp_round+0xc>
    1586:	88 23       	and	r24, r24
    1588:	52 f0       	brmi	.+20     	; 0x159e <__fp_round+0x20>
    158a:	bb 0f       	add	r27, r27
    158c:	40 f4       	brcc	.+16     	; 0x159e <__fp_round+0x20>
    158e:	bf 2b       	or	r27, r31
    1590:	11 f4       	brne	.+4      	; 0x1596 <__fp_round+0x18>
    1592:	60 ff       	sbrs	r22, 0
    1594:	04 c0       	rjmp	.+8      	; 0x159e <__fp_round+0x20>
    1596:	6f 5f       	subi	r22, 0xFF	; 255
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	8f 4f       	sbci	r24, 0xFF	; 255
    159c:	9f 4f       	sbci	r25, 0xFF	; 255
    159e:	08 95       	ret

000015a0 <__fp_split3>:
    15a0:	57 fd       	sbrc	r21, 7
    15a2:	90 58       	subi	r25, 0x80	; 128
    15a4:	44 0f       	add	r20, r20
    15a6:	55 1f       	adc	r21, r21
    15a8:	59 f0       	breq	.+22     	; 0x15c0 <__fp_splitA+0x10>
    15aa:	5f 3f       	cpi	r21, 0xFF	; 255
    15ac:	71 f0       	breq	.+28     	; 0x15ca <__fp_splitA+0x1a>
    15ae:	47 95       	ror	r20

000015b0 <__fp_splitA>:
    15b0:	88 0f       	add	r24, r24
    15b2:	97 fb       	bst	r25, 7
    15b4:	99 1f       	adc	r25, r25
    15b6:	61 f0       	breq	.+24     	; 0x15d0 <__fp_splitA+0x20>
    15b8:	9f 3f       	cpi	r25, 0xFF	; 255
    15ba:	79 f0       	breq	.+30     	; 0x15da <__fp_splitA+0x2a>
    15bc:	87 95       	ror	r24
    15be:	08 95       	ret
    15c0:	12 16       	cp	r1, r18
    15c2:	13 06       	cpc	r1, r19
    15c4:	14 06       	cpc	r1, r20
    15c6:	55 1f       	adc	r21, r21
    15c8:	f2 cf       	rjmp	.-28     	; 0x15ae <__fp_split3+0xe>
    15ca:	46 95       	lsr	r20
    15cc:	f1 df       	rcall	.-30     	; 0x15b0 <__fp_splitA>
    15ce:	08 c0       	rjmp	.+16     	; 0x15e0 <__fp_splitA+0x30>
    15d0:	16 16       	cp	r1, r22
    15d2:	17 06       	cpc	r1, r23
    15d4:	18 06       	cpc	r1, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	f1 cf       	rjmp	.-30     	; 0x15bc <__fp_splitA+0xc>
    15da:	86 95       	lsr	r24
    15dc:	71 05       	cpc	r23, r1
    15de:	61 05       	cpc	r22, r1
    15e0:	08 94       	sec
    15e2:	08 95       	ret

000015e4 <__fp_zero>:
    15e4:	e8 94       	clt

000015e6 <__fp_szero>:
    15e6:	bb 27       	eor	r27, r27
    15e8:	66 27       	eor	r22, r22
    15ea:	77 27       	eor	r23, r23
    15ec:	cb 01       	movw	r24, r22
    15ee:	97 f9       	bld	r25, 7
    15f0:	08 95       	ret

000015f2 <__mulsf3>:
    15f2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__mulsf3x>
    15f6:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__fp_round>
    15fa:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__fp_pscA>
    15fe:	38 f0       	brcs	.+14     	; 0x160e <__mulsf3+0x1c>
    1600:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__fp_pscB>
    1604:	20 f0       	brcs	.+8      	; 0x160e <__mulsf3+0x1c>
    1606:	95 23       	and	r25, r21
    1608:	11 f0       	breq	.+4      	; 0x160e <__mulsf3+0x1c>
    160a:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__fp_inf>
    160e:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__fp_nan>
    1612:	11 24       	eor	r1, r1
    1614:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__fp_szero>

00001618 <__mulsf3x>:
    1618:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__fp_split3>
    161c:	70 f3       	brcs	.-36     	; 0x15fa <__mulsf3+0x8>

0000161e <__mulsf3_pse>:
    161e:	95 9f       	mul	r25, r21
    1620:	c1 f3       	breq	.-16     	; 0x1612 <__mulsf3+0x20>
    1622:	95 0f       	add	r25, r21
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	55 1f       	adc	r21, r21
    1628:	62 9f       	mul	r22, r18
    162a:	f0 01       	movw	r30, r0
    162c:	72 9f       	mul	r23, r18
    162e:	bb 27       	eor	r27, r27
    1630:	f0 0d       	add	r31, r0
    1632:	b1 1d       	adc	r27, r1
    1634:	63 9f       	mul	r22, r19
    1636:	aa 27       	eor	r26, r26
    1638:	f0 0d       	add	r31, r0
    163a:	b1 1d       	adc	r27, r1
    163c:	aa 1f       	adc	r26, r26
    163e:	64 9f       	mul	r22, r20
    1640:	66 27       	eor	r22, r22
    1642:	b0 0d       	add	r27, r0
    1644:	a1 1d       	adc	r26, r1
    1646:	66 1f       	adc	r22, r22
    1648:	82 9f       	mul	r24, r18
    164a:	22 27       	eor	r18, r18
    164c:	b0 0d       	add	r27, r0
    164e:	a1 1d       	adc	r26, r1
    1650:	62 1f       	adc	r22, r18
    1652:	73 9f       	mul	r23, r19
    1654:	b0 0d       	add	r27, r0
    1656:	a1 1d       	adc	r26, r1
    1658:	62 1f       	adc	r22, r18
    165a:	83 9f       	mul	r24, r19
    165c:	a0 0d       	add	r26, r0
    165e:	61 1d       	adc	r22, r1
    1660:	22 1f       	adc	r18, r18
    1662:	74 9f       	mul	r23, r20
    1664:	33 27       	eor	r19, r19
    1666:	a0 0d       	add	r26, r0
    1668:	61 1d       	adc	r22, r1
    166a:	23 1f       	adc	r18, r19
    166c:	84 9f       	mul	r24, r20
    166e:	60 0d       	add	r22, r0
    1670:	21 1d       	adc	r18, r1
    1672:	82 2f       	mov	r24, r18
    1674:	76 2f       	mov	r23, r22
    1676:	6a 2f       	mov	r22, r26
    1678:	11 24       	eor	r1, r1
    167a:	9f 57       	subi	r25, 0x7F	; 127
    167c:	50 40       	sbci	r21, 0x00	; 0
    167e:	9a f0       	brmi	.+38     	; 0x16a6 <__mulsf3_pse+0x88>
    1680:	f1 f0       	breq	.+60     	; 0x16be <__mulsf3_pse+0xa0>
    1682:	88 23       	and	r24, r24
    1684:	4a f0       	brmi	.+18     	; 0x1698 <__mulsf3_pse+0x7a>
    1686:	ee 0f       	add	r30, r30
    1688:	ff 1f       	adc	r31, r31
    168a:	bb 1f       	adc	r27, r27
    168c:	66 1f       	adc	r22, r22
    168e:	77 1f       	adc	r23, r23
    1690:	88 1f       	adc	r24, r24
    1692:	91 50       	subi	r25, 0x01	; 1
    1694:	50 40       	sbci	r21, 0x00	; 0
    1696:	a9 f7       	brne	.-22     	; 0x1682 <__mulsf3_pse+0x64>
    1698:	9e 3f       	cpi	r25, 0xFE	; 254
    169a:	51 05       	cpc	r21, r1
    169c:	80 f0       	brcs	.+32     	; 0x16be <__mulsf3_pse+0xa0>
    169e:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__fp_inf>
    16a2:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__fp_szero>
    16a6:	5f 3f       	cpi	r21, 0xFF	; 255
    16a8:	e4 f3       	brlt	.-8      	; 0x16a2 <__mulsf3_pse+0x84>
    16aa:	98 3e       	cpi	r25, 0xE8	; 232
    16ac:	d4 f3       	brlt	.-12     	; 0x16a2 <__mulsf3_pse+0x84>
    16ae:	86 95       	lsr	r24
    16b0:	77 95       	ror	r23
    16b2:	67 95       	ror	r22
    16b4:	b7 95       	ror	r27
    16b6:	f7 95       	ror	r31
    16b8:	e7 95       	ror	r30
    16ba:	9f 5f       	subi	r25, 0xFF	; 255
    16bc:	c1 f7       	brne	.-16     	; 0x16ae <__mulsf3_pse+0x90>
    16be:	fe 2b       	or	r31, r30
    16c0:	88 0f       	add	r24, r24
    16c2:	91 1d       	adc	r25, r1
    16c4:	96 95       	lsr	r25
    16c6:	87 95       	ror	r24
    16c8:	97 f9       	bld	r25, 7
    16ca:	08 95       	ret

000016cc <__tablejump2__>:
    16cc:	ee 0f       	add	r30, r30
    16ce:	ff 1f       	adc	r31, r31
    16d0:	05 90       	lpm	r0, Z+
    16d2:	f4 91       	lpm	r31, Z
    16d4:	e0 2d       	mov	r30, r0
    16d6:	09 94       	ijmp

000016d8 <strcmp>:
    16d8:	fb 01       	movw	r30, r22
    16da:	dc 01       	movw	r26, r24
    16dc:	8d 91       	ld	r24, X+
    16de:	01 90       	ld	r0, Z+
    16e0:	80 19       	sub	r24, r0
    16e2:	01 10       	cpse	r0, r1
    16e4:	d9 f3       	breq	.-10     	; 0x16dc <strcmp+0x4>
    16e6:	99 0b       	sbc	r25, r25
    16e8:	08 95       	ret

000016ea <__itoa_ncheck>:
    16ea:	bb 27       	eor	r27, r27
    16ec:	4a 30       	cpi	r20, 0x0A	; 10
    16ee:	31 f4       	brne	.+12     	; 0x16fc <__itoa_ncheck+0x12>
    16f0:	99 23       	and	r25, r25
    16f2:	22 f4       	brpl	.+8      	; 0x16fc <__itoa_ncheck+0x12>
    16f4:	bd e2       	ldi	r27, 0x2D	; 45
    16f6:	90 95       	com	r25
    16f8:	81 95       	neg	r24
    16fa:	9f 4f       	sbci	r25, 0xFF	; 255
    16fc:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <__utoa_common>

00001700 <__utoa_ncheck>:
    1700:	bb 27       	eor	r27, r27

00001702 <__utoa_common>:
    1702:	fb 01       	movw	r30, r22
    1704:	55 27       	eor	r21, r21
    1706:	aa 27       	eor	r26, r26
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	aa 1f       	adc	r26, r26
    170e:	a4 17       	cp	r26, r20
    1710:	10 f0       	brcs	.+4      	; 0x1716 <__utoa_common+0x14>
    1712:	a4 1b       	sub	r26, r20
    1714:	83 95       	inc	r24
    1716:	50 51       	subi	r21, 0x10	; 16
    1718:	b9 f7       	brne	.-18     	; 0x1708 <__utoa_common+0x6>
    171a:	a0 5d       	subi	r26, 0xD0	; 208
    171c:	aa 33       	cpi	r26, 0x3A	; 58
    171e:	08 f0       	brcs	.+2      	; 0x1722 <__utoa_common+0x20>
    1720:	a9 5d       	subi	r26, 0xD9	; 217
    1722:	a1 93       	st	Z+, r26
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	79 f7       	brne	.-34     	; 0x1706 <__utoa_common+0x4>
    1728:	b1 11       	cpse	r27, r1
    172a:	b1 93       	st	Z+, r27
    172c:	11 92       	st	Z+, r1
    172e:	cb 01       	movw	r24, r22
    1730:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <strrev>

00001734 <strrev>:
    1734:	dc 01       	movw	r26, r24
    1736:	fc 01       	movw	r30, r24
    1738:	67 2f       	mov	r22, r23
    173a:	71 91       	ld	r23, Z+
    173c:	77 23       	and	r23, r23
    173e:	e1 f7       	brne	.-8      	; 0x1738 <strrev+0x4>
    1740:	32 97       	sbiw	r30, 0x02	; 2
    1742:	04 c0       	rjmp	.+8      	; 0x174c <strrev+0x18>
    1744:	7c 91       	ld	r23, X
    1746:	6d 93       	st	X+, r22
    1748:	70 83       	st	Z, r23
    174a:	62 91       	ld	r22, -Z
    174c:	ae 17       	cp	r26, r30
    174e:	bf 07       	cpc	r27, r31
    1750:	c8 f3       	brcs	.-14     	; 0x1744 <strrev+0x10>
    1752:	08 95       	ret

00001754 <_exit>:
    1754:	f8 94       	cli

00001756 <__stop_program>:
    1756:	ff cf       	rjmp	.-2      	; 0x1756 <__stop_program>
